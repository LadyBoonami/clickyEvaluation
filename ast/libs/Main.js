// Generated by psc-bundle 0.10.1
var PS = {};
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Extend = function (__superclass_Data$dotFunctor$dotFunctor_0, extend) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.extend = extend;
  };
  var extend = function (dict) {
      return dict.extend;
  };
  exports["Extend"] = Extend;
  exports["extend"] = extend;
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor = PS["Data.Functor"];        
  var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
      this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;
})(PS["Control.Comonad"] = PS["Control.Comonad"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Unit = PS["Data.Unit"];        
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["defer"] = defer;
  exports["fix"] = fix;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  }; 
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordBoolean = new Ord(function () {
      return Data_Eq.eqBoolean;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $23 = compare(dictOrd)(a1)(a2);
              if ($23 instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $24 = compare(dictOrd)(a1)(a2);
              if ($24 instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $26 = compare(dictOrd)(a1)(a2);
              if ($26 instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $27 = compare(dictOrd)(a1)(a2);
              if ($27 instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var boundedBoolean = new Bounded(function () {
      return Data_Ord.ordBoolean;
  }, false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["composeKleisli"] = composeKleisli;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeConj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Conj);
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["newtypeConj"] = newtypeConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotPlus$dotPlus_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 208, column 3 - line 209, column 3: " + [ v.constructor.name ]);
      });
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar34) {
                  return $dollar34;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 271, column 1 - line 271, column 21: " + [ v.constructor.name ]);
          })());
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 69, column 3 - line 69, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 128, column 3 - line 128, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["showMaybe"] = showMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.acc)(Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 126, column 3 - line 126, column 30: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 124, column 3 - line 124, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 122, column 3 - line 122, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return function (p) {
              return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)))(p);
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($172) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($172));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($173) {
                  return !elem(dictFoldable)(dictEq)(x)($173);
              };
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return function (p) {
              return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)))(p);
          };
      };
  };
  var and = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["all"] = all;
  exports["and"] = and;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["notElem"] = notElem;
  exports["product"] = product;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];        
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  exports["Bifoldable"] = Bifoldable;
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldl"] = bifoldl;
  exports["bifoldr"] = bifoldr;
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Data$dotFunctor$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable line 85, column 3 - line 85, column 35: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe.Just.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable line 83, column 3 - line 83, column 37: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]()))(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
      this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bisequence"] = bisequence;
  exports["bitraverse"] = bitraverse;
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  }; 
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  }; 
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableTuple;
  }, function () {
      return bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["bitraversableTuple"] = bitraversableTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadState = function (__superclass_Control$dotMonad$dotMonad_0, state) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify"] = modify;
  exports["put"] = put;
  exports["state"] = state;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 37, column 3 - line 37, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 230, column 1 - line 230, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 80, column 3 - line 80, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];        
  var MonadError = function (__superclass_Control$dotMonad$dotMonad_0, catchError, throwError) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                          
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports["MonadError"] = MonadError;
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];        
  var MonadAsk = function (__superclass_Control$dotMonad$dotMonad_0, ask) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.ask = ask;
  };
  var MonadReader = function (__superclass_Control$dotMonad$dotReader$dotClass$dotMonadAsk_0, local) {
      this["__superclass_Control.Monad.Reader.Class.MonadAsk_0"] = __superclass_Control$dotMonad$dotReader$dotClass$dotMonadAsk_0;
      this.local = local;
  };                                                                           
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["MonadAsk"] = MonadAsk;
  exports["MonadReader"] = MonadReader;
  exports["ask"] = ask;
  exports["local"] = local;
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["readSTRef"] = $foreign.readSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendIdentity = new Control_Extend.Extend(function () {
      return functorIdentity;
  }, function (f) {
      return function (m) {
          return f(m);
      };
  });
  var comonadIdentity = new Control_Comonad.Comonad(function () {
      return extendIdentity;
  }, function (v) {
      return v;
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
  exports["extendIdentity"] = extendIdentity;
  exports["comonadIdentity"] = comonadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (__superclass_Control$dotMonad$dotMonad_0, tailRecM) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a, 
                      b: b
                  });
              };
          };
      };
  };
  var tailRecEff = function (f) {
      return function (a) {
          var fromDone = Partial_Unsafe.unsafePartial(function (dictPartial) {
              return function (v) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar16) {
                          return $dollar16;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (v instanceof Done) {
                          return v.value0;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 14 - line 130, column 42: " + [ v.constructor.name ]);
                  })());
              };
          });
          var f$prime = function ($49) {
              return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($49));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Loop) {
                          var v3 = f$prime(v2.value0)();
                          var v4 = v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 119, column 5 - line 124, column 26: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v1))();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["tailRecM2"] = tailRecM2;
  exports["monadRecEff"] = monadRecEff;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };         
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var $52 = f(Data_Unit.unit);
          return $52(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var execStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
          };
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(s))(function (v1) {
                      var $65 = f(v1.value0);
                      return $65(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadErrorStateT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadStateT(dictMonadError["__superclass_Control.Monad.Monad_0"]());
      }, function (v) {
          return function (h) {
              return function (s) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                      var $71 = h(e);
                      return $71(s);
                  });
              };
          };
      }, function (e) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadError["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($101) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(f($101));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["evalStateT"] = evalStateT;
  exports["execStateT"] = execStateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var runState = function (v) {
      return function ($14) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v($14));
      };
  };
  var evalState = function (v) {
      return function (s) {
          var $11 = v(s);
          return $11.value0;
      };
  };
  exports["evalState"] = evalState;
  exports["runState"] = runState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              while (true) {
                var maybe = f(b);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                b = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Partial_Unsafe.unsafePartial(function (dictPartial) {
      return Data_Maybe.fromJust(dictPartial);
  }))(Data_Tuple.fst)(Data_Tuple.snd));
  var fromMaybe = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(function (b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
      });
  };
  exports["Unfoldable"] = Unfoldable;
  exports["fromMaybe"] = fromMaybe;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($128) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($128));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 66, column 3 - line 69, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 62, column 3 - line 65, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });                                                                  
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($129) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($130) {
                      return Control_Apply.lift2(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Function.flip(Cons.create))(acc)(f($130));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($129));
          };
      };
  });                                                                              
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (__copy_source) {
              return function (__copy_memo) {
                  var source = __copy_source;
                  var memo = __copy_memo;
                  tco: while (true) {
                      var $70 = f(source);
                      if ($70 instanceof Data_Maybe.Nothing) {
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if ($70 instanceof Data_Maybe.Just) {
                          var __tco_memo = new Cons($70.value0.value0, memo);
                          source = $70.value0.value1;
                          memo = __tco_memo;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 75, column 24 - line 77, column 54: " + [ $70.constructor.name ]);
                  };
              };
          };
          return go(b)(Nil.value);
      };
  });
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_v2) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var v2 = __copy_v2;
                          tco: while (true) {
                              if (!v2) {
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  v2 = __tco_v2;
                                  continue tco;
                              };
                              return false;
                          };
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      });
  }; 
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 84, column 3 - line 84, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 91, column 3 - line 91, column 19: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
      };
  })(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 253, column 1 - line 253, column 21: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 239, column 1 - line 239, column 19: " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 359, column 1 - line 362, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var snoc = function (xs) {
      return function (x) {
          return reverse(new Data_List_Types.Cons(x, reverse(xs)));
      };
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (v instanceof Data_List_Types.Nil) {
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 650, column 1 - line 654, column 52: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())(Data_List_Types.Nil.value));
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 224, column 1 - line 224, column 19: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var findIndex = function (fn) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Data_List_Types.Cons) {
                      if (fn(v1.value0)) {
                          return new Data_Maybe.Just(v);
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_v = v + 1 | 0;
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 295, column 3 - line 296, column 44: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(0);
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 381, column 1 - line 386, column 28: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var intersectBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v2 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
              })(v1);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match at Data.List line 505, column 1 - line 505, column 15: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["drop"] = drop;
  exports["elemIndex"] = elemIndex;
  exports["filter"] = filter;
  exports["findIndex"] = findIndex;
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["length"] = length;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
  exports["snoc"] = snoc;
  exports["some"] = some;
  exports["tail"] = tail;
  exports["toUnfoldable"] = toUnfoldable;
  exports["uncons"] = uncons;
  exports["unzip"] = unzip;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];        
  var Gen = (function () {
      function Gen(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Gen.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Gen(value0, value1, value2);
              };
          };
      };
      return Gen;
  })();
  var Let = (function () {
      function Let(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Let.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Let(value0, value1, value2);
              };
          };
      };
      return Let;
  })();
  var Guard = (function () {
      function Guard(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Guard.create = function (value0) {
          return function (value1) {
              return new Guard(value0, value1);
          };
      };
      return Guard;
  })();
  var Atom = (function () {
      function Atom(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Atom.create = function (value0) {
          return function (value1) {
              return new Atom(value0, value1);
          };
      };
      return Atom;
  })();
  var List = (function () {
      function List(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      List.create = function (value0) {
          return function (value1) {
              return new List(value0, value1);
          };
      };
      return List;
  })();
  var NTuple = (function () {
      function NTuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NTuple.create = function (value0) {
          return function (value1) {
              return new NTuple(value0, value1);
          };
      };
      return NTuple;
  })();
  var Binary = (function () {
      function Binary(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Binary.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Binary(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Binary;
  })();
  var Unary = (function () {
      function Unary(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Unary.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Unary(value0, value1, value2);
              };
          };
      };
      return Unary;
  })();
  var SectL = (function () {
      function SectL(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SectL.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SectL(value0, value1, value2);
              };
          };
      };
      return SectL;
  })();
  var SectR = (function () {
      function SectR(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SectR.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SectR(value0, value1, value2);
              };
          };
      };
      return SectR;
  })();
  var PrefixOp = (function () {
      function PrefixOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PrefixOp.create = function (value0) {
          return function (value1) {
              return new PrefixOp(value0, value1);
          };
      };
      return PrefixOp;
  })();
  var IfExpr = (function () {
      function IfExpr(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      IfExpr.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new IfExpr(value0, value1, value2, value3);
                  };
              };
          };
      };
      return IfExpr;
  })();
  var ArithmSeq = (function () {
      function ArithmSeq(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ArithmSeq.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ArithmSeq(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ArithmSeq;
  })();
  var LetExpr = (function () {
      function LetExpr(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LetExpr.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LetExpr(value0, value1, value2);
              };
          };
      };
      return LetExpr;
  })();
  var Lambda = (function () {
      function Lambda(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Lambda.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Lambda(value0, value1, value2);
              };
          };
      };
      return Lambda;
  })();
  var App = (function () {
      function App(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      App.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new App(value0, value1, value2);
              };
          };
      };
      return App;
  })();
  var ListComp = (function () {
      function ListComp(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ListComp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ListComp(value0, value1, value2);
              };
          };
      };
      return ListComp;
  })();
  var Composition = (function () {
      function Composition() {

      };
      Composition.value = new Composition();
      return Composition;
  })();
  var Power = (function () {
      function Power() {

      };
      Power.value = new Power();
      return Power;
  })();
  var Mul = (function () {
      function Mul() {

      };
      Mul.value = new Mul();
      return Mul;
  })();
  var Add = (function () {
      function Add() {

      };
      Add.value = new Add();
      return Add;
  })();
  var Sub = (function () {
      function Sub() {

      };
      Sub.value = new Sub();
      return Sub;
  })();
  var Colon = (function () {
      function Colon() {

      };
      Colon.value = new Colon();
      return Colon;
  })();
  var Append = (function () {
      function Append() {

      };
      Append.value = new Append();
      return Append;
  })();
  var Equ = (function () {
      function Equ() {

      };
      Equ.value = new Equ();
      return Equ;
  })();
  var Neq = (function () {
      function Neq() {

      };
      Neq.value = new Neq();
      return Neq;
  })();
  var Lt = (function () {
      function Lt() {

      };
      Lt.value = new Lt();
      return Lt;
  })();
  var Leq = (function () {
      function Leq() {

      };
      Leq.value = new Leq();
      return Leq;
  })();
  var Gt = (function () {
      function Gt() {

      };
      Gt.value = new Gt();
      return Gt;
  })();
  var Geq = (function () {
      function Geq() {

      };
      Geq.value = new Geq();
      return Geq;
  })();
  var And = (function () {
      function And() {

      };
      And.value = new And();
      return And;
  })();
  var Or = (function () {
      function Or() {

      };
      Or.value = new Or();
      return Or;
  })();
  var Dollar = (function () {
      function Dollar() {

      };
      Dollar.value = new Dollar();
      return Dollar;
  })();
  var InfixFunc = (function () {
      function InfixFunc(value0) {
          this.value0 = value0;
      };
      InfixFunc.create = function (value0) {
          return new InfixFunc(value0);
      };
      return InfixFunc;
  })();
  var InfixConstr = (function () {
      function InfixConstr(value0) {
          this.value0 = value0;
      };
      InfixConstr.create = function (value0) {
          return new InfixConstr(value0);
      };
      return InfixConstr;
  })();
  var AInt = (function () {
      function AInt(value0) {
          this.value0 = value0;
      };
      AInt.create = function (value0) {
          return new AInt(value0);
      };
      return AInt;
  })();
  var Bool = (function () {
      function Bool(value0) {
          this.value0 = value0;
      };
      Bool.create = function (value0) {
          return new Bool(value0);
      };
      return Bool;
  })();
  var Char = (function () {
      function Char(value0) {
          this.value0 = value0;
      };
      Char.create = function (value0) {
          return new Char(value0);
      };
      return Char;
  })();
  var Name = (function () {
      function Name(value0) {
          this.value0 = value0;
      };
      Name.create = function (value0) {
          return new Name(value0);
      };
      return Name;
  })();
  var Constr = (function () {
      function Constr(value0) {
          this.value0 = value0;
      };
      Constr.create = function (value0) {
          return new Constr(value0);
      };
      return Constr;
  })();
  var LEFTASSOC = (function () {
      function LEFTASSOC() {

      };
      LEFTASSOC.value = new LEFTASSOC();
      return LEFTASSOC;
  })();
  var RIGHTASSOC = (function () {
      function RIGHTASSOC() {

      };
      RIGHTASSOC.value = new RIGHTASSOC();
      return RIGHTASSOC;
  })();
  var ASSOC = (function () {
      function ASSOC() {

      };
      ASSOC.value = new ASSOC();
      return ASSOC;
  })();
  var PrefixDataConstr = (function () {
      function PrefixDataConstr(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      PrefixDataConstr.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new PrefixDataConstr(value0, value1, value2);
              };
          };
      };
      return PrefixDataConstr;
  })();
  var InfixDataConstr = (function () {
      function InfixDataConstr(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      InfixDataConstr.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new InfixDataConstr(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return InfixDataConstr;
  })();
  var Lit = (function () {
      function Lit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lit.create = function (value0) {
          return function (value1) {
              return new Lit(value0, value1);
          };
      };
      return Lit;
  })();
  var ConsLit = (function () {
      function ConsLit(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ConsLit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ConsLit(value0, value1, value2);
              };
          };
      };
      return ConsLit;
  })();
  var ListLit = (function () {
      function ListLit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ListLit.create = function (value0) {
          return function (value1) {
              return new ListLit(value0, value1);
          };
      };
      return ListLit;
  })();
  var NTupleLit = (function () {
      function NTupleLit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NTupleLit.create = function (value0) {
          return function (value1) {
              return new NTupleLit(value0, value1);
          };
      };
      return NTupleLit;
  })();
  var ConstrLit = (function () {
      function ConstrLit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ConstrLit.create = function (value0) {
          return function (value1) {
              return new ConstrLit(value0, value1);
          };
      };
      return ConstrLit;
  })();
  var Meta = function (x) {
      return x;
  };
  var TypVar = (function () {
      function TypVar(value0) {
          this.value0 = value0;
      };
      TypVar.create = function (value0) {
          return new TypVar(value0);
      };
      return TypVar;
  })();
  var TypCon = (function () {
      function TypCon(value0) {
          this.value0 = value0;
      };
      TypCon.create = function (value0) {
          return new TypCon(value0);
      };
      return TypCon;
  })();
  var TypArr = (function () {
      function TypArr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypArr.create = function (value0) {
          return function (value1) {
              return new TypArr(value0, value1);
          };
      };
      return TypArr;
  })();
  var TList = (function () {
      function TList(value0) {
          this.value0 = value0;
      };
      TList.create = function (value0) {
          return new TList(value0);
      };
      return TList;
  })();
  var TTuple = (function () {
      function TTuple(value0) {
          this.value0 = value0;
      };
      TTuple.create = function (value0) {
          return new TTuple(value0);
      };
      return TTuple;
  })();
  var TTypeCons = (function () {
      function TTypeCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TTypeCons.create = function (value0) {
          return function (value1) {
              return new TTypeCons(value0, value1);
          };
      };
      return TTypeCons;
  })();
  var $$TypeError = (function () {
      function TypeError(value0) {
          this.value0 = value0;
      };
      TypeError.create = function (value0) {
          return new TypeError(value0);
      };
      return TypeError;
  })();
  var UnknownType = (function () {
      function UnknownType() {

      };
      UnknownType.value = new UnknownType();
      return UnknownType;
  })();
  var UnificationFail = (function () {
      function UnificationFail(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnificationFail.create = function (value0) {
          return function (value1) {
              return new UnificationFail(value0, value1);
          };
      };
      return UnificationFail;
  })();
  var InfiniteType = (function () {
      function InfiniteType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      InfiniteType.create = function (value0) {
          return function (value1) {
              return new InfiniteType(value0, value1);
          };
      };
      return InfiniteType;
  })();
  var UnboundVariable = (function () {
      function UnboundVariable(value0) {
          this.value0 = value0;
      };
      UnboundVariable.create = function (value0) {
          return new UnboundVariable(value0);
      };
      return UnboundVariable;
  })();
  var UnknownDataConstructor = (function () {
      function UnknownDataConstructor(value0) {
          this.value0 = value0;
      };
      UnknownDataConstructor.create = function (value0) {
          return new UnknownDataConstructor(value0);
      };
      return UnknownDataConstructor;
  })();
  var UnknownError = (function () {
      function UnknownError(value0) {
          this.value0 = value0;
      };
      UnknownError.create = function (value0) {
          return new UnknownError(value0);
      };
      return UnknownError;
  })();
  var NoInstanceOfEnum = (function () {
      function NoInstanceOfEnum(value0) {
          this.value0 = value0;
      };
      NoInstanceOfEnum.create = function (value0) {
          return new NoInstanceOfEnum(value0);
      };
      return NoInstanceOfEnum;
  })();
  var PatternMismatch = (function () {
      function PatternMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PatternMismatch.create = function (value0) {
          return function (value1) {
              return new PatternMismatch(value0, value1);
          };
      };
      return PatternMismatch;
  })();
  var Def = (function () {
      function Def(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Def.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Def(value0, value1, value2);
              };
          };
      };
      return Def;
  })();
  var IndexedDef = (function () {
      function IndexedDef(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      IndexedDef.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new IndexedDef(value0, value1, value2);
              };
          };
      };
      return IndexedDef;
  })();
  var ADTDef = (function () {
      function ADTDef(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ADTDef.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ADTDef(value0, value1, value2);
              };
          };
      };
      return ADTDef;
  })();
  var traverseQualTree = function (dictMonad) {
      return function (fb) {
          return function (fe) {
              return function (f) {
                  return function (v) {
                      if (v instanceof Gen) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fb(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fe(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Gen(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      if (v instanceof Let) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fb(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fe(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Let(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      if (v instanceof Guard) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fe(v.value1))(function (v2) {
                                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Guard(v1, v2));
                              });
                          });
                      };
                      throw new Error("Failed pattern match at AST line 485, column 1 - line 489, column 22: " + [ fb.constructor.name, fe.constructor.name, f.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
  };
  var traverseTree = function (dictMonad) {
      return function (fb) {
          return function (fo) {
              return function (f) {
                  return function (v) {
                      if (v instanceof Atom) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Atom(v1, v.value1));
                          });
                      };
                      if (v instanceof List) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_List_Types.traversableList)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(traverseTree(dictMonad)(fb)(fo)(f))(v.value1))(function (v2) {
                                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new List(v1, v2));
                              });
                          });
                      };
                      if (v instanceof NTuple) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_List_Types.traversableList)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(traverseTree(dictMonad)(fb)(fo)(f))(v.value1))(function (v2) {
                                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new NTuple(v1, v2));
                              });
                          });
                      };
                      if (v instanceof Binary) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fo(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value2))(function (v3) {
                                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value3))(function (v4) {
                                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Binary(v1, v2, v3, v4));
                                      });
                                  });
                              });
                          });
                      };
                      if (v instanceof Unary) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fo(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Unary(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      if (v instanceof SectL) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fo(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new SectL(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      if (v instanceof SectR) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fo(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new SectR(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      if (v instanceof PrefixOp) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(fo(v.value1))(function (v2) {
                                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new PrefixOp(v1, v2));
                              });
                          });
                      };
                      if (v instanceof IfExpr) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value2))(function (v3) {
                                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value3))(function (v4) {
                                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new IfExpr(v1, v2, v3, v4));
                                      });
                                  });
                              });
                          });
                      };
                      if (v instanceof ArithmSeq) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(traverseTree(dictMonad)(fb)(fo)(f))(v.value2))(function (v3) {
                                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(traverseTree(dictMonad)(fb)(fo)(f))(v.value3))(function (v4) {
                                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new ArithmSeq(v1, v2, v3, v4));
                                      });
                                  });
                              });
                          });
                      };
                      if (v instanceof LetExpr) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_List_Types.traversableList)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function ($1484) {
                                  return Data_Bitraversable.bisequence(Data_Tuple.bitraversableTuple)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(fb)(traverseTree(dictMonad)(fb)(fo)(f))($1484));
                              })(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new LetExpr(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      if (v instanceof Lambda) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_List_Types.traversableList)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(fb)(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Lambda(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      if (v instanceof App) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_List_Types.traversableList)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(traverseTree(dictMonad)(fb)(fo)(f))(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new App(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      if (v instanceof ListComp) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseTree(dictMonad)(fb)(fo)(f)(v.value1))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_List_Types.traversableList)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(traverseQualTree(dictMonad)(fb)(traverseTree(dictMonad)(fb)(fo)(f))(f))(v.value2))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new ListComp(v1, v2, v3));
                                  });
                              });
                          });
                      };
                      throw new Error("Failed pattern match at AST line 506, column 1 - line 508, column 22: " + [ fb.constructor.name, fo.constructor.name, f.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
  };
  var traverseBinding = function (dictMonad) {
      return function (f) {
          return function (v) {
              if (v instanceof Lit) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Lit(v1, v.value1));
                  });
              };
              if (v instanceof ConsLit) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseBinding(dictMonad)(f)(v.value1))(function (v2) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseBinding(dictMonad)(f)(v.value2))(function (v3) {
                              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new ConsLit(v1, v2, v3));
                          });
                      });
                  });
              };
              if (v instanceof ListLit) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_List_Types.traversableList)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(traverseBinding(dictMonad)(f))(v.value1))(function (v2) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new ListLit(v1, v2));
                      });
                  });
              };
              if (v instanceof NTupleLit) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_List_Types.traversableList)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(traverseBinding(dictMonad)(f))(v.value1))(function (v2) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new NTupleLit(v1, v2));
                      });
                  });
              };
              if (v instanceof ConstrLit) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(v.value0))(function (v1) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())((function () {
                          if (v.value1 instanceof PrefixDataConstr) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable["for"](dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_List_Types.traversableList)(v.value1.value2)(traverseBinding(dictMonad)(f)))(function (v2) {
                                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new PrefixDataConstr(v.value1.value0, v.value1.value1, v2));
                              });
                          };
                          if (v.value1 instanceof InfixDataConstr) {
                              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseBinding(dictMonad)(f)(v.value1.value3))(function (v2) {
                                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(traverseBinding(dictMonad)(f)(v.value1.value4))(function (v3) {
                                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new InfixDataConstr(v.value1.value0, v.value1.value1, v.value1.value2, v2, v3));
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at AST line 469, column 14 - line 476, column 56: " + [ v.value1.constructor.name ]);
                      })())(function (v2) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new ConstrLit(v1, v2));
                      });
                  });
              };
              throw new Error("Failed pattern match at AST line 451, column 1 - line 453, column 21: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var showQualTree = function (dictShow) {
      return function (dictShow1) {
          return function (dictShow2) {
              return new Data_Show.Show(function (v) {
                  if (v instanceof Gen) {
                      return "Gen (" + (Data_Show.show(dictShow2)(v.value0) + (" " + (Data_Show.show(dictShow)(v.value1) + (" " + (Data_Show.show(dictShow1)(v.value2) + ")")))));
                  };
                  if (v instanceof Let) {
                      return "Let (" + (Data_Show.show(dictShow2)(v.value0) + (" " + (Data_Show.show(dictShow)(v.value1) + (" " + (Data_Show.show(dictShow1)(v.value2) + ")")))));
                  };
                  if (v instanceof Guard) {
                      return "Guard (" + (Data_Show.show(dictShow2)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
                  };
                  throw new Error("Failed pattern match at AST line 734, column 3 - line 735, column 3: " + [ v.constructor.name ]);
              });
          };
      };
  };
  var showTree = function (dictShow) {
      return function (dictShow1) {
          return function (dictShow2) {
              return function (dictShow3) {
                  return new Data_Show.Show(function (tree) {
                      if (tree instanceof Atom) {
                          return "(Atom " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(dictShow)(tree.value1) + ")")));
                      };
                      if (tree instanceof List) {
                          return "(List " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(Data_List_Types.showList(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3)))(tree.value1) + ")")));
                      };
                      if (tree instanceof NTuple) {
                          return "(NTuple " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(Data_List_Types.showList(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3)))(tree.value1) + ")")));
                      };
                      if (tree instanceof Binary) {
                          return "(Binary " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(dictShow2)(tree.value1) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value2) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value3) + ")")))))));
                      };
                      if (tree instanceof Unary) {
                          return "(Unary " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(dictShow2)(tree.value1) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value2) + ")")))));
                      };
                      if (tree instanceof SectL) {
                          return "(SectL " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value1) + (" " + (Data_Show.show(dictShow2)(tree.value2) + ")")))));
                      };
                      if (tree instanceof SectR) {
                          return "(SectR " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(dictShow2)(tree.value1) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value2) + ")")))));
                      };
                      if (tree instanceof PrefixOp) {
                          return "(PrefixOp " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(dictShow2)(tree.value1) + ")")));
                      };
                      if (tree instanceof IfExpr) {
                          return "(IfExpr " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value1) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value2) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value3) + ")")))))));
                      };
                      if (tree instanceof ArithmSeq) {
                          return "(ArithmSeq " + (Data_Show.show(dictShow3)(tree.value0) + ("(" + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value1) + (")" + (Data_Show.show(Data_Maybe.showMaybe(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3)))(tree.value2) + (".." + (Data_Show.show(Data_Maybe.showMaybe(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3)))(tree.value3) + ")")))))));
                      };
                      if (tree instanceof LetExpr) {
                          return "(LetExpr " + (Data_Show.show(dictShow3)(tree.value0) + (" (" + (Data_Show.show(Data_List_Types.showList(Data_Tuple.showTuple(dictShow1)(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))))(tree.value1) + (") " + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value2) + ")"))))));
                      };
                      if (tree instanceof Lambda) {
                          return "(Lambda " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(Data_List_Types.showList(dictShow1))(tree.value1) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value2) + ")")))));
                      };
                      if (tree instanceof App) {
                          return "(App " + (Data_Show.show(dictShow3)(tree.value0) + (" " + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value1) + (" " + (Data_Show.show(Data_List_Types.showList(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3)))(tree.value2) + ")")))));
                      };
                      if (tree instanceof ListComp) {
                          return "(ListComp " + (Data_Show.show(dictShow3)(tree.value0) + ("(" + (Data_Show.show(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(tree.value1) + (")" + ("(" + (Data_Show.show(Data_List_Types.showList(showQualTree(dictShow1)(showTree(dictShow)(dictShow1)(dictShow2)(dictShow3))(dictShow3)))(tree.value2) + "))"))))));
                      };
                      throw new Error("Failed pattern match at AST line 739, column 15 - line 755, column 1: " + [ tree.constructor.name ]);
                  });
              };
          };
      };
  };
  var showOp = new Data_Show.Show(function (op) {
      if (op instanceof Composition) {
          return "Composition";
      };
      if (op instanceof Power) {
          return "Power";
      };
      if (op instanceof Mul) {
          return "Mul";
      };
      if (op instanceof Add) {
          return "Add";
      };
      if (op instanceof Sub) {
          return "Sub";
      };
      if (op instanceof Colon) {
          return "Colon";
      };
      if (op instanceof Append) {
          return "Append";
      };
      if (op instanceof Equ) {
          return "Equ";
      };
      if (op instanceof Neq) {
          return "Neq";
      };
      if (op instanceof Lt) {
          return "Lt";
      };
      if (op instanceof Leq) {
          return "Leq";
      };
      if (op instanceof Gt) {
          return "Gt";
      };
      if (op instanceof Geq) {
          return "Geq";
      };
      if (op instanceof And) {
          return "And";
      };
      if (op instanceof Or) {
          return "Or";
      };
      if (op instanceof Dollar) {
          return "Dollar";
      };
      if (op instanceof InfixFunc) {
          return "(InfixFunc " + (op.value0 + ")");
      };
      if (op instanceof InfixConstr) {
          return "(InfixConstr " + (op.value0 + ")");
      };
      throw new Error("Failed pattern match at AST line 32, column 13 - line 52, column 1: " + [ op.constructor.name ]);
  });
  var showDataConstr = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof PrefixDataConstr) {
              return v.value0 + (" " + Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_List_Types.functorList)(Data_Show.show(dictShow))(v.value2)));
          };
          if (v instanceof InfixDataConstr && v.value1 instanceof ASSOC) {
              return Data_Show.show(dictShow)(v.value3) + (" " + (v.value0 + (" " + Data_Show.show(dictShow)(v.value4))));
          };
          if (v instanceof InfixDataConstr && v.value1 instanceof RIGHTASSOC) {
              return Data_Show.show(dictShow)(v.value3) + (" " + (v.value0 + (" (" + (Data_Show.show(dictShow)(v.value4) + ")"))));
          };
          if (v instanceof InfixDataConstr && v.value1 instanceof LEFTASSOC) {
              return "(" + (Data_Show.show(dictShow)(v.value3) + (") " + (v.value0 + (" " + Data_Show.show(dictShow)(v.value4)))));
          };
          throw new Error("Failed pattern match at AST line 665, column 3 - line 666, column 48: " + [ v.constructor.name ]);
      });
  };
  var showAtom = new Data_Show.Show(function (atom) {
      if (atom instanceof AInt) {
          return "AInt " + Data_Show.show(Data_Show.showInt)(atom.value0);
      };
      if (atom instanceof Bool) {
          return "Bool " + Data_Show.show(Data_Show.showBoolean)(atom.value0);
      };
      if (atom instanceof Char) {
          return "Char " + Data_Show.show(Data_Show.showString)(atom.value0);
      };
      if (atom instanceof Name) {
          return "Name " + Data_Show.show(Data_Show.showString)(atom.value0);
      };
      if (atom instanceof Constr) {
          return "Constr " + Data_Show.show(Data_Show.showString)(atom.value0);
      };
      throw new Error("Failed pattern match at AST line 726, column 15 - line 731, column 46: " + [ atom.constructor.name ]);
  });
  var showBinding = function (dictShow) {
      return new Data_Show.Show(function (binding) {
          if (binding instanceof Lit) {
              return "(Lit " + (Data_Show.show(dictShow)(binding.value0) + (" " + (Data_Show.show(showAtom)(binding.value1) + ")")));
          };
          if (binding instanceof ConsLit) {
              return "(ConsLit " + (Data_Show.show(dictShow)(binding.value0) + (" " + (Data_Show.show(showBinding(dictShow))(binding.value1) + (" " + (Data_Show.show(showBinding(dictShow))(binding.value2) + ")")))));
          };
          if (binding instanceof ListLit) {
              return "(ListLit " + (Data_Show.show(dictShow)(binding.value0) + (" " + (Data_Show.show(Data_List_Types.showList(showBinding(dictShow)))(binding.value1) + ")")));
          };
          if (binding instanceof NTupleLit) {
              return "(NTupleLit " + (Data_Show.show(dictShow)(binding.value0) + (" " + (Data_Show.show(Data_List_Types.showList(showBinding(dictShow)))(binding.value1) + ")")));
          };
          if (binding instanceof ConstrLit) {
              return "(ConstrLit " + (Data_Show.show(dictShow)(binding.value0) + (" " + (Data_Show.show(showDataConstr(showBinding(dictShow)))(binding.value1) + ")")));
          };
          throw new Error("Failed pattern match at AST line 756, column 18 - line 763, column 1: " + [ binding.constructor.name ]);
      });
  };
  var showTypeError = new Data_Show.Show(function (v) {
      if (v instanceof UnificationFail) {
          return "(UnificationFail " + (Data_Show.show(showType)(v.value0) + (" " + (Data_Show.show(showType)(v.value1) + ")")));
      };
      if (v instanceof InfiniteType) {
          return "(InfiniteType " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showType)(v.value1) + ")")));
      };
      if (v instanceof UnboundVariable) {
          return "(UnboundVariable " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof UnknownDataConstructor) {
          return "(UnknownDataConstructor " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof UnknownError) {
          return "(UnknownError " + (v.value0 + ")");
      };
      if (v instanceof PatternMismatch) {
          return "(PatternMismatch " + (Data_Show.show(showBinding(showMeta))(v.value0) + (" " + (Data_Show.show(showType)(v.value1) + ")")));
      };
      if (v instanceof NoInstanceOfEnum) {
          return "(" + (Data_Show.show(showType)(v.value0) + "is no instance of Enum)");
      };
      throw new Error("Failed pattern match at AST line 782, column 3 - line 783, column 3: " + [ v.constructor.name ]);
  });
  var showType = new Data_Show.Show(function (v) {
      if (v instanceof UnknownType) {
          return "(UnknownType)";
      };
      if (v instanceof TypVar) {
          return "(TypVar  " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypCon) {
          return "(TypCon " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypArr) {
          return "(TypArr " + (Data_Show.show(showType)(v.value0) + (" " + (Data_Show.show(showType)(v.value1) + ")")));
      };
      if (v instanceof TList) {
          return "(TList " + (Data_Show.show(showType)(v.value0) + ")");
      };
      if (v instanceof TTuple) {
          return "(TTuple (" + (Data_Show.show(Data_List_Types.showList(showType))(v.value0) + "))");
      };
      if (v instanceof TTypeCons) {
          return "(TTypeCons " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_List_Types.functorList)(Data_Show.show(showType))(v.value1)) + ")")));
      };
      if (v instanceof $$TypeError) {
          return "(TypeError " + (Data_Show.show(showTypeError)(v.value0) + ")");
      };
      throw new Error("Failed pattern match at AST line 770, column 3 - line 771, column 3: " + [ v.constructor.name ]);
  });
  var showMeta = new Data_Show.Show(function (v) {
      return "Meta { index: " + (Data_Show.show(Data_Show.showInt)(v.index) + (", mtype: " + (Data_Show.show(Data_Maybe.showMaybe(showType))(v.mtype) + "}")));
  });
  var qualTreeMap = function (fb) {
      return function (ft) {
          return function (f) {
              return function (v) {
                  if (v instanceof Gen) {
                      return new Gen(f(v.value0), fb(v.value1), ft(v.value2));
                  };
                  if (v instanceof Let) {
                      return new Let(f(v.value0), fb(v.value1), ft(v.value2));
                  };
                  if (v instanceof Guard) {
                      return new Guard(f(v.value0), ft(v.value1));
                  };
                  throw new Error("Failed pattern match at AST line 244, column 1 - line 244, column 58: " + [ fb.constructor.name, ft.constructor.name, f.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var treeMap = function (fa) {
      return function (fb) {
          return function (fo) {
              return function (f) {
                  return function (v) {
                      if (v instanceof Atom) {
                          return new Atom(f(v.value0), fa(v.value1));
                      };
                      if (v instanceof List) {
                          return new List(f(v.value0), Data_Functor.map(Data_List_Types.functorList)(treeMap(fa)(fb)(fo)(f))(v.value1));
                      };
                      if (v instanceof NTuple) {
                          return new NTuple(f(v.value0), Data_Functor.map(Data_List_Types.functorList)(treeMap(fa)(fb)(fo)(f))(v.value1));
                      };
                      if (v instanceof Binary) {
                          return new Binary(f(v.value0), fo(v.value1), treeMap(fa)(fb)(fo)(f)(v.value2), treeMap(fa)(fb)(fo)(f)(v.value3));
                      };
                      if (v instanceof Unary) {
                          return new Unary(f(v.value0), fo(v.value1), treeMap(fa)(fb)(fo)(f)(v.value2));
                      };
                      if (v instanceof SectL) {
                          return new SectL(f(v.value0), treeMap(fa)(fb)(fo)(f)(v.value1), fo(v.value2));
                      };
                      if (v instanceof SectR) {
                          return new SectR(f(v.value0), fo(v.value1), treeMap(fa)(fb)(fo)(f)(v.value2));
                      };
                      if (v instanceof PrefixOp) {
                          return new PrefixOp(f(v.value0), fo(v.value1));
                      };
                      if (v instanceof IfExpr) {
                          return new IfExpr(f(v.value0), treeMap(fa)(fb)(fo)(f)(v.value1), treeMap(fa)(fb)(fo)(f)(v.value2), treeMap(fa)(fb)(fo)(f)(v.value3));
                      };
                      if (v instanceof ArithmSeq) {
                          return new ArithmSeq(f(v.value0), treeMap(fa)(fb)(fo)(f)(v.value1), Data_Functor.map(Data_Maybe.functorMaybe)(treeMap(fa)(fb)(fo)(f))(v.value2), Data_Functor.map(Data_Maybe.functorMaybe)(treeMap(fa)(fb)(fo)(f))(v.value3));
                      };
                      if (v instanceof LetExpr) {
                          return new LetExpr(f(v.value0), Data_Functor.map(Data_List_Types.functorList)(Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(fb)(treeMap(fa)(fb)(fo)(f)))(v.value1), treeMap(fa)(fb)(fo)(f)(v.value2));
                      };
                      if (v instanceof Lambda) {
                          return new Lambda(f(v.value0), Data_Functor.map(Data_List_Types.functorList)(fb)(v.value1), treeMap(fa)(fb)(fo)(f)(v.value2));
                      };
                      if (v instanceof App) {
                          return new App(f(v.value0), treeMap(fa)(fb)(fo)(f)(v.value1), Data_Functor.map(Data_List_Types.functorList)(treeMap(fa)(fb)(fo)(f))(v.value2));
                      };
                      if (v instanceof ListComp) {
                          return new ListComp(f(v.value0), treeMap(fa)(fb)(fo)(f)(v.value1), Data_Functor.map(Data_List_Types.functorList)(qualTreeMap(fb)(treeMap(fa)(fb)(fo)(f))(f))(v.value2));
                      };
                      throw new Error("Failed pattern match at AST line 255, column 1 - line 255, column 50: " + [ fa.constructor.name, fb.constructor.name, fo.constructor.name, f.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
  };
  var prettyPrintAtom = function (v) {
      if (v instanceof AInt) {
          return Data_Show.show(Data_Show.showInt)(v.value0);
      };
      if (v instanceof Bool) {
          return Data_Show.show(Data_Show.showBoolean)(v.value0);
      };
      if (v instanceof Char) {
          return v.value0;
      };
      if (v instanceof Name) {
          return v.value0;
      };
      if (v instanceof Constr) {
          return v.value0;
      };
      throw new Error("Failed pattern match at AST line 793, column 1 - line 793, column 34: " + [ v.constructor.name ]);
  };
  var prettyPrintBinding = function (v) {
      if (v instanceof Lit) {
          return prettyPrintAtom(v.value1);
      };
      if (v instanceof ConsLit) {
          return "(" + (prettyPrintBinding(v.value1) + (":" + (prettyPrintBinding(v.value2) + ")")));
      };
      if (v instanceof ListLit) {
          return "[" + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List_Types.functorList)(prettyPrintBinding)(v.value1)) + "]");
      };
      if (v instanceof NTupleLit) {
          return "(" + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List_Types.functorList)(prettyPrintBinding)(v.value1)) + ")");
      };
      if (v instanceof ConstrLit && v.value1 instanceof PrefixDataConstr) {
          return "(" + (v.value1.value0 + (" " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_List_Types.functorList)(prettyPrintBinding)(v.value1.value2)) + ")")));
      };
      if (v instanceof ConstrLit && v.value1 instanceof InfixDataConstr) {
          return "(" + (prettyPrintBinding(v.value1.value3) + (" " + (v.value1.value0 + (" " + (prettyPrintBinding(v.value1.value4) + ")")))));
      };
      throw new Error("Failed pattern match at AST line 800, column 1 - line 800, column 55: " + [ v.constructor.name ]);
  };
  var prettyPrintTypeError = function (v) {
      if (v instanceof UnificationFail) {
          return "UnificationFail: Can't unify " + (prettyPrintType(v.value0) + (" with " + prettyPrintType(v.value1)));
      };
      if (v instanceof InfiniteType) {
          return "InfiniteType: cannot construct the infinite type: " + (v.value0 + (" ~ " + prettyPrintType(v.value1)));
      };
      if (v instanceof UnboundVariable) {
          return "UnboundVariable: Not in scope " + v.value0;
      };
      if (v instanceof UnknownDataConstructor) {
          return "UnknownDataConstructor: Not in scope " + v.value0;
      };
      if (v instanceof NoInstanceOfEnum) {
          return "No instance for Enum " + (prettyPrintType(v.value0) + " defined.");
      };
      if (v instanceof PatternMismatch) {
          return "PatternMismatch: The pattern " + (prettyPrintBinding(v.value0) + (" doesn't match with " + prettyPrintType(v.value1)));
      };
      if (v instanceof UnknownError) {
          return "UnknownError: " + v.value0;
      };
      throw new Error("Failed pattern match at AST line 828, column 1 - line 828, column 135: " + [ v.constructor.name ]);
  };
  var prettyPrintType = function (v) {
      if (v instanceof UnknownType) {
          return "?";
      };
      if (v instanceof TypVar) {
          return v.value0;
      };
      if (v instanceof TypCon) {
          return v.value0;
      };
      if (v instanceof $$TypeError) {
          return prettyPrintTypeError(v.value0);
      };
      if (v instanceof TypArr && v.value0 instanceof TypArr) {
          return "(" + (prettyPrintType(v.value0) + (")" + (" -> " + prettyPrintType(v.value1))));
      };
      if (v instanceof TypArr) {
          return prettyPrintType(v.value0) + (" -> " + prettyPrintType(v.value1));
      };
      if (v instanceof TList) {
          return "[" + (prettyPrintType(v.value0) + "]");
      };
      if (v instanceof TTuple) {
          var separateWith = function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_List_Types.Nil) {
                      return new Data_List_Types.Cons("", Data_List_Types.Nil.value);
                  };
                  if (v2 instanceof Data_List_Types.Cons) {
                      return new Data_List_Types.Cons(v2.value0, Data_Functor.map(Data_List_Types.functorList)(Data_Semigroup.append(Data_Semigroup.semigroupString)(v1))(v2.value1));
                  };
                  throw new Error("Failed pattern match at AST line 822, column 5 - line 822, column 34: " + [ v1.constructor.name, v2.constructor.name ]);
              };
          };
          return "(" + (Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(separateWith(", ")(Data_Functor.map(Data_List_Types.functorList)(prettyPrintType)(v.value0))) + ")");
      };
      if (v instanceof TTypeCons) {
          return v.value0 + (" " + Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_List_Types.functorList)(prettyPrintType)(v.value1)));
      };
      throw new Error("Failed pattern match at AST line 812, column 1 - line 813, column 1: " + [ v.constructor.name ]);
  };
  var pPrintOp = function (op) {
      if (op instanceof Composition) {
          return ".";
      };
      if (op instanceof Power) {
          return "^";
      };
      if (op instanceof Mul) {
          return "*";
      };
      if (op instanceof Add) {
          return "+";
      };
      if (op instanceof Sub) {
          return "-";
      };
      if (op instanceof Colon) {
          return ":";
      };
      if (op instanceof Append) {
          return "++";
      };
      if (op instanceof Equ) {
          return "==";
      };
      if (op instanceof Neq) {
          return "/=";
      };
      if (op instanceof Lt) {
          return "<";
      };
      if (op instanceof Leq) {
          return "<=";
      };
      if (op instanceof Gt) {
          return ">";
      };
      if (op instanceof Geq) {
          return ">=";
      };
      if (op instanceof And) {
          return "&&";
      };
      if (op instanceof Or) {
          return "||";
      };
      if (op instanceof Dollar) {
          return "$";
      };
      if (op instanceof InfixFunc) {
          return "`" + (op.value0 + "`");
      };
      if (op instanceof InfixConstr) {
          return op.value0;
      };
      throw new Error("Failed pattern match at AST line 53, column 15 - line 71, column 21: " + [ op.constructor.name ]);
  };
  var makeIndexTuple = function (v) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v1) {
          var $$new = Meta((function () {
              var $772 = {};
              for (var $773 in v) {
                  if (v.hasOwnProperty($773)) {
                      $772[$773] = v[$773];
                  };
              };
              $772.index = v1;
              return $772;
          })());
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(v1 + 1 | 0))(function () {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))($$new);
          });
      });
  };
  var makeIndexOpTuple = function (v) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v1) {
          var $$new = new Data_Tuple.Tuple(v.value0, Meta((function () {
              var $777 = {};
              for (var $778 in v.value1) {
                  if (v.value1.hasOwnProperty($778)) {
                      $777[$778] = v.value1[$778];
                  };
              };
              $777.index = v1;
              return $777;
          })()));
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(v1 + 1 | 0))(function () {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))($$new);
          });
      });
  };
  var makeIndexedDefinition = function (v) {
      return function (beginWith) {
          var toIndexedTree = function (expr1) {
              return traverseTree(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(traverseBinding(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(makeIndexTuple))(makeIndexOpTuple)(makeIndexTuple)(expr1);
          };
          var toIndexedBindings = Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(traverseBinding(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(makeIndexTuple));
          var idxAndBindings = Control_Monad_State.runState(toIndexedBindings(v.value1))(beginWith);
          var idxAndExpr = Control_Monad_State.runState(toIndexedTree(v.value2))(Data_Tuple.snd(idxAndBindings));
          return new Data_Tuple.Tuple(new IndexedDef(v.value0, Data_Tuple.fst(idxAndBindings), Data_Tuple.fst(idxAndExpr)), Data_Tuple.snd(idxAndExpr));
      };
  };
  var makeIndexedTree = function (expr) {
      var makeIndexedTree$prime = function (expr1) {
          return traverseTree(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(traverseBinding(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(makeIndexTuple))(makeIndexOpTuple)(makeIndexTuple)(expr1);
      };
      return Control_Monad_State.evalState(makeIndexedTree$prime(expr))(0);
  };
  var idxMeta = function (i) {
      return {
          index: i, 
          mtype: Data_Maybe.Nothing.value
      };
  };
  var getMetaMType = function (v) {
      return v.mtype;
  };
  var getMetaIndex = function (v) {
      return v.index;
  };
  var opIndex = function ($1485) {
      return getMetaIndex(Data_Tuple.snd($1485));
  }; 
  var functorDataConstr = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof PrefixDataConstr) {
              return new PrefixDataConstr(v.value0, v.value1, Data_Functor.map(Data_List_Types.functorList)(f)(v.value2));
          };
          if (v instanceof InfixDataConstr) {
              return new InfixDataConstr(v.value0, v.value1, v.value2, f(v.value3), f(v.value4));
          };
          throw new Error("Failed pattern match at AST line 661, column 3 - line 661, column 68: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var functorBinding = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Lit) {
              return new Lit(f(v.value0), v.value1);
          };
          if (v instanceof ConsLit) {
              return new ConsLit(f(v.value0), Data_Functor.map(functorBinding)(f)(v.value1), Data_Functor.map(functorBinding)(f)(v.value2));
          };
          if (v instanceof ListLit) {
              return new ListLit(f(v.value0), Data_Functor.map(Data_List_Types.functorList)(Data_Functor.map(functorBinding)(f))(v.value1));
          };
          if (v instanceof NTupleLit) {
              return new NTupleLit(f(v.value0), Data_Functor.map(Data_List_Types.functorList)(Data_Functor.map(functorBinding)(f))(v.value1));
          };
          if (v instanceof ConstrLit) {
              return new ConstrLit(f(v.value0), Data_Functor.map(functorDataConstr)(Data_Functor.map(functorBinding)(f))(v.value1));
          };
          throw new Error("Failed pattern match at AST line 699, column 3 - line 699, column 38: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var freshIdx = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (i1) {
          return i1 + 1 | 0;
      }))(function () {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(v);
      });
  });                                                                                                                         
  var extractFromTree = function (v) {
      if (v instanceof Atom) {
          return v.value0;
      };
      if (v instanceof List) {
          return v.value0;
      };
      if (v instanceof NTuple) {
          return v.value0;
      };
      if (v instanceof Binary) {
          return v.value0;
      };
      if (v instanceof Unary) {
          return v.value0;
      };
      if (v instanceof SectL) {
          return v.value0;
      };
      if (v instanceof SectR) {
          return v.value0;
      };
      if (v instanceof PrefixOp) {
          return v.value0;
      };
      if (v instanceof IfExpr) {
          return v.value0;
      };
      if (v instanceof ArithmSeq) {
          return v.value0;
      };
      if (v instanceof LetExpr) {
          return v.value0;
      };
      if (v instanceof Lambda) {
          return v.value0;
      };
      if (v instanceof App) {
          return v.value0;
      };
      if (v instanceof ListComp) {
          return v.value0;
      };
      throw new Error("Failed pattern match at AST line 309, column 1 - line 309, column 31: " + [ v.constructor.name ]);
  };
  var index = function ($1486) {
      return getMetaIndex(extractFromTree($1486));
  };
  var extractFromBinding = function (v) {
      if (v instanceof Lit) {
          return v.value0;
      };
      if (v instanceof ConsLit) {
          return v.value0;
      };
      if (v instanceof ListLit) {
          return v.value0;
      };
      if (v instanceof NTupleLit) {
          return v.value0;
      };
      if (v instanceof ConstrLit) {
          return v.value0;
      };
      throw new Error("Failed pattern match at AST line 325, column 1 - line 325, column 39: " + [ v.constructor.name ]);
  };
  var eqQualTree = function (dictEq) {
      return function (dictEq1) {
          return function (dictEq2) {
              return new Data_Eq.Eq(function (x) {
                  return function (y) {
                      if (x instanceof Gen && y instanceof Gen) {
                          return Data_Eq.eq(dictEq2)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(dictEq1)(x.value2)(y.value2);
                      };
                      if (x instanceof Let && y instanceof Let) {
                          return Data_Eq.eq(dictEq2)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(dictEq1)(x.value2)(y.value2);
                      };
                      if (x instanceof Guard && y instanceof Guard) {
                          return Data_Eq.eq(dictEq2)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                      };
                      return false;
                  };
              });
          };
      };
  };
  var eqTree = function (dictEq) {
      return function (dictEq1) {
          return function (dictEq2) {
              return function (dictEq3) {
                  return new Data_Eq.Eq(function (x) {
                      return function (y) {
                          if (x instanceof Atom && y instanceof Atom) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
                          };
                          if (x instanceof List && y instanceof List) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(Data_List_Types.eqList(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3)))(x.value1)(y.value1);
                          };
                          if (x instanceof NTuple && y instanceof NTuple) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(Data_List_Types.eqList(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3)))(x.value1)(y.value1);
                          };
                          if (x instanceof Binary && y instanceof Binary) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(dictEq2)(x.value1)(y.value1) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value2)(y.value2) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value3)(y.value3);
                          };
                          if (x instanceof Unary && y instanceof Unary) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(dictEq2)(x.value1)(y.value1) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value2)(y.value2);
                          };
                          if (x instanceof SectL && y instanceof SectL) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value1)(y.value1) && Data_Eq.eq(dictEq2)(x.value2)(y.value2);
                          };
                          if (x instanceof SectR && y instanceof SectR) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(dictEq2)(x.value1)(y.value1) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value2)(y.value2);
                          };
                          if (x instanceof PrefixOp && y instanceof PrefixOp) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(dictEq2)(x.value1)(y.value1);
                          };
                          if (x instanceof IfExpr && y instanceof IfExpr) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value1)(y.value1) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value2)(y.value2) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value3)(y.value3);
                          };
                          if (x instanceof ArithmSeq && y instanceof ArithmSeq) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value1)(y.value1) && Data_Eq.eq(Data_Maybe.eqMaybe(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3)))(x.value2)(y.value2) && Data_Eq.eq(Data_Maybe.eqMaybe(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3)))(x.value3)(y.value3);
                          };
                          if (x instanceof LetExpr && y instanceof LetExpr) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(Data_List_Types.eqList(Data_Tuple.eqTuple(dictEq1)(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))))(x.value1)(y.value1) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value2)(y.value2);
                          };
                          if (x instanceof Lambda && y instanceof Lambda) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(Data_List_Types.eqList(dictEq1))(x.value1)(y.value1) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value2)(y.value2);
                          };
                          if (x instanceof App && y instanceof App) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value1)(y.value1) && Data_Eq.eq(Data_List_Types.eqList(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3)))(x.value2)(y.value2);
                          };
                          if (x instanceof ListComp && y instanceof ListComp) {
                              return Data_Eq.eq(dictEq3)(x.value0)(y.value0) && Data_Eq.eq(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value1)(y.value1) && Data_Eq.eq(Data_List_Types.eqList(eqQualTree(dictEq1)(eqTree(dictEq)(dictEq1)(dictEq2)(dictEq3))(dictEq3)))(x.value2)(y.value2);
                          };
                          return false;
                      };
                  });
              };
          };
      };
  };
  var eqOp = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Composition && y instanceof Composition) {
              return true;
          };
          if (x instanceof Power && y instanceof Power) {
              return true;
          };
          if (x instanceof Mul && y instanceof Mul) {
              return true;
          };
          if (x instanceof Add && y instanceof Add) {
              return true;
          };
          if (x instanceof Sub && y instanceof Sub) {
              return true;
          };
          if (x instanceof Colon && y instanceof Colon) {
              return true;
          };
          if (x instanceof Append && y instanceof Append) {
              return true;
          };
          if (x instanceof Equ && y instanceof Equ) {
              return true;
          };
          if (x instanceof Neq && y instanceof Neq) {
              return true;
          };
          if (x instanceof Lt && y instanceof Lt) {
              return true;
          };
          if (x instanceof Leq && y instanceof Leq) {
              return true;
          };
          if (x instanceof Gt && y instanceof Gt) {
              return true;
          };
          if (x instanceof Geq && y instanceof Geq) {
              return true;
          };
          if (x instanceof And && y instanceof And) {
              return true;
          };
          if (x instanceof Or && y instanceof Or) {
              return true;
          };
          if (x instanceof Dollar && y instanceof Dollar) {
              return true;
          };
          if (x instanceof InfixFunc && y instanceof InfixFunc) {
              return x.value0 === y.value0;
          };
          if (x instanceof InfixConstr && y instanceof InfixConstr) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var eqAtom = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof AInt && y instanceof AInt) {
              return x.value0 === y.value0;
          };
          if (x instanceof Bool && y instanceof Bool) {
              return x.value0 === y.value0;
          };
          if (x instanceof Char && y instanceof Char) {
              return x.value0 === y.value0;
          };
          if (x instanceof Name && y instanceof Name) {
              return x.value0 === y.value0;
          };
          if (x instanceof Constr && y instanceof Constr) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var eqAssociativity = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof LEFTASSOC && y instanceof LEFTASSOC) {
              return true;
          };
          if (x instanceof RIGHTASSOC && y instanceof RIGHTASSOC) {
              return true;
          };
          if (x instanceof ASSOC && y instanceof ASSOC) {
              return true;
          };
          return false;
      };
  });
  var eqDataConstr = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof PrefixDataConstr && y instanceof PrefixDataConstr) {
                  return x.value0 === y.value0 && x.value1 === y.value1 && Data_Eq.eq(Data_List_Types.eqList(dictEq))(x.value2)(y.value2);
              };
              if (x instanceof InfixDataConstr && y instanceof InfixDataConstr) {
                  return x.value0 === y.value0 && Data_Eq.eq(eqAssociativity)(x.value1)(y.value1) && x.value2 === y.value2 && Data_Eq.eq(dictEq)(x.value3)(y.value3) && Data_Eq.eq(dictEq)(x.value4)(y.value4);
              };
              return false;
          };
      });
  };
  var eqBinding = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Lit && y instanceof Lit) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(eqAtom)(x.value1)(y.value1);
              };
              if (x instanceof ConsLit && y instanceof ConsLit) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(eqBinding(dictEq))(x.value1)(y.value1) && Data_Eq.eq(eqBinding(dictEq))(x.value2)(y.value2);
              };
              if (x instanceof ListLit && y instanceof ListLit) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(Data_List_Types.eqList(eqBinding(dictEq)))(x.value1)(y.value1);
              };
              if (x instanceof NTupleLit && y instanceof NTupleLit) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(Data_List_Types.eqList(eqBinding(dictEq)))(x.value1)(y.value1);
              };
              if (x instanceof ConstrLit && y instanceof ConstrLit) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(eqDataConstr(eqBinding(dictEq)))(x.value1)(y.value1);
              };
              return false;
          };
      });
  };
  var eqTypeError = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof UnificationFail && y instanceof UnificationFail) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0) && Data_Eq.eq(eqType)(x.value1)(y.value1);
          };
          if (x instanceof InfiniteType && y instanceof InfiniteType) {
              return x.value0 === y.value0 && Data_Eq.eq(eqType)(x.value1)(y.value1);
          };
          if (x instanceof UnboundVariable && y instanceof UnboundVariable) {
              return x.value0 === y.value0;
          };
          if (x instanceof UnknownDataConstructor && y instanceof UnknownDataConstructor) {
              return x.value0 === y.value0;
          };
          if (x instanceof UnknownError && y instanceof UnknownError) {
              return x.value0 === y.value0;
          };
          if (x instanceof NoInstanceOfEnum && y instanceof NoInstanceOfEnum) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0);
          };
          if (x instanceof PatternMismatch && y instanceof PatternMismatch) {
              return Data_Eq.eq(eqBinding(eqMeta))(x.value0)(y.value0) && Data_Eq.eq(eqType)(x.value1)(y.value1);
          };
          return false;
      };
  });
  var eqType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof TypVar && y instanceof TypVar) {
              return x.value0 === y.value0;
          };
          if (x instanceof TypCon && y instanceof TypCon) {
              return x.value0 === y.value0;
          };
          if (x instanceof TypArr && y instanceof TypArr) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0) && Data_Eq.eq(eqType)(x.value1)(y.value1);
          };
          if (x instanceof TList && y instanceof TList) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0);
          };
          if (x instanceof TTuple && y instanceof TTuple) {
              return Data_Eq.eq(Data_List_Types.eqList(eqType))(x.value0)(y.value0);
          };
          if (x instanceof TTypeCons && y instanceof TTypeCons) {
              return x.value0 === y.value0 && Data_Eq.eq(Data_List_Types.eqList(eqType))(x.value1)(y.value1);
          };
          if (x instanceof $$TypeError && y instanceof $$TypeError) {
              return Data_Eq.eq(eqTypeError)(x.value0)(y.value0);
          };
          if (x instanceof UnknownType && y instanceof UnknownType) {
              return true;
          };
          return false;
      };
  });
  var eqMeta = new Data_Eq.Eq(function (a) {
      return function (b) {
          return getMetaIndex(a) === getMetaIndex(b) && Data_Eq.eq(Data_Maybe.eqMaybe(eqType))(getMetaMType(a))(getMetaMType(b));
      };
  });
  var eq$primeOp = function (v) {
      return function (v1) {
          return Data_Eq.eq(eqOp)(v.value0)(v1.value0);
      };
  };
  var eq$primeDataConstr = function (v) {
      return function (v1) {
          if (v instanceof PrefixDataConstr && v1 instanceof PrefixDataConstr) {
              return v.value0 === v1.value0 && (v.value1 === v1.value1 && Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$primeBinding)(v.value2)(v1.value2)));
          };
          if (v instanceof InfixDataConstr && v1 instanceof InfixDataConstr) {
              return v.value0 === v1.value0 && (Data_Eq.eq(eqAssociativity)(v.value1)(v1.value1) && (v.value2 === v1.value2 && (eq$primeBinding(v.value3)(v1.value3) && eq$primeBinding(v.value4)(v1.value4))));
          };
          return false;
      };
  };
  var eq$primeBinding = function (v) {
      return function (v1) {
          if (v instanceof Lit && v1 instanceof Lit) {
              return Data_Eq.eq(eqAtom)(v.value1)(v1.value1);
          };
          if (v instanceof ConsLit && v1 instanceof ConsLit) {
              return eq$primeBinding(v.value1)(v1.value1) && eq$primeBinding(v.value2)(v1.value2);
          };
          if (v instanceof ListLit && v1 instanceof ListLit) {
              return Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$primeBinding)(v.value1)(v1.value1));
          };
          if (v instanceof NTupleLit && v1 instanceof NTupleLit) {
              return Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$primeBinding)(v.value1)(v1.value1));
          };
          if (v instanceof ConstrLit && v1 instanceof ConstrLit) {
              return eq$primeDataConstr(v.value1)(v1.value1);
          };
          return false;
      };
  };
  var eq$primeQualTree = function (v) {
      return function (v1) {
          if (v instanceof Gen && v1 instanceof Gen) {
              return eq$primeBinding(v.value1)(v1.value1) && eq$prime(v.value2)(v1.value2);
          };
          if (v instanceof Let && v1 instanceof Let) {
              return eq$primeBinding(v.value1)(v1.value1) && eq$prime(v.value2)(v1.value2);
          };
          if (v instanceof Guard && v1 instanceof Guard) {
              return eq$prime(v.value1)(v1.value1);
          };
          return false;
      };
  };
  var eq$prime = function (v) {
      return function (v1) {
          if (v instanceof Atom && v1 instanceof Atom) {
              return Data_Eq.eq(eqAtom)(v.value1)(v1.value1);
          };
          if (v instanceof List && v1 instanceof List) {
              return Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$prime)(v.value1)(v1.value1));
          };
          if (v instanceof NTuple && v1 instanceof NTuple) {
              return Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$prime)(v.value1)(v1.value1));
          };
          if (v instanceof Binary && v1 instanceof Binary) {
              return eq$primeOp(v.value1)(v1.value1) && (eq$prime(v.value2)(v1.value2) && eq$prime(v.value3)(v1.value3));
          };
          if (v instanceof Unary && v1 instanceof Unary) {
              return eq$primeOp(v.value1)(v1.value1) && eq$prime(v.value2)(v1.value2);
          };
          if (v instanceof SectL && v1 instanceof SectL) {
              return eq$primeOp(v.value2)(v1.value2) && eq$prime(v.value1)(v1.value1);
          };
          if (v instanceof SectR && v1 instanceof SectR) {
              return eq$primeOp(v.value1)(v1.value1) && eq$prime(v.value2)(v1.value2);
          };
          if (v instanceof PrefixOp && v1 instanceof PrefixOp) {
              return eq$primeOp(v.value1)(v1.value1);
          };
          if (v instanceof IfExpr && v1 instanceof IfExpr) {
              return eq$prime(v.value1)(v1.value1) && (eq$prime(v.value2)(v1.value2) && eq$prime(v.value3)(v1.value3));
          };
          if (v instanceof ArithmSeq && v1 instanceof ArithmSeq) {
              var eq$prime$prime = function (v2) {
                  return function (v3) {
                      if (v2 instanceof Data_Maybe.Nothing && v3 instanceof Data_Maybe.Nothing) {
                          return true;
                      };
                      if (v2 instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Just) {
                          return eq$prime(v2.value0)(v3.value0);
                      };
                      return false;
                  };
              };
              return eq$prime(v.value1)(v1.value1) && (eq$prime$prime(v.value2)(v1.value2) && eq$prime$prime(v.value3)(v1.value3));
          };
          if (v instanceof LetExpr && v1 instanceof LetExpr) {
              var eq$prime$prime = function (v2) {
                  return function (v3) {
                      return eq$primeBinding(v2.value0)(v3.value0) && eq$prime(v2.value1)(v3.value1);
                  };
              };
              return Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$prime$prime)(v.value1)(v1.value1)) && eq$prime(v.value2)(v1.value2);
          };
          if (v instanceof Lambda && v1 instanceof Lambda) {
              return Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$primeBinding)(v.value1)(v1.value1)) && eq$prime(v.value2)(v1.value2);
          };
          if (v instanceof App && v1 instanceof App) {
              return eq$prime(v.value1)(v1.value1) && Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$prime)(v.value2)(v1.value2));
          };
          if (v instanceof ListComp && v1 instanceof ListComp) {
              return eq$prime(v.value1)(v1.value1) && Data_Foldable.and(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_List.zipWith(eq$primeQualTree)(v.value2)(v1.value2));
          };
          return false;
      };
  };
  var emptyMeta$prime = {
      index: -1, 
      mtype: Data_Maybe.Nothing.value
  };
  var emptyMeta = emptyMeta$prime;
  var definitionIndex = function (v) {
      return index(v.value2);
  };
  var compileDataConstr = function (t) {
      return function (v) {
          if (v instanceof PrefixDataConstr) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(freshIdx)(function (v1) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Def(v.value0, Data_List_Types.Nil.value, new Atom({
                      index: v1, 
                      mtype: new Data_Maybe.Just(Data_Foldable.foldr(Data_List_Types.foldableList)(TypArr.create)(t)(v.value2))
                  }, new Constr(v.value0))));
              });
          };
          if (v instanceof InfixDataConstr) {
              var typ = new TypArr(v.value3, new TypArr(v.value4, t));
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(freshIdx)(function (v1) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(freshIdx)(function (v2) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Def(v.value0, Data_List_Types.Nil.value, new PrefixOp((function () {
                          var $1469 = {};
                          for (var $1470 in emptyMeta$prime) {
                              if (emptyMeta$prime.hasOwnProperty($1470)) {
                                  $1469[$1470] = emptyMeta$prime[$1470];
                              };
                          };
                          $1469.index = v1;
                          $1469.mtype = new Data_Maybe.Just(typ);
                          return $1469;
                      })(), new Data_Tuple.Tuple(new InfixConstr(v.value0), (function () {
                          var $1472 = {};
                          for (var $1473 in emptyMeta$prime) {
                              if (emptyMeta$prime.hasOwnProperty($1473)) {
                                  $1472[$1473] = emptyMeta$prime[$1473];
                              };
                          };
                          $1472.index = v2;
                          $1472.mtype = new Data_Maybe.Just(typ);
                          return $1472;
                      })()))));
                  });
              });
          };
          throw new Error("Failed pattern match at AST line 650, column 1 - line 652, column 96: " + [ t.constructor.name, v.constructor.name ]);
      };
  };
  var compileADTDef = function (v) {
      return Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(compileDataConstr(new TTypeCons(v.value0, Data_Functor.map(Data_List_Types.functorList)(TypVar.create)(v.value1))))(v.value2);
  };
  var bindingIndex = function ($1487) {
      return getMetaIndex(extractFromBinding($1487));
  };
  var binary = function (meta) {
      return function (metaOp) {
          return function (op) {
              return function (left) {
                  return function (right) {
                      return new Binary(meta, new Data_Tuple.Tuple(op, metaOp), left, right);
                  };
              };
          };
      };
  };
  exports["ADTDef"] = ADTDef;
  exports["LEFTASSOC"] = LEFTASSOC;
  exports["RIGHTASSOC"] = RIGHTASSOC;
  exports["ASSOC"] = ASSOC;
  exports["AInt"] = AInt;
  exports["Bool"] = Bool;
  exports["Char"] = Char;
  exports["Name"] = Name;
  exports["Constr"] = Constr;
  exports["Lit"] = Lit;
  exports["ConsLit"] = ConsLit;
  exports["ListLit"] = ListLit;
  exports["NTupleLit"] = NTupleLit;
  exports["ConstrLit"] = ConstrLit;
  exports["PrefixDataConstr"] = PrefixDataConstr;
  exports["InfixDataConstr"] = InfixDataConstr;
  exports["Def"] = Def;
  exports["IndexedDef"] = IndexedDef;
  exports["Meta"] = Meta;
  exports["Composition"] = Composition;
  exports["Power"] = Power;
  exports["Mul"] = Mul;
  exports["Add"] = Add;
  exports["Sub"] = Sub;
  exports["Colon"] = Colon;
  exports["Append"] = Append;
  exports["Equ"] = Equ;
  exports["Neq"] = Neq;
  exports["Lt"] = Lt;
  exports["Leq"] = Leq;
  exports["Gt"] = Gt;
  exports["Geq"] = Geq;
  exports["And"] = And;
  exports["Or"] = Or;
  exports["Dollar"] = Dollar;
  exports["InfixFunc"] = InfixFunc;
  exports["InfixConstr"] = InfixConstr;
  exports["Gen"] = Gen;
  exports["Let"] = Let;
  exports["Guard"] = Guard;
  exports["Atom"] = Atom;
  exports["List"] = List;
  exports["NTuple"] = NTuple;
  exports["Binary"] = Binary;
  exports["Unary"] = Unary;
  exports["SectL"] = SectL;
  exports["SectR"] = SectR;
  exports["PrefixOp"] = PrefixOp;
  exports["IfExpr"] = IfExpr;
  exports["ArithmSeq"] = ArithmSeq;
  exports["LetExpr"] = LetExpr;
  exports["Lambda"] = Lambda;
  exports["App"] = App;
  exports["ListComp"] = ListComp;
  exports["TypVar"] = TypVar;
  exports["TypCon"] = TypCon;
  exports["TypArr"] = TypArr;
  exports["TList"] = TList;
  exports["TTuple"] = TTuple;
  exports["TTypeCons"] = TTypeCons;
  exports["TypeError"] = $$TypeError;
  exports["UnknownType"] = UnknownType;
  exports["UnificationFail"] = UnificationFail;
  exports["InfiniteType"] = InfiniteType;
  exports["UnboundVariable"] = UnboundVariable;
  exports["UnknownDataConstructor"] = UnknownDataConstructor;
  exports["UnknownError"] = UnknownError;
  exports["NoInstanceOfEnum"] = NoInstanceOfEnum;
  exports["PatternMismatch"] = PatternMismatch;
  exports["binary"] = binary;
  exports["bindingIndex"] = bindingIndex;
  exports["compileADTDef"] = compileADTDef;
  exports["compileDataConstr"] = compileDataConstr;
  exports["definitionIndex"] = definitionIndex;
  exports["emptyMeta"] = emptyMeta;
  exports["emptyMeta'"] = emptyMeta$prime;
  exports["eq'"] = eq$prime;
  exports["extractFromBinding"] = extractFromBinding;
  exports["extractFromTree"] = extractFromTree;
  exports["freshIdx"] = freshIdx;
  exports["getMetaIndex"] = getMetaIndex;
  exports["getMetaMType"] = getMetaMType;
  exports["idxMeta"] = idxMeta;
  exports["index"] = index;
  exports["makeIndexOpTuple"] = makeIndexOpTuple;
  exports["makeIndexTuple"] = makeIndexTuple;
  exports["makeIndexedDefinition"] = makeIndexedDefinition;
  exports["makeIndexedTree"] = makeIndexedTree;
  exports["opIndex"] = opIndex;
  exports["pPrintOp"] = pPrintOp;
  exports["prettyPrintAtom"] = prettyPrintAtom;
  exports["prettyPrintBinding"] = prettyPrintBinding;
  exports["prettyPrintType"] = prettyPrintType;
  exports["prettyPrintTypeError"] = prettyPrintTypeError;
  exports["qualTreeMap"] = qualTreeMap;
  exports["traverseBinding"] = traverseBinding;
  exports["traverseQualTree"] = traverseQualTree;
  exports["traverseTree"] = traverseTree;
  exports["treeMap"] = treeMap;
  exports["eqOp"] = eqOp;
  exports["showOp"] = showOp;
  exports["eqAtom"] = eqAtom;
  exports["eqTree"] = eqTree;
  exports["showMeta"] = showMeta;
  exports["eqMeta"] = eqMeta;
  exports["eqAssociativity"] = eqAssociativity;
  exports["functorDataConstr"] = functorDataConstr;
  exports["showDataConstr"] = showDataConstr;
  exports["eqDataConstr"] = eqDataConstr;
  exports["eqQualTree"] = eqQualTree;
  exports["eqBinding"] = eqBinding;
  exports["functorBinding"] = functorBinding;
  exports["showAtom"] = showAtom;
  exports["showQualTree"] = showQualTree;
  exports["showTree"] = showTree;
  exports["showBinding"] = showBinding;
  exports["showType"] = showType;
  exports["eqType"] = eqType;
  exports["showTypeError"] = showTypeError;
  exports["eqTypeError"] = eqTypeError;
})(PS["AST"] = PS["AST"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.select = function(selector) {
      return function() {
          return jQuery(selector);
      };
  };

  exports.create = function(html) {
      return function() {
          return jQuery(html);
      };
  };

  exports.toggleClass = function(cls) {
      return function(ob) {
          return function() {
              ob.toggleClass(cls);
          };
      };
  };

  exports.setClass = function(cls) {
      return function(flag) {
          return function(ob) {
              return function() {
                  ob.toggleClass(cls, flag);
              };
          };
      };
  };

  exports.append = function(ob1) {
      return function(ob) {
          return function() {
              ob.append(ob1);
          };
      };
  };

  exports.clear = function(ob) {
      return function() {
          ob.empty();
      };
  };

  exports.setText = function(text) {
      return function(ob) {
          return function() {
              ob.text(text);
          };
      };
  };

  exports.on = function(evt) {
      return function(act) {
          return function(ob) {
              return function() {
                  ob.on(evt, function(e) {
                      act(e)(jQuery(this))();
                  });
              };
          };
      };
  };

  exports.stopImmediatePropagation = function(e) {
      return function() {
          e.stopImmediatePropagation();
      };
  };
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.JQuery"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foreign = PS["Data.Foreign"];
  var DOM = PS["DOM"];        
  var removeClass = function (cls) {
      return $foreign.setClass(cls)(false);
  };                                      
  var addClass = function (cls) {
      return $foreign.setClass(cls)(true);
  };
  exports["addClass"] = addClass;
  exports["removeClass"] = removeClass;
  exports["append"] = $foreign.append;
  exports["clear"] = $foreign.clear;
  exports["create"] = $foreign.create;
  exports["on"] = $foreign.on;
  exports["select"] = $foreign.select;
  exports["setText"] = $foreign.setText;
  exports["stopImmediatePropagation"] = $foreign.stopImmediatePropagation;
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function ($88) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($88));
              })(function (a) {
                  var $56 = k(a);
                  return $56;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($89) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($89)));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function (a) {
                  var $60 = k(a);
                  return $60;
              })(function ($91) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($91));
              }));
          };
      }, function ($92) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($92)));
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState["__superclass_Control.Monad.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                                 
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var RWST = function (x) {
      return x;
  };       
  var monadTransRWST = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return function (v) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (a) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      });
                  };
              };
          };
      });
  }; 
  var functorRWST = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (r) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                      })(v(r)(s));
                  };
              };
          };
      });
  };
  var evalRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v1.value1, v1.value2));
                  });
              };
          };
      };
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Apply.Apply(function () {
              return functorRWST((dictBind["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
          }, function (v) {
              return function (v1) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                              return Data_Functor.mapFlipped((dictBind["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(v1(r)(v2.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v2.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Bind.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (v) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                              var $103 = f(v1.value1);
                              return Data_Functor.mapFlipped((dictBind["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())($103(r)(v1.value0))(function (v2) {
                                  return new RWSResult(v2.value0, v2.value1, Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v1.value2)(v2.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Applicative.Applicative(function () {
              return applyRWST(dictMonad["__superclass_Control.Bind.Bind_1"]())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad["__superclass_Control.Bind.Bind_1"]())(dictMonoid);
          });
      };
  };
  var monadAskRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return m(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadErrorRWST = function (dictMonadError) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadRWST(dictMonadError["__superclass_Control.Monad.Monad_0"]())(dictMonoid);
          }, function (m) {
              return function (h) {
                  return RWST(function (r) {
                      return function (s) {
                          return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
                              var $114 = h(e);
                              return $114(r)(s);
                          });
                      };
                  });
              };
          }, function (e) {
              return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadError["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var $129 = f(s);
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new RWSResult($129.value1, $129.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  exports["RWSResult"] = RWSResult;
  exports["RWST"] = RWST;
  exports["evalRWST"] = evalRWST;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadTransRWST"] = monadTransRWST;
  exports["monadAskRWST"] = monadAskRWST;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadErrorRWST"] = monadErrorRWST;
})(PS["Control.Monad.RWS.Trans"] = PS["Control.Monad.RWS.Trans"] || {});
(function(exports) {
    "use strict";

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      while (list !== emptyList) {
        result[count++] = list.head;
        list = list.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  exports["pushSTArray"] = pushSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["runSTArray"] = $foreign.runSTArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];      
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  }; 
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(Partial_Unsafe.unsafePartial(function (dictPartial) {
                      return unsafeIndex(dictPartial)(xs)(i);
                  }), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array line 133, column 1 - line 138, column 26: " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())([  ]));
          };
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["index"] = index;
  exports["many"] = many;
  exports["modifyAt"] = modifyAt;
  exports["some"] = some;
  exports["toUnfoldable"] = toUnfoldable;
  exports["unsafeIndex"] = unsafeIndex;
  exports["updateAt"] = updateAt;
  exports["cons"] = $foreign.cons;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["snoc"] = $foreign.snoc;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toCharCode"] = $foreign.toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Functor = PS["Data.Functor"];        
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_LM = (function () {
      function NUMCAT_LM() {

      };
      NUMCAT_LM.value = new NUMCAT_LM();
      return NUMCAT_LM;
  })();
  var NUMCAT_LO = (function () {
      function NUMCAT_LO() {

      };
      NUMCAT_LO.value = new NUMCAT_LO();
      return NUMCAT_LO;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_MC = (function () {
      function NUMCAT_MC() {

      };
      NUMCAT_MC.value = new NUMCAT_MC();
      return NUMCAT_MC;
  })();
  var NUMCAT_ME = (function () {
      function NUMCAT_ME() {

      };
      NUMCAT_ME.value = new NUMCAT_ME();
      return NUMCAT_ME;
  })();
  var NUMCAT_ND = (function () {
      function NUMCAT_ND() {

      };
      NUMCAT_ND.value = new NUMCAT_ND();
      return NUMCAT_ND;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_NO = (function () {
      function NUMCAT_NO() {

      };
      NUMCAT_NO.value = new NUMCAT_NO();
      return NUMCAT_NO;
  })();
  var NUMCAT_PC = (function () {
      function NUMCAT_PC() {

      };
      NUMCAT_PC.value = new NUMCAT_PC();
      return NUMCAT_PC;
  })();
  var NUMCAT_PD = (function () {
      function NUMCAT_PD() {

      };
      NUMCAT_PD.value = new NUMCAT_PD();
      return NUMCAT_PD;
  })();
  var NUMCAT_PS = (function () {
      function NUMCAT_PS() {

      };
      NUMCAT_PS.value = new NUMCAT_PS();
      return NUMCAT_PS;
  })();
  var NUMCAT_PE = (function () {
      function NUMCAT_PE() {

      };
      NUMCAT_PE.value = new NUMCAT_PE();
      return NUMCAT_PE;
  })();
  var NUMCAT_PI = (function () {
      function NUMCAT_PI() {

      };
      NUMCAT_PI.value = new NUMCAT_PI();
      return NUMCAT_PI;
  })();
  var NUMCAT_PF = (function () {
      function NUMCAT_PF() {

      };
      NUMCAT_PF.value = new NUMCAT_PF();
      return NUMCAT_PF;
  })();
  var NUMCAT_PO = (function () {
      function NUMCAT_PO() {

      };
      NUMCAT_PO.value = new NUMCAT_PO();
      return NUMCAT_PO;
  })();
  var NUMCAT_SM = (function () {
      function NUMCAT_SM() {

      };
      NUMCAT_SM.value = new NUMCAT_SM();
      return NUMCAT_SM;
  })();
  var NUMCAT_SC = (function () {
      function NUMCAT_SC() {

      };
      NUMCAT_SC.value = new NUMCAT_SC();
      return NUMCAT_SC;
  })();
  var NUMCAT_SK = (function () {
      function NUMCAT_SK() {

      };
      NUMCAT_SK.value = new NUMCAT_SK();
      return NUMCAT_SK;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_ZS = (function () {
      function NUMCAT_ZS() {

      };
      NUMCAT_ZS.value = new NUMCAT_ZS();
      return NUMCAT_ZS;
  })();
  var NUMCAT_ZL = (function () {
      function NUMCAT_ZL() {

      };
      NUMCAT_ZL.value = new NUMCAT_ZL();
      return NUMCAT_ZL;
  })();
  var NUMCAT_ZP = (function () {
      function NUMCAT_ZP() {

      };
      NUMCAT_ZP.value = new NUMCAT_ZP();
      return NUMCAT_ZP;
  })();
  var NUMCAT_CC = (function () {
      function NUMCAT_CC() {

      };
      NUMCAT_CC.value = new NUMCAT_CC();
      return NUMCAT_CC;
  })();
  var NUMCAT_CF = (function () {
      function NUMCAT_CF() {

      };
      NUMCAT_CF.value = new NUMCAT_CF();
      return NUMCAT_CF;
  })();
  var NUMCAT_CS = (function () {
      function NUMCAT_CS() {

      };
      NUMCAT_CS.value = new NUMCAT_CS();
      return NUMCAT_CS;
  })();
  var NUMCAT_CO = (function () {
      function NUMCAT_CO() {

      };
      NUMCAT_CO.value = new NUMCAT_CO();
      return NUMCAT_CO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();              
  var numLat1Blocks = 63;  
  var numBlocks = 2783;    
  var gencatZS = 2;
  var rule1 = {
      category: gencatZS, 
      unicodeCat: NUMCAT_ZS.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };  
  var gencatZP = 67108864;
  var rule140 = {
      category: gencatZP, 
      unicodeCat: NUMCAT_ZP.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatZL = 33554432;
  var rule139 = {
      category: gencatZL, 
      unicodeCat: NUMCAT_ZL.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatSO = 8192;
  var rule13 = {
      category: gencatSO, 
      unicodeCat: NUMCAT_SO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule148 = {
      category: gencatSO, 
      unicodeCat: NUMCAT_SO.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 26, 
      titledist: 0
  };
  var rule149 = {
      category: gencatSO, 
      unicodeCat: NUMCAT_SO.value, 
      possible: 1, 
      updist: -26, 
      lowdist: 0, 
      titledist: -26
  };
  var gencatSM = 64;
  var rule6 = {
      category: gencatSM, 
      unicodeCat: NUMCAT_SM.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatSK = 1024;
  var rule10 = {
      category: gencatSK, 
      unicodeCat: NUMCAT_SK.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatSC = 8;
  var rule3 = {
      category: gencatSC, 
      unicodeCat: NUMCAT_SC.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPS = 16;
  var rule4 = {
      category: gencatPS, 
      unicodeCat: NUMCAT_PS.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPO = 4;
  var rule2 = {
      category: gencatPO, 
      unicodeCat: NUMCAT_PO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPI = 16384;
  var rule15 = {
      category: gencatPI, 
      unicodeCat: NUMCAT_PI.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPF = 131072;
  var rule19 = {
      category: gencatPF, 
      unicodeCat: NUMCAT_PF.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPE = 32;
  var rule5 = {
      category: gencatPE, 
      unicodeCat: NUMCAT_PE.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPD = 128;
  var rule7 = {
      category: gencatPD, 
      unicodeCat: NUMCAT_PD.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatPC = 2048;
  var rule11 = {
      category: gencatPC, 
      unicodeCat: NUMCAT_PC.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatNO = 65536;
  var rule17 = {
      category: gencatNO, 
      unicodeCat: NUMCAT_NO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatNL = 16777216;
  var rule116 = {
      category: gencatNL, 
      unicodeCat: NUMCAT_NL.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule146 = {
      category: gencatNL, 
      unicodeCat: NUMCAT_NL.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 16, 
      titledist: 0
  };
  var rule147 = {
      category: gencatNL, 
      unicodeCat: NUMCAT_NL.value, 
      possible: 1, 
      updist: -16, 
      lowdist: 0, 
      titledist: -16
  };
  var gencatND = 256;
  var rule8 = {
      category: gencatND, 
      unicodeCat: NUMCAT_ND.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatMN = 2097152;
  var rule84 = {
      category: gencatMN, 
      unicodeCat: NUMCAT_MN.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule85 = {
      category: gencatMN, 
      unicodeCat: NUMCAT_MN.value, 
      possible: 1, 
      updist: 84, 
      lowdist: 0, 
      titledist: 84
  };
  var gencatME = 4194304;
  var rule109 = {
      category: gencatME, 
      unicodeCat: NUMCAT_ME.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatMC = 8388608;
  var rule114 = {
      category: gencatMC, 
      unicodeCat: NUMCAT_MC.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU, 
      unicodeCat: NUMCAT_CN.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule105 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -60, 
      titledist: 0
  };
  var rule107 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -7, 
      titledist: 0
  };
  var rule108 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 80, 
      titledist: 0
  };
  var rule110 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 15, 
      titledist: 0
  };
  var rule112 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 48, 
      titledist: 0
  };
  var rule115 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 7264, 
      titledist: 0
  };
  var rule120 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -7615, 
      titledist: 0
  };
  var rule122 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -8, 
      titledist: 0
  };
  var rule131 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -74, 
      titledist: 0
  };
  var rule134 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -86, 
      titledist: 0
  };
  var rule135 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -100, 
      titledist: 0
  };
  var rule136 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -112, 
      titledist: 0
  };
  var rule137 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -128, 
      titledist: 0
  };
  var rule138 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -126, 
      titledist: 0
  };
  var rule141 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -7517, 
      titledist: 0
  };
  var rule142 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -8383, 
      titledist: 0
  };
  var rule143 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -8262, 
      titledist: 0
  };
  var rule144 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 28, 
      titledist: 0
  };
  var rule150 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10743, 
      titledist: 0
  };
  var rule151 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -3814, 
      titledist: 0
  };
  var rule152 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10727, 
      titledist: 0
  };
  var rule155 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10780, 
      titledist: 0
  };
  var rule156 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10749, 
      titledist: 0
  };
  var rule157 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10783, 
      titledist: 0
  };
  var rule158 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10782, 
      titledist: 0
  };
  var rule159 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -10815, 
      titledist: 0
  };
  var rule161 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -35332, 
      titledist: 0
  };
  var rule162 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -42280, 
      titledist: 0
  };
  var rule165 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 40, 
      titledist: 0
  };
  var rule21 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 1, 
      titledist: 0
  };
  var rule23 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -199, 
      titledist: 0
  };
  var rule25 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -121, 
      titledist: 0
  };
  var rule28 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 210, 
      titledist: 0
  };
  var rule29 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 206, 
      titledist: 0
  };
  var rule30 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 205, 
      titledist: 0
  };
  var rule31 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 79, 
      titledist: 0
  };
  var rule32 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 202, 
      titledist: 0
  };
  var rule33 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 203, 
      titledist: 0
  };
  var rule34 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 207, 
      titledist: 0
  };
  var rule36 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 211, 
      titledist: 0
  };
  var rule37 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 209, 
      titledist: 0
  };
  var rule39 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 213, 
      titledist: 0
  };
  var rule41 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 214, 
      titledist: 0
  };
  var rule42 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 218, 
      titledist: 0
  };
  var rule43 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 217, 
      titledist: 0
  };
  var rule44 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 219, 
      titledist: 0
  };
  var rule47 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 2, 
      titledist: 1
  };
  var rule51 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -97, 
      titledist: 0
  };
  var rule52 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -56, 
      titledist: 0
  };
  var rule53 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -130, 
      titledist: 0
  };
  var rule54 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 10795, 
      titledist: 0
  };
  var rule55 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -163, 
      titledist: 0
  };
  var rule56 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 10792, 
      titledist: 0
  };
  var rule58 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -195, 
      titledist: 0
  };
  var rule59 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 69, 
      titledist: 0
  };
  var rule60 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 71, 
      titledist: 0
  };
  var rule86 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 38, 
      titledist: 0
  };
  var rule87 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 37, 
      titledist: 0
  };
  var rule88 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 64, 
      titledist: 0
  };
  var rule89 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 63, 
      titledist: 0
  };
  var rule9 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 32, 
      titledist: 0
  };
  var rule95 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 1, 
      updist: 0, 
      lowdist: 8, 
      titledist: 0
  };
  var rule98 = {
      category: gencatLU, 
      unicodeCat: NUMCAT_LU.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatLT = 524288;
  var rule129 = {
      category: gencatLT, 
      unicodeCat: NUMCAT_LT.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -8, 
      titledist: 0
  };
  var rule132 = {
      category: gencatLT, 
      unicodeCat: NUMCAT_LT.value, 
      possible: 1, 
      updist: 0, 
      lowdist: -9, 
      titledist: 0
  };
  var rule48 = {
      category: gencatLT, 
      unicodeCat: NUMCAT_LT.value, 
      possible: 1, 
      updist: -1, 
      lowdist: 1, 
      titledist: 0
  };
  var gencatLO = 262144;
  var rule45 = {
      category: gencatLO, 
      unicodeCat: NUMCAT_LO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatLM = 1048576;
  var rule83 = {
      category: gencatLM, 
      unicodeCat: NUMCAT_LM.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -54, 
      lowdist: 0, 
      titledist: -54
  };
  var rule101 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -8, 
      lowdist: 0, 
      titledist: -8
  };
  var rule102 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -86, 
      lowdist: 0, 
      titledist: -86
  };
  var rule103 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -80, 
      lowdist: 0, 
      titledist: -80
  };
  var rule104 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 7, 
      lowdist: 0, 
      titledist: 7
  };
  var rule106 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -96, 
      lowdist: 0, 
      titledist: -96
  };
  var rule111 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -15, 
      lowdist: 0, 
      titledist: -15
  };
  var rule113 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -48, 
      lowdist: 0, 
      titledist: -48
  };
  var rule117 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 35332, 
      lowdist: 0, 
      titledist: 35332
  };
  var rule118 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 3814, 
      lowdist: 0, 
      titledist: 3814
  };
  var rule119 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -59, 
      lowdist: 0, 
      titledist: -59
  };
  var rule12 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -32, 
      lowdist: 0, 
      titledist: -32
  };
  var rule121 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 8, 
      lowdist: 0, 
      titledist: 8
  };
  var rule123 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 74, 
      lowdist: 0, 
      titledist: 74
  };
  var rule124 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 86, 
      lowdist: 0, 
      titledist: 86
  };
  var rule125 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 100, 
      lowdist: 0, 
      titledist: 100
  };
  var rule126 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 128, 
      lowdist: 0, 
      titledist: 128
  };
  var rule127 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 112, 
      lowdist: 0, 
      titledist: 112
  };
  var rule128 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 126, 
      lowdist: 0, 
      titledist: 126
  };
  var rule130 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 9, 
      lowdist: 0, 
      titledist: 9
  };
  var rule133 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -7205, 
      lowdist: 0, 
      titledist: -7205
  };
  var rule14 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var rule145 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -28, 
      lowdist: 0, 
      titledist: -28
  };
  var rule153 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -10795, 
      lowdist: 0, 
      titledist: -10795
  };
  var rule154 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -10792, 
      lowdist: 0, 
      titledist: -10792
  };
  var rule160 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -7264, 
      lowdist: 0, 
      titledist: -7264
  };
  var rule166 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -40, 
      lowdist: 0, 
      titledist: -40
  };
  var rule18 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 743, 
      lowdist: 0, 
      titledist: 743
  };
  var rule20 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 121, 
      lowdist: 0, 
      titledist: 121
  };
  var rule22 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -1, 
      lowdist: 0, 
      titledist: -1
  };
  var rule24 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -232, 
      lowdist: 0, 
      titledist: -232
  };
  var rule26 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -300, 
      lowdist: 0, 
      titledist: -300
  };
  var rule27 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 195, 
      lowdist: 0, 
      titledist: 195
  };
  var rule35 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 97, 
      lowdist: 0, 
      titledist: 97
  };
  var rule38 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 163, 
      lowdist: 0, 
      titledist: 163
  };
  var rule40 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 130, 
      lowdist: 0, 
      titledist: 130
  };
  var rule46 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 56, 
      lowdist: 0, 
      titledist: 56
  };
  var rule49 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -2, 
      lowdist: 0, 
      titledist: -1
  };
  var rule50 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -79, 
      lowdist: 0, 
      titledist: -79
  };
  var rule57 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10815, 
      lowdist: 0, 
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10783, 
      lowdist: 0, 
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10780, 
      lowdist: 0, 
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10782, 
      lowdist: 0, 
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -210, 
      lowdist: 0, 
      titledist: -210
  };
  var rule65 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -206, 
      lowdist: 0, 
      titledist: -206
  };
  var rule66 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -205, 
      lowdist: 0, 
      titledist: -205
  };
  var rule67 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -202, 
      lowdist: 0, 
      titledist: -202
  };
  var rule68 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -203, 
      lowdist: 0, 
      titledist: -203
  };
  var rule69 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -207, 
      lowdist: 0, 
      titledist: -207
  };
  var rule70 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 42280, 
      lowdist: 0, 
      titledist: 42280
  };
  var rule71 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -209, 
      lowdist: 0, 
      titledist: -209
  };
  var rule72 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -211, 
      lowdist: 0, 
      titledist: -211
  };
  var rule73 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10743, 
      lowdist: 0, 
      titledist: 10743
  };
  var rule74 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10749, 
      lowdist: 0, 
      titledist: 10749
  };
  var rule75 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -213, 
      lowdist: 0, 
      titledist: -213
  };
  var rule76 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -214, 
      lowdist: 0, 
      titledist: -214
  };
  var rule77 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: 10727, 
      lowdist: 0, 
      titledist: 10727
  };
  var rule78 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -218, 
      lowdist: 0, 
      titledist: -218
  };
  var rule79 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -69, 
      lowdist: 0, 
      titledist: -69
  };
  var rule80 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -217, 
      lowdist: 0, 
      titledist: -217
  };
  var rule81 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -71, 
      lowdist: 0, 
      titledist: -71
  };
  var rule82 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -219, 
      lowdist: 0, 
      titledist: -219
  };
  var rule90 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -38, 
      lowdist: 0, 
      titledist: -38
  };
  var rule91 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -37, 
      lowdist: 0, 
      titledist: -37
  };
  var rule92 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -31, 
      lowdist: 0, 
      titledist: -31
  };
  var rule93 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -64, 
      lowdist: 0, 
      titledist: -64
  };
  var rule94 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -63, 
      lowdist: 0, 
      titledist: -63
  };
  var rule96 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -62, 
      lowdist: 0, 
      titledist: -62
  };
  var rule97 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -57, 
      lowdist: 0, 
      titledist: -57
  };
  var rule99 = {
      category: gencatLL, 
      unicodeCat: NUMCAT_LL.value, 
      possible: 1, 
      updist: -47, 
      lowdist: 0, 
      titledist: -47
  };
  var gencatCS = 134217728;
  var rule163 = {
      category: gencatCS, 
      unicodeCat: NUMCAT_CS.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatCO = 268435456;
  var rule164 = {
      category: gencatCO, 
      unicodeCat: NUMCAT_CO.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatCF = 32768;
  var rule16 = {
      category: gencatCF, 
      unicodeCat: NUMCAT_CF.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };
  var gencatCC = 1;
  var rule0 = {
      category: gencatCC, 
      unicodeCat: NUMCAT_CC.value, 
      possible: 0, 
      updist: 0, 
      lowdist: 0, 
      titledist: 0
  };  
  var bsearch = function (a) {
      return function (array) {
          return function (v) {
              return function (compare) {
                  return Data_Foldable.find(Data_Foldable.foldableArray)(function (testA) {
                      return compare(a)(testA) === 0;
                  })(array);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return 0;
          };
          if (v.start > v1.start) {
              return 1;
          };
          if (Data_Boolean.otherwise) {
              return -1;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4759, column 1 - line 4765, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar, 
                  length: 1, 
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4771, column 8 - line 4773, column 62: " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };                                       
  var allchars = [ {
      start: 0, 
      length: 32, 
      convRule: rule0
  }, {
      start: 32, 
      length: 1, 
      convRule: rule1
  }, {
      start: 33, 
      length: 3, 
      convRule: rule2
  }, {
      start: 36, 
      length: 1, 
      convRule: rule3
  }, {
      start: 37, 
      length: 3, 
      convRule: rule2
  }, {
      start: 40, 
      length: 1, 
      convRule: rule4
  }, {
      start: 41, 
      length: 1, 
      convRule: rule5
  }, {
      start: 42, 
      length: 1, 
      convRule: rule2
  }, {
      start: 43, 
      length: 1, 
      convRule: rule6
  }, {
      start: 44, 
      length: 1, 
      convRule: rule2
  }, {
      start: 45, 
      length: 1, 
      convRule: rule7
  }, {
      start: 46, 
      length: 2, 
      convRule: rule2
  }, {
      start: 48, 
      length: 10, 
      convRule: rule8
  }, {
      start: 58, 
      length: 2, 
      convRule: rule2
  }, {
      start: 60, 
      length: 3, 
      convRule: rule6
  }, {
      start: 63, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65, 
      length: 26, 
      convRule: rule9
  }, {
      start: 91, 
      length: 1, 
      convRule: rule4
  }, {
      start: 92, 
      length: 1, 
      convRule: rule2
  }, {
      start: 93, 
      length: 1, 
      convRule: rule5
  }, {
      start: 94, 
      length: 1, 
      convRule: rule10
  }, {
      start: 95, 
      length: 1, 
      convRule: rule11
  }, {
      start: 96, 
      length: 1, 
      convRule: rule10
  }, {
      start: 97, 
      length: 26, 
      convRule: rule12
  }, {
      start: 123, 
      length: 1, 
      convRule: rule4
  }, {
      start: 124, 
      length: 1, 
      convRule: rule6
  }, {
      start: 125, 
      length: 1, 
      convRule: rule5
  }, {
      start: 126, 
      length: 1, 
      convRule: rule6
  }, {
      start: 127, 
      length: 33, 
      convRule: rule0
  }, {
      start: 160, 
      length: 1, 
      convRule: rule1
  }, {
      start: 161, 
      length: 1, 
      convRule: rule2
  }, {
      start: 162, 
      length: 4, 
      convRule: rule3
  }, {
      start: 166, 
      length: 2, 
      convRule: rule13
  }, {
      start: 168, 
      length: 1, 
      convRule: rule10
  }, {
      start: 169, 
      length: 1, 
      convRule: rule13
  }, {
      start: 170, 
      length: 1, 
      convRule: rule14
  }, {
      start: 171, 
      length: 1, 
      convRule: rule15
  }, {
      start: 172, 
      length: 1, 
      convRule: rule6
  }, {
      start: 173, 
      length: 1, 
      convRule: rule16
  }, {
      start: 174, 
      length: 1, 
      convRule: rule13
  }, {
      start: 175, 
      length: 1, 
      convRule: rule10
  }, {
      start: 176, 
      length: 1, 
      convRule: rule13
  }, {
      start: 177, 
      length: 1, 
      convRule: rule6
  }, {
      start: 178, 
      length: 2, 
      convRule: rule17
  }, {
      start: 180, 
      length: 1, 
      convRule: rule10
  }, {
      start: 181, 
      length: 1, 
      convRule: rule18
  }, {
      start: 182, 
      length: 1, 
      convRule: rule13
  }, {
      start: 183, 
      length: 1, 
      convRule: rule2
  }, {
      start: 184, 
      length: 1, 
      convRule: rule10
  }, {
      start: 185, 
      length: 1, 
      convRule: rule17
  }, {
      start: 186, 
      length: 1, 
      convRule: rule14
  }, {
      start: 187, 
      length: 1, 
      convRule: rule19
  }, {
      start: 188, 
      length: 3, 
      convRule: rule17
  }, {
      start: 191, 
      length: 1, 
      convRule: rule2
  }, {
      start: 192, 
      length: 23, 
      convRule: rule9
  }, {
      start: 215, 
      length: 1, 
      convRule: rule6
  }, {
      start: 216, 
      length: 7, 
      convRule: rule9
  }, {
      start: 223, 
      length: 1, 
      convRule: rule14
  }, {
      start: 224, 
      length: 23, 
      convRule: rule12
  }, {
      start: 247, 
      length: 1, 
      convRule: rule6
  }, {
      start: 248, 
      length: 7, 
      convRule: rule12
  }, {
      start: 255, 
      length: 1, 
      convRule: rule20
  }, {
      start: 256, 
      length: 1, 
      convRule: rule21
  }, {
      start: 257, 
      length: 1, 
      convRule: rule22
  }, {
      start: 258, 
      length: 1, 
      convRule: rule21
  }, {
      start: 259, 
      length: 1, 
      convRule: rule22
  }, {
      start: 260, 
      length: 1, 
      convRule: rule21
  }, {
      start: 261, 
      length: 1, 
      convRule: rule22
  }, {
      start: 262, 
      length: 1, 
      convRule: rule21
  }, {
      start: 263, 
      length: 1, 
      convRule: rule22
  }, {
      start: 264, 
      length: 1, 
      convRule: rule21
  }, {
      start: 265, 
      length: 1, 
      convRule: rule22
  }, {
      start: 266, 
      length: 1, 
      convRule: rule21
  }, {
      start: 267, 
      length: 1, 
      convRule: rule22
  }, {
      start: 268, 
      length: 1, 
      convRule: rule21
  }, {
      start: 269, 
      length: 1, 
      convRule: rule22
  }, {
      start: 270, 
      length: 1, 
      convRule: rule21
  }, {
      start: 271, 
      length: 1, 
      convRule: rule22
  }, {
      start: 272, 
      length: 1, 
      convRule: rule21
  }, {
      start: 273, 
      length: 1, 
      convRule: rule22
  }, {
      start: 274, 
      length: 1, 
      convRule: rule21
  }, {
      start: 275, 
      length: 1, 
      convRule: rule22
  }, {
      start: 276, 
      length: 1, 
      convRule: rule21
  }, {
      start: 277, 
      length: 1, 
      convRule: rule22
  }, {
      start: 278, 
      length: 1, 
      convRule: rule21
  }, {
      start: 279, 
      length: 1, 
      convRule: rule22
  }, {
      start: 280, 
      length: 1, 
      convRule: rule21
  }, {
      start: 281, 
      length: 1, 
      convRule: rule22
  }, {
      start: 282, 
      length: 1, 
      convRule: rule21
  }, {
      start: 283, 
      length: 1, 
      convRule: rule22
  }, {
      start: 284, 
      length: 1, 
      convRule: rule21
  }, {
      start: 285, 
      length: 1, 
      convRule: rule22
  }, {
      start: 286, 
      length: 1, 
      convRule: rule21
  }, {
      start: 287, 
      length: 1, 
      convRule: rule22
  }, {
      start: 288, 
      length: 1, 
      convRule: rule21
  }, {
      start: 289, 
      length: 1, 
      convRule: rule22
  }, {
      start: 290, 
      length: 1, 
      convRule: rule21
  }, {
      start: 291, 
      length: 1, 
      convRule: rule22
  }, {
      start: 292, 
      length: 1, 
      convRule: rule21
  }, {
      start: 293, 
      length: 1, 
      convRule: rule22
  }, {
      start: 294, 
      length: 1, 
      convRule: rule21
  }, {
      start: 295, 
      length: 1, 
      convRule: rule22
  }, {
      start: 296, 
      length: 1, 
      convRule: rule21
  }, {
      start: 297, 
      length: 1, 
      convRule: rule22
  }, {
      start: 298, 
      length: 1, 
      convRule: rule21
  }, {
      start: 299, 
      length: 1, 
      convRule: rule22
  }, {
      start: 300, 
      length: 1, 
      convRule: rule21
  }, {
      start: 301, 
      length: 1, 
      convRule: rule22
  }, {
      start: 302, 
      length: 1, 
      convRule: rule21
  }, {
      start: 303, 
      length: 1, 
      convRule: rule22
  }, {
      start: 304, 
      length: 1, 
      convRule: rule23
  }, {
      start: 305, 
      length: 1, 
      convRule: rule24
  }, {
      start: 306, 
      length: 1, 
      convRule: rule21
  }, {
      start: 307, 
      length: 1, 
      convRule: rule22
  }, {
      start: 308, 
      length: 1, 
      convRule: rule21
  }, {
      start: 309, 
      length: 1, 
      convRule: rule22
  }, {
      start: 310, 
      length: 1, 
      convRule: rule21
  }, {
      start: 311, 
      length: 1, 
      convRule: rule22
  }, {
      start: 312, 
      length: 1, 
      convRule: rule14
  }, {
      start: 313, 
      length: 1, 
      convRule: rule21
  }, {
      start: 314, 
      length: 1, 
      convRule: rule22
  }, {
      start: 315, 
      length: 1, 
      convRule: rule21
  }, {
      start: 316, 
      length: 1, 
      convRule: rule22
  }, {
      start: 317, 
      length: 1, 
      convRule: rule21
  }, {
      start: 318, 
      length: 1, 
      convRule: rule22
  }, {
      start: 319, 
      length: 1, 
      convRule: rule21
  }, {
      start: 320, 
      length: 1, 
      convRule: rule22
  }, {
      start: 321, 
      length: 1, 
      convRule: rule21
  }, {
      start: 322, 
      length: 1, 
      convRule: rule22
  }, {
      start: 323, 
      length: 1, 
      convRule: rule21
  }, {
      start: 324, 
      length: 1, 
      convRule: rule22
  }, {
      start: 325, 
      length: 1, 
      convRule: rule21
  }, {
      start: 326, 
      length: 1, 
      convRule: rule22
  }, {
      start: 327, 
      length: 1, 
      convRule: rule21
  }, {
      start: 328, 
      length: 1, 
      convRule: rule22
  }, {
      start: 329, 
      length: 1, 
      convRule: rule14
  }, {
      start: 330, 
      length: 1, 
      convRule: rule21
  }, {
      start: 331, 
      length: 1, 
      convRule: rule22
  }, {
      start: 332, 
      length: 1, 
      convRule: rule21
  }, {
      start: 333, 
      length: 1, 
      convRule: rule22
  }, {
      start: 334, 
      length: 1, 
      convRule: rule21
  }, {
      start: 335, 
      length: 1, 
      convRule: rule22
  }, {
      start: 336, 
      length: 1, 
      convRule: rule21
  }, {
      start: 337, 
      length: 1, 
      convRule: rule22
  }, {
      start: 338, 
      length: 1, 
      convRule: rule21
  }, {
      start: 339, 
      length: 1, 
      convRule: rule22
  }, {
      start: 340, 
      length: 1, 
      convRule: rule21
  }, {
      start: 341, 
      length: 1, 
      convRule: rule22
  }, {
      start: 342, 
      length: 1, 
      convRule: rule21
  }, {
      start: 343, 
      length: 1, 
      convRule: rule22
  }, {
      start: 344, 
      length: 1, 
      convRule: rule21
  }, {
      start: 345, 
      length: 1, 
      convRule: rule22
  }, {
      start: 346, 
      length: 1, 
      convRule: rule21
  }, {
      start: 347, 
      length: 1, 
      convRule: rule22
  }, {
      start: 348, 
      length: 1, 
      convRule: rule21
  }, {
      start: 349, 
      length: 1, 
      convRule: rule22
  }, {
      start: 350, 
      length: 1, 
      convRule: rule21
  }, {
      start: 351, 
      length: 1, 
      convRule: rule22
  }, {
      start: 352, 
      length: 1, 
      convRule: rule21
  }, {
      start: 353, 
      length: 1, 
      convRule: rule22
  }, {
      start: 354, 
      length: 1, 
      convRule: rule21
  }, {
      start: 355, 
      length: 1, 
      convRule: rule22
  }, {
      start: 356, 
      length: 1, 
      convRule: rule21
  }, {
      start: 357, 
      length: 1, 
      convRule: rule22
  }, {
      start: 358, 
      length: 1, 
      convRule: rule21
  }, {
      start: 359, 
      length: 1, 
      convRule: rule22
  }, {
      start: 360, 
      length: 1, 
      convRule: rule21
  }, {
      start: 361, 
      length: 1, 
      convRule: rule22
  }, {
      start: 362, 
      length: 1, 
      convRule: rule21
  }, {
      start: 363, 
      length: 1, 
      convRule: rule22
  }, {
      start: 364, 
      length: 1, 
      convRule: rule21
  }, {
      start: 365, 
      length: 1, 
      convRule: rule22
  }, {
      start: 366, 
      length: 1, 
      convRule: rule21
  }, {
      start: 367, 
      length: 1, 
      convRule: rule22
  }, {
      start: 368, 
      length: 1, 
      convRule: rule21
  }, {
      start: 369, 
      length: 1, 
      convRule: rule22
  }, {
      start: 370, 
      length: 1, 
      convRule: rule21
  }, {
      start: 371, 
      length: 1, 
      convRule: rule22
  }, {
      start: 372, 
      length: 1, 
      convRule: rule21
  }, {
      start: 373, 
      length: 1, 
      convRule: rule22
  }, {
      start: 374, 
      length: 1, 
      convRule: rule21
  }, {
      start: 375, 
      length: 1, 
      convRule: rule22
  }, {
      start: 376, 
      length: 1, 
      convRule: rule25
  }, {
      start: 377, 
      length: 1, 
      convRule: rule21
  }, {
      start: 378, 
      length: 1, 
      convRule: rule22
  }, {
      start: 379, 
      length: 1, 
      convRule: rule21
  }, {
      start: 380, 
      length: 1, 
      convRule: rule22
  }, {
      start: 381, 
      length: 1, 
      convRule: rule21
  }, {
      start: 382, 
      length: 1, 
      convRule: rule22
  }, {
      start: 383, 
      length: 1, 
      convRule: rule26
  }, {
      start: 384, 
      length: 1, 
      convRule: rule27
  }, {
      start: 385, 
      length: 1, 
      convRule: rule28
  }, {
      start: 386, 
      length: 1, 
      convRule: rule21
  }, {
      start: 387, 
      length: 1, 
      convRule: rule22
  }, {
      start: 388, 
      length: 1, 
      convRule: rule21
  }, {
      start: 389, 
      length: 1, 
      convRule: rule22
  }, {
      start: 390, 
      length: 1, 
      convRule: rule29
  }, {
      start: 391, 
      length: 1, 
      convRule: rule21
  }, {
      start: 392, 
      length: 1, 
      convRule: rule22
  }, {
      start: 393, 
      length: 2, 
      convRule: rule30
  }, {
      start: 395, 
      length: 1, 
      convRule: rule21
  }, {
      start: 396, 
      length: 1, 
      convRule: rule22
  }, {
      start: 397, 
      length: 1, 
      convRule: rule14
  }, {
      start: 398, 
      length: 1, 
      convRule: rule31
  }, {
      start: 399, 
      length: 1, 
      convRule: rule32
  }, {
      start: 400, 
      length: 1, 
      convRule: rule33
  }, {
      start: 401, 
      length: 1, 
      convRule: rule21
  }, {
      start: 402, 
      length: 1, 
      convRule: rule22
  }, {
      start: 403, 
      length: 1, 
      convRule: rule30
  }, {
      start: 404, 
      length: 1, 
      convRule: rule34
  }, {
      start: 405, 
      length: 1, 
      convRule: rule35
  }, {
      start: 406, 
      length: 1, 
      convRule: rule36
  }, {
      start: 407, 
      length: 1, 
      convRule: rule37
  }, {
      start: 408, 
      length: 1, 
      convRule: rule21
  }, {
      start: 409, 
      length: 1, 
      convRule: rule22
  }, {
      start: 410, 
      length: 1, 
      convRule: rule38
  }, {
      start: 411, 
      length: 1, 
      convRule: rule14
  }, {
      start: 412, 
      length: 1, 
      convRule: rule36
  }, {
      start: 413, 
      length: 1, 
      convRule: rule39
  }, {
      start: 414, 
      length: 1, 
      convRule: rule40
  }, {
      start: 415, 
      length: 1, 
      convRule: rule41
  }, {
      start: 416, 
      length: 1, 
      convRule: rule21
  }, {
      start: 417, 
      length: 1, 
      convRule: rule22
  }, {
      start: 418, 
      length: 1, 
      convRule: rule21
  }, {
      start: 419, 
      length: 1, 
      convRule: rule22
  }, {
      start: 420, 
      length: 1, 
      convRule: rule21
  }, {
      start: 421, 
      length: 1, 
      convRule: rule22
  }, {
      start: 422, 
      length: 1, 
      convRule: rule42
  }, {
      start: 423, 
      length: 1, 
      convRule: rule21
  }, {
      start: 424, 
      length: 1, 
      convRule: rule22
  }, {
      start: 425, 
      length: 1, 
      convRule: rule42
  }, {
      start: 426, 
      length: 2, 
      convRule: rule14
  }, {
      start: 428, 
      length: 1, 
      convRule: rule21
  }, {
      start: 429, 
      length: 1, 
      convRule: rule22
  }, {
      start: 430, 
      length: 1, 
      convRule: rule42
  }, {
      start: 431, 
      length: 1, 
      convRule: rule21
  }, {
      start: 432, 
      length: 1, 
      convRule: rule22
  }, {
      start: 433, 
      length: 2, 
      convRule: rule43
  }, {
      start: 435, 
      length: 1, 
      convRule: rule21
  }, {
      start: 436, 
      length: 1, 
      convRule: rule22
  }, {
      start: 437, 
      length: 1, 
      convRule: rule21
  }, {
      start: 438, 
      length: 1, 
      convRule: rule22
  }, {
      start: 439, 
      length: 1, 
      convRule: rule44
  }, {
      start: 440, 
      length: 1, 
      convRule: rule21
  }, {
      start: 441, 
      length: 1, 
      convRule: rule22
  }, {
      start: 442, 
      length: 1, 
      convRule: rule14
  }, {
      start: 443, 
      length: 1, 
      convRule: rule45
  }, {
      start: 444, 
      length: 1, 
      convRule: rule21
  }, {
      start: 445, 
      length: 1, 
      convRule: rule22
  }, {
      start: 446, 
      length: 1, 
      convRule: rule14
  }, {
      start: 447, 
      length: 1, 
      convRule: rule46
  }, {
      start: 448, 
      length: 4, 
      convRule: rule45
  }, {
      start: 452, 
      length: 1, 
      convRule: rule47
  }, {
      start: 453, 
      length: 1, 
      convRule: rule48
  }, {
      start: 454, 
      length: 1, 
      convRule: rule49
  }, {
      start: 455, 
      length: 1, 
      convRule: rule47
  }, {
      start: 456, 
      length: 1, 
      convRule: rule48
  }, {
      start: 457, 
      length: 1, 
      convRule: rule49
  }, {
      start: 458, 
      length: 1, 
      convRule: rule47
  }, {
      start: 459, 
      length: 1, 
      convRule: rule48
  }, {
      start: 460, 
      length: 1, 
      convRule: rule49
  }, {
      start: 461, 
      length: 1, 
      convRule: rule21
  }, {
      start: 462, 
      length: 1, 
      convRule: rule22
  }, {
      start: 463, 
      length: 1, 
      convRule: rule21
  }, {
      start: 464, 
      length: 1, 
      convRule: rule22
  }, {
      start: 465, 
      length: 1, 
      convRule: rule21
  }, {
      start: 466, 
      length: 1, 
      convRule: rule22
  }, {
      start: 467, 
      length: 1, 
      convRule: rule21
  }, {
      start: 468, 
      length: 1, 
      convRule: rule22
  }, {
      start: 469, 
      length: 1, 
      convRule: rule21
  }, {
      start: 470, 
      length: 1, 
      convRule: rule22
  }, {
      start: 471, 
      length: 1, 
      convRule: rule21
  }, {
      start: 472, 
      length: 1, 
      convRule: rule22
  }, {
      start: 473, 
      length: 1, 
      convRule: rule21
  }, {
      start: 474, 
      length: 1, 
      convRule: rule22
  }, {
      start: 475, 
      length: 1, 
      convRule: rule21
  }, {
      start: 476, 
      length: 1, 
      convRule: rule22
  }, {
      start: 477, 
      length: 1, 
      convRule: rule50
  }, {
      start: 478, 
      length: 1, 
      convRule: rule21
  }, {
      start: 479, 
      length: 1, 
      convRule: rule22
  }, {
      start: 480, 
      length: 1, 
      convRule: rule21
  }, {
      start: 481, 
      length: 1, 
      convRule: rule22
  }, {
      start: 482, 
      length: 1, 
      convRule: rule21
  }, {
      start: 483, 
      length: 1, 
      convRule: rule22
  }, {
      start: 484, 
      length: 1, 
      convRule: rule21
  }, {
      start: 485, 
      length: 1, 
      convRule: rule22
  }, {
      start: 486, 
      length: 1, 
      convRule: rule21
  }, {
      start: 487, 
      length: 1, 
      convRule: rule22
  }, {
      start: 488, 
      length: 1, 
      convRule: rule21
  }, {
      start: 489, 
      length: 1, 
      convRule: rule22
  }, {
      start: 490, 
      length: 1, 
      convRule: rule21
  }, {
      start: 491, 
      length: 1, 
      convRule: rule22
  }, {
      start: 492, 
      length: 1, 
      convRule: rule21
  }, {
      start: 493, 
      length: 1, 
      convRule: rule22
  }, {
      start: 494, 
      length: 1, 
      convRule: rule21
  }, {
      start: 495, 
      length: 1, 
      convRule: rule22
  }, {
      start: 496, 
      length: 1, 
      convRule: rule14
  }, {
      start: 497, 
      length: 1, 
      convRule: rule47
  }, {
      start: 498, 
      length: 1, 
      convRule: rule48
  }, {
      start: 499, 
      length: 1, 
      convRule: rule49
  }, {
      start: 500, 
      length: 1, 
      convRule: rule21
  }, {
      start: 501, 
      length: 1, 
      convRule: rule22
  }, {
      start: 502, 
      length: 1, 
      convRule: rule51
  }, {
      start: 503, 
      length: 1, 
      convRule: rule52
  }, {
      start: 504, 
      length: 1, 
      convRule: rule21
  }, {
      start: 505, 
      length: 1, 
      convRule: rule22
  }, {
      start: 506, 
      length: 1, 
      convRule: rule21
  }, {
      start: 507, 
      length: 1, 
      convRule: rule22
  }, {
      start: 508, 
      length: 1, 
      convRule: rule21
  }, {
      start: 509, 
      length: 1, 
      convRule: rule22
  }, {
      start: 510, 
      length: 1, 
      convRule: rule21
  }, {
      start: 511, 
      length: 1, 
      convRule: rule22
  }, {
      start: 512, 
      length: 1, 
      convRule: rule21
  }, {
      start: 513, 
      length: 1, 
      convRule: rule22
  }, {
      start: 514, 
      length: 1, 
      convRule: rule21
  }, {
      start: 515, 
      length: 1, 
      convRule: rule22
  }, {
      start: 516, 
      length: 1, 
      convRule: rule21
  }, {
      start: 517, 
      length: 1, 
      convRule: rule22
  }, {
      start: 518, 
      length: 1, 
      convRule: rule21
  }, {
      start: 519, 
      length: 1, 
      convRule: rule22
  }, {
      start: 520, 
      length: 1, 
      convRule: rule21
  }, {
      start: 521, 
      length: 1, 
      convRule: rule22
  }, {
      start: 522, 
      length: 1, 
      convRule: rule21
  }, {
      start: 523, 
      length: 1, 
      convRule: rule22
  }, {
      start: 524, 
      length: 1, 
      convRule: rule21
  }, {
      start: 525, 
      length: 1, 
      convRule: rule22
  }, {
      start: 526, 
      length: 1, 
      convRule: rule21
  }, {
      start: 527, 
      length: 1, 
      convRule: rule22
  }, {
      start: 528, 
      length: 1, 
      convRule: rule21
  }, {
      start: 529, 
      length: 1, 
      convRule: rule22
  }, {
      start: 530, 
      length: 1, 
      convRule: rule21
  }, {
      start: 531, 
      length: 1, 
      convRule: rule22
  }, {
      start: 532, 
      length: 1, 
      convRule: rule21
  }, {
      start: 533, 
      length: 1, 
      convRule: rule22
  }, {
      start: 534, 
      length: 1, 
      convRule: rule21
  }, {
      start: 535, 
      length: 1, 
      convRule: rule22
  }, {
      start: 536, 
      length: 1, 
      convRule: rule21
  }, {
      start: 537, 
      length: 1, 
      convRule: rule22
  }, {
      start: 538, 
      length: 1, 
      convRule: rule21
  }, {
      start: 539, 
      length: 1, 
      convRule: rule22
  }, {
      start: 540, 
      length: 1, 
      convRule: rule21
  }, {
      start: 541, 
      length: 1, 
      convRule: rule22
  }, {
      start: 542, 
      length: 1, 
      convRule: rule21
  }, {
      start: 543, 
      length: 1, 
      convRule: rule22
  }, {
      start: 544, 
      length: 1, 
      convRule: rule53
  }, {
      start: 545, 
      length: 1, 
      convRule: rule14
  }, {
      start: 546, 
      length: 1, 
      convRule: rule21
  }, {
      start: 547, 
      length: 1, 
      convRule: rule22
  }, {
      start: 548, 
      length: 1, 
      convRule: rule21
  }, {
      start: 549, 
      length: 1, 
      convRule: rule22
  }, {
      start: 550, 
      length: 1, 
      convRule: rule21
  }, {
      start: 551, 
      length: 1, 
      convRule: rule22
  }, {
      start: 552, 
      length: 1, 
      convRule: rule21
  }, {
      start: 553, 
      length: 1, 
      convRule: rule22
  }, {
      start: 554, 
      length: 1, 
      convRule: rule21
  }, {
      start: 555, 
      length: 1, 
      convRule: rule22
  }, {
      start: 556, 
      length: 1, 
      convRule: rule21
  }, {
      start: 557, 
      length: 1, 
      convRule: rule22
  }, {
      start: 558, 
      length: 1, 
      convRule: rule21
  }, {
      start: 559, 
      length: 1, 
      convRule: rule22
  }, {
      start: 560, 
      length: 1, 
      convRule: rule21
  }, {
      start: 561, 
      length: 1, 
      convRule: rule22
  }, {
      start: 562, 
      length: 1, 
      convRule: rule21
  }, {
      start: 563, 
      length: 1, 
      convRule: rule22
  }, {
      start: 564, 
      length: 6, 
      convRule: rule14
  }, {
      start: 570, 
      length: 1, 
      convRule: rule54
  }, {
      start: 571, 
      length: 1, 
      convRule: rule21
  }, {
      start: 572, 
      length: 1, 
      convRule: rule22
  }, {
      start: 573, 
      length: 1, 
      convRule: rule55
  }, {
      start: 574, 
      length: 1, 
      convRule: rule56
  }, {
      start: 575, 
      length: 2, 
      convRule: rule57
  }, {
      start: 577, 
      length: 1, 
      convRule: rule21
  }, {
      start: 578, 
      length: 1, 
      convRule: rule22
  }, {
      start: 579, 
      length: 1, 
      convRule: rule58
  }, {
      start: 580, 
      length: 1, 
      convRule: rule59
  }, {
      start: 581, 
      length: 1, 
      convRule: rule60
  }, {
      start: 582, 
      length: 1, 
      convRule: rule21
  }, {
      start: 583, 
      length: 1, 
      convRule: rule22
  }, {
      start: 584, 
      length: 1, 
      convRule: rule21
  }, {
      start: 585, 
      length: 1, 
      convRule: rule22
  }, {
      start: 586, 
      length: 1, 
      convRule: rule21
  }, {
      start: 587, 
      length: 1, 
      convRule: rule22
  }, {
      start: 588, 
      length: 1, 
      convRule: rule21
  }, {
      start: 589, 
      length: 1, 
      convRule: rule22
  }, {
      start: 590, 
      length: 1, 
      convRule: rule21
  }, {
      start: 591, 
      length: 1, 
      convRule: rule22
  }, {
      start: 592, 
      length: 1, 
      convRule: rule61
  }, {
      start: 593, 
      length: 1, 
      convRule: rule62
  }, {
      start: 594, 
      length: 1, 
      convRule: rule63
  }, {
      start: 595, 
      length: 1, 
      convRule: rule64
  }, {
      start: 596, 
      length: 1, 
      convRule: rule65
  }, {
      start: 597, 
      length: 1, 
      convRule: rule14
  }, {
      start: 598, 
      length: 2, 
      convRule: rule66
  }, {
      start: 600, 
      length: 1, 
      convRule: rule14
  }, {
      start: 601, 
      length: 1, 
      convRule: rule67
  }, {
      start: 602, 
      length: 1, 
      convRule: rule14
  }, {
      start: 603, 
      length: 1, 
      convRule: rule68
  }, {
      start: 604, 
      length: 4, 
      convRule: rule14
  }, {
      start: 608, 
      length: 1, 
      convRule: rule66
  }, {
      start: 609, 
      length: 2, 
      convRule: rule14
  }, {
      start: 611, 
      length: 1, 
      convRule: rule69
  }, {
      start: 612, 
      length: 1, 
      convRule: rule14
  }, {
      start: 613, 
      length: 1, 
      convRule: rule70
  }, {
      start: 614, 
      length: 2, 
      convRule: rule14
  }, {
      start: 616, 
      length: 1, 
      convRule: rule71
  }, {
      start: 617, 
      length: 1, 
      convRule: rule72
  }, {
      start: 618, 
      length: 1, 
      convRule: rule14
  }, {
      start: 619, 
      length: 1, 
      convRule: rule73
  }, {
      start: 620, 
      length: 3, 
      convRule: rule14
  }, {
      start: 623, 
      length: 1, 
      convRule: rule72
  }, {
      start: 624, 
      length: 1, 
      convRule: rule14
  }, {
      start: 625, 
      length: 1, 
      convRule: rule74
  }, {
      start: 626, 
      length: 1, 
      convRule: rule75
  }, {
      start: 627, 
      length: 2, 
      convRule: rule14
  }, {
      start: 629, 
      length: 1, 
      convRule: rule76
  }, {
      start: 630, 
      length: 7, 
      convRule: rule14
  }, {
      start: 637, 
      length: 1, 
      convRule: rule77
  }, {
      start: 638, 
      length: 2, 
      convRule: rule14
  }, {
      start: 640, 
      length: 1, 
      convRule: rule78
  }, {
      start: 641, 
      length: 2, 
      convRule: rule14
  }, {
      start: 643, 
      length: 1, 
      convRule: rule78
  }, {
      start: 644, 
      length: 4, 
      convRule: rule14
  }, {
      start: 648, 
      length: 1, 
      convRule: rule78
  }, {
      start: 649, 
      length: 1, 
      convRule: rule79
  }, {
      start: 650, 
      length: 2, 
      convRule: rule80
  }, {
      start: 652, 
      length: 1, 
      convRule: rule81
  }, {
      start: 653, 
      length: 5, 
      convRule: rule14
  }, {
      start: 658, 
      length: 1, 
      convRule: rule82
  }, {
      start: 659, 
      length: 1, 
      convRule: rule14
  }, {
      start: 660, 
      length: 1, 
      convRule: rule45
  }, {
      start: 661, 
      length: 27, 
      convRule: rule14
  }, {
      start: 688, 
      length: 18, 
      convRule: rule83
  }, {
      start: 706, 
      length: 4, 
      convRule: rule10
  }, {
      start: 710, 
      length: 12, 
      convRule: rule83
  }, {
      start: 722, 
      length: 14, 
      convRule: rule10
  }, {
      start: 736, 
      length: 5, 
      convRule: rule83
  }, {
      start: 741, 
      length: 7, 
      convRule: rule10
  }, {
      start: 748, 
      length: 1, 
      convRule: rule83
  }, {
      start: 749, 
      length: 1, 
      convRule: rule10
  }, {
      start: 750, 
      length: 1, 
      convRule: rule83
  }, {
      start: 751, 
      length: 17, 
      convRule: rule10
  }, {
      start: 768, 
      length: 69, 
      convRule: rule84
  }, {
      start: 837, 
      length: 1, 
      convRule: rule85
  }, {
      start: 838, 
      length: 42, 
      convRule: rule84
  }, {
      start: 880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 884, 
      length: 1, 
      convRule: rule83
  }, {
      start: 885, 
      length: 1, 
      convRule: rule10
  }, {
      start: 886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 890, 
      length: 1, 
      convRule: rule83
  }, {
      start: 891, 
      length: 3, 
      convRule: rule40
  }, {
      start: 894, 
      length: 1, 
      convRule: rule2
  }, {
      start: 900, 
      length: 2, 
      convRule: rule10
  }, {
      start: 902, 
      length: 1, 
      convRule: rule86
  }, {
      start: 903, 
      length: 1, 
      convRule: rule2
  }, {
      start: 904, 
      length: 3, 
      convRule: rule87
  }, {
      start: 908, 
      length: 1, 
      convRule: rule88
  }, {
      start: 910, 
      length: 2, 
      convRule: rule89
  }, {
      start: 912, 
      length: 1, 
      convRule: rule14
  }, {
      start: 913, 
      length: 17, 
      convRule: rule9
  }, {
      start: 931, 
      length: 9, 
      convRule: rule9
  }, {
      start: 940, 
      length: 1, 
      convRule: rule90
  }, {
      start: 941, 
      length: 3, 
      convRule: rule91
  }, {
      start: 944, 
      length: 1, 
      convRule: rule14
  }, {
      start: 945, 
      length: 17, 
      convRule: rule12
  }, {
      start: 962, 
      length: 1, 
      convRule: rule92
  }, {
      start: 963, 
      length: 9, 
      convRule: rule12
  }, {
      start: 972, 
      length: 1, 
      convRule: rule93
  }, {
      start: 973, 
      length: 2, 
      convRule: rule94
  }, {
      start: 975, 
      length: 1, 
      convRule: rule95
  }, {
      start: 976, 
      length: 1, 
      convRule: rule96
  }, {
      start: 977, 
      length: 1, 
      convRule: rule97
  }, {
      start: 978, 
      length: 3, 
      convRule: rule98
  }, {
      start: 981, 
      length: 1, 
      convRule: rule99
  }, {
      start: 982, 
      length: 1, 
      convRule: rule100
  }, {
      start: 983, 
      length: 1, 
      convRule: rule101
  }, {
      start: 984, 
      length: 1, 
      convRule: rule21
  }, {
      start: 985, 
      length: 1, 
      convRule: rule22
  }, {
      start: 986, 
      length: 1, 
      convRule: rule21
  }, {
      start: 987, 
      length: 1, 
      convRule: rule22
  }, {
      start: 988, 
      length: 1, 
      convRule: rule21
  }, {
      start: 989, 
      length: 1, 
      convRule: rule22
  }, {
      start: 990, 
      length: 1, 
      convRule: rule21
  }, {
      start: 991, 
      length: 1, 
      convRule: rule22
  }, {
      start: 992, 
      length: 1, 
      convRule: rule21
  }, {
      start: 993, 
      length: 1, 
      convRule: rule22
  }, {
      start: 994, 
      length: 1, 
      convRule: rule21
  }, {
      start: 995, 
      length: 1, 
      convRule: rule22
  }, {
      start: 996, 
      length: 1, 
      convRule: rule21
  }, {
      start: 997, 
      length: 1, 
      convRule: rule22
  }, {
      start: 998, 
      length: 1, 
      convRule: rule21
  }, {
      start: 999, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1000, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1001, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1002, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1003, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1004, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1005, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1006, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1007, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1008, 
      length: 1, 
      convRule: rule102
  }, {
      start: 1009, 
      length: 1, 
      convRule: rule103
  }, {
      start: 1010, 
      length: 1, 
      convRule: rule104
  }, {
      start: 1011, 
      length: 1, 
      convRule: rule14
  }, {
      start: 1012, 
      length: 1, 
      convRule: rule105
  }, {
      start: 1013, 
      length: 1, 
      convRule: rule106
  }, {
      start: 1014, 
      length: 1, 
      convRule: rule6
  }, {
      start: 1015, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1016, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1017, 
      length: 1, 
      convRule: rule107
  }, {
      start: 1018, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1019, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1020, 
      length: 1, 
      convRule: rule14
  }, {
      start: 1021, 
      length: 3, 
      convRule: rule53
  }, {
      start: 1024, 
      length: 16, 
      convRule: rule108
  }, {
      start: 1040, 
      length: 32, 
      convRule: rule9
  }, {
      start: 1072, 
      length: 32, 
      convRule: rule12
  }, {
      start: 1104, 
      length: 16, 
      convRule: rule103
  }, {
      start: 1120, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1121, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1122, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1123, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1124, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1125, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1126, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1127, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1128, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1129, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1130, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1131, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1132, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1133, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1134, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1135, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1136, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1137, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1138, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1139, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1140, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1141, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1142, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1143, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1144, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1145, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1146, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1147, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1148, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1149, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1150, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1151, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1152, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1153, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1154, 
      length: 1, 
      convRule: rule13
  }, {
      start: 1155, 
      length: 5, 
      convRule: rule84
  }, {
      start: 1160, 
      length: 2, 
      convRule: rule109
  }, {
      start: 1162, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1163, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1164, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1165, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1166, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1167, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1168, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1169, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1170, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1171, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1172, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1173, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1174, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1175, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1176, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1177, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1178, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1179, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1180, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1181, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1182, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1183, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1184, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1185, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1186, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1187, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1188, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1189, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1190, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1191, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1192, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1193, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1194, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1195, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1196, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1197, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1198, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1199, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1200, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1201, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1202, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1203, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1204, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1205, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1206, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1207, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1208, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1209, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1210, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1211, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1212, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1213, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1214, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1215, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1216, 
      length: 1, 
      convRule: rule110
  }, {
      start: 1217, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1218, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1219, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1220, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1221, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1222, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1223, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1224, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1225, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1226, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1227, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1228, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1229, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1230, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1231, 
      length: 1, 
      convRule: rule111
  }, {
      start: 1232, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1233, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1234, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1235, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1236, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1237, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1238, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1239, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1240, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1241, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1242, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1243, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1244, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1245, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1246, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1247, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1248, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1249, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1250, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1251, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1252, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1253, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1254, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1255, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1256, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1257, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1258, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1259, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1260, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1261, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1262, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1263, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1264, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1265, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1266, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1267, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1268, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1269, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1270, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1271, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1272, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1273, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1274, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1275, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1276, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1277, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1278, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1279, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1280, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1281, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1282, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1283, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1284, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1285, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1286, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1287, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1288, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1289, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1290, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1291, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1292, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1293, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1294, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1295, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1296, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1297, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1298, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1299, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1300, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1301, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1302, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1303, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1304, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1305, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1306, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1307, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1308, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1309, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1310, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1311, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1312, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1313, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1314, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1315, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1316, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1317, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1318, 
      length: 1, 
      convRule: rule21
  }, {
      start: 1319, 
      length: 1, 
      convRule: rule22
  }, {
      start: 1329, 
      length: 38, 
      convRule: rule112
  }, {
      start: 1369, 
      length: 1, 
      convRule: rule83
  }, {
      start: 1370, 
      length: 6, 
      convRule: rule2
  }, {
      start: 1377, 
      length: 38, 
      convRule: rule113
  }, {
      start: 1415, 
      length: 1, 
      convRule: rule14
  }, {
      start: 1417, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1418, 
      length: 1, 
      convRule: rule7
  }, {
      start: 1425, 
      length: 45, 
      convRule: rule84
  }, {
      start: 1470, 
      length: 1, 
      convRule: rule7
  }, {
      start: 1471, 
      length: 1, 
      convRule: rule84
  }, {
      start: 1472, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1473, 
      length: 2, 
      convRule: rule84
  }, {
      start: 1475, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1476, 
      length: 2, 
      convRule: rule84
  }, {
      start: 1478, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1479, 
      length: 1, 
      convRule: rule84
  }, {
      start: 1488, 
      length: 27, 
      convRule: rule45
  }, {
      start: 1520, 
      length: 3, 
      convRule: rule45
  }, {
      start: 1523, 
      length: 2, 
      convRule: rule2
  }, {
      start: 1536, 
      length: 4, 
      convRule: rule16
  }, {
      start: 1542, 
      length: 3, 
      convRule: rule6
  }, {
      start: 1545, 
      length: 2, 
      convRule: rule2
  }, {
      start: 1547, 
      length: 1, 
      convRule: rule3
  }, {
      start: 1548, 
      length: 2, 
      convRule: rule2
  }, {
      start: 1550, 
      length: 2, 
      convRule: rule13
  }, {
      start: 1552, 
      length: 11, 
      convRule: rule84
  }, {
      start: 1563, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1566, 
      length: 2, 
      convRule: rule2
  }, {
      start: 1568, 
      length: 32, 
      convRule: rule45
  }, {
      start: 1600, 
      length: 1, 
      convRule: rule83
  }, {
      start: 1601, 
      length: 10, 
      convRule: rule45
  }, {
      start: 1611, 
      length: 21, 
      convRule: rule84
  }, {
      start: 1632, 
      length: 10, 
      convRule: rule8
  }, {
      start: 1642, 
      length: 4, 
      convRule: rule2
  }, {
      start: 1646, 
      length: 2, 
      convRule: rule45
  }, {
      start: 1648, 
      length: 1, 
      convRule: rule84
  }, {
      start: 1649, 
      length: 99, 
      convRule: rule45
  }, {
      start: 1748, 
      length: 1, 
      convRule: rule2
  }, {
      start: 1749, 
      length: 1, 
      convRule: rule45
  }, {
      start: 1750, 
      length: 7, 
      convRule: rule84
  }, {
      start: 1757, 
      length: 1, 
      convRule: rule16
  }, {
      start: 1758, 
      length: 1, 
      convRule: rule13
  }, {
      start: 1759, 
      length: 6, 
      convRule: rule84
  }, {
      start: 1765, 
      length: 2, 
      convRule: rule83
  }, {
      start: 1767, 
      length: 2, 
      convRule: rule84
  }, {
      start: 1769, 
      length: 1, 
      convRule: rule13
  }, {
      start: 1770, 
      length: 4, 
      convRule: rule84
  }, {
      start: 1774, 
      length: 2, 
      convRule: rule45
  }, {
      start: 1776, 
      length: 10, 
      convRule: rule8
  }, {
      start: 1786, 
      length: 3, 
      convRule: rule45
  }, {
      start: 1789, 
      length: 2, 
      convRule: rule13
  }, {
      start: 1791, 
      length: 1, 
      convRule: rule45
  }, {
      start: 1792, 
      length: 14, 
      convRule: rule2
  }, {
      start: 1807, 
      length: 1, 
      convRule: rule16
  }, {
      start: 1808, 
      length: 1, 
      convRule: rule45
  }, {
      start: 1809, 
      length: 1, 
      convRule: rule84
  }, {
      start: 1810, 
      length: 30, 
      convRule: rule45
  }, {
      start: 1840, 
      length: 27, 
      convRule: rule84
  }, {
      start: 1869, 
      length: 89, 
      convRule: rule45
  }, {
      start: 1958, 
      length: 11, 
      convRule: rule84
  }, {
      start: 1969, 
      length: 1, 
      convRule: rule45
  }, {
      start: 1984, 
      length: 10, 
      convRule: rule8
  }, {
      start: 1994, 
      length: 33, 
      convRule: rule45
  }, {
      start: 2027, 
      length: 9, 
      convRule: rule84
  }, {
      start: 2036, 
      length: 2, 
      convRule: rule83
  }, {
      start: 2038, 
      length: 1, 
      convRule: rule13
  }, {
      start: 2039, 
      length: 3, 
      convRule: rule2
  }, {
      start: 2042, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2048, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2070, 
      length: 4, 
      convRule: rule84
  }, {
      start: 2074, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2075, 
      length: 9, 
      convRule: rule84
  }, {
      start: 2084, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2085, 
      length: 3, 
      convRule: rule84
  }, {
      start: 2088, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2089, 
      length: 5, 
      convRule: rule84
  }, {
      start: 2096, 
      length: 15, 
      convRule: rule2
  }, {
      start: 2112, 
      length: 25, 
      convRule: rule45
  }, {
      start: 2137, 
      length: 3, 
      convRule: rule84
  }, {
      start: 2142, 
      length: 1, 
      convRule: rule2
  }, {
      start: 2304, 
      length: 3, 
      convRule: rule84
  }, {
      start: 2307, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2308, 
      length: 54, 
      convRule: rule45
  }, {
      start: 2362, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2363, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2364, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2365, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2366, 
      length: 3, 
      convRule: rule114
  }, {
      start: 2369, 
      length: 8, 
      convRule: rule84
  }, {
      start: 2377, 
      length: 4, 
      convRule: rule114
  }, {
      start: 2381, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2382, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2384, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2385, 
      length: 7, 
      convRule: rule84
  }, {
      start: 2392, 
      length: 10, 
      convRule: rule45
  }, {
      start: 2402, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2404, 
      length: 2, 
      convRule: rule2
  }, {
      start: 2406, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2416, 
      length: 1, 
      convRule: rule2
  }, {
      start: 2417, 
      length: 1, 
      convRule: rule83
  }, {
      start: 2418, 
      length: 6, 
      convRule: rule45
  }, {
      start: 2425, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2433, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2434, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2437, 
      length: 8, 
      convRule: rule45
  }, {
      start: 2447, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2451, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2474, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2482, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2486, 
      length: 4, 
      convRule: rule45
  }, {
      start: 2492, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2493, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2494, 
      length: 3, 
      convRule: rule114
  }, {
      start: 2497, 
      length: 4, 
      convRule: rule84
  }, {
      start: 2503, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2507, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2509, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2510, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2519, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2524, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2527, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2530, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2534, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2544, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2546, 
      length: 2, 
      convRule: rule3
  }, {
      start: 2548, 
      length: 6, 
      convRule: rule17
  }, {
      start: 2554, 
      length: 1, 
      convRule: rule13
  }, {
      start: 2555, 
      length: 1, 
      convRule: rule3
  }, {
      start: 2561, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2563, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2565, 
      length: 6, 
      convRule: rule45
  }, {
      start: 2575, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2579, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2602, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2610, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2613, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2616, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2620, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2622, 
      length: 3, 
      convRule: rule114
  }, {
      start: 2625, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2631, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2635, 
      length: 3, 
      convRule: rule84
  }, {
      start: 2641, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2649, 
      length: 4, 
      convRule: rule45
  }, {
      start: 2654, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2662, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2672, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2674, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2677, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2689, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2691, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2693, 
      length: 9, 
      convRule: rule45
  }, {
      start: 2703, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2707, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2730, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2738, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2741, 
      length: 5, 
      convRule: rule45
  }, {
      start: 2748, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2749, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2750, 
      length: 3, 
      convRule: rule114
  }, {
      start: 2753, 
      length: 5, 
      convRule: rule84
  }, {
      start: 2759, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2761, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2763, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2765, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2768, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2784, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2786, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2790, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2801, 
      length: 1, 
      convRule: rule3
  }, {
      start: 2817, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2818, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2821, 
      length: 8, 
      convRule: rule45
  }, {
      start: 2831, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2835, 
      length: 22, 
      convRule: rule45
  }, {
      start: 2858, 
      length: 7, 
      convRule: rule45
  }, {
      start: 2866, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2869, 
      length: 5, 
      convRule: rule45
  }, {
      start: 2876, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2877, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2878, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2879, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2880, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2881, 
      length: 4, 
      convRule: rule84
  }, {
      start: 2887, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2891, 
      length: 2, 
      convRule: rule114
  }, {
      start: 2893, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2902, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2903, 
      length: 1, 
      convRule: rule114
  }, {
      start: 2908, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2911, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2914, 
      length: 2, 
      convRule: rule84
  }, {
      start: 2918, 
      length: 10, 
      convRule: rule8
  }, {
      start: 2928, 
      length: 1, 
      convRule: rule13
  }, {
      start: 2929, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2930, 
      length: 6, 
      convRule: rule17
  }, {
      start: 2946, 
      length: 1, 
      convRule: rule84
  }, {
      start: 2947, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2949, 
      length: 6, 
      convRule: rule45
  }, {
      start: 2958, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2962, 
      length: 4, 
      convRule: rule45
  }, {
      start: 2969, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2972, 
      length: 1, 
      convRule: rule45
  }, {
      start: 2974, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2979, 
      length: 2, 
      convRule: rule45
  }, {
      start: 2984, 
      length: 3, 
      convRule: rule45
  }, {
      start: 2990, 
      length: 12, 
      convRule: rule45
  }, {
      start: 3006, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3008, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3009, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3014, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3018, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3021, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3024, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3031, 
      length: 1, 
      convRule: rule114
  }, {
      start: 3046, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3056, 
      length: 3, 
      convRule: rule17
  }, {
      start: 3059, 
      length: 6, 
      convRule: rule13
  }, {
      start: 3065, 
      length: 1, 
      convRule: rule3
  }, {
      start: 3066, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3073, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3077, 
      length: 8, 
      convRule: rule45
  }, {
      start: 3086, 
      length: 3, 
      convRule: rule45
  }, {
      start: 3090, 
      length: 23, 
      convRule: rule45
  }, {
      start: 3114, 
      length: 10, 
      convRule: rule45
  }, {
      start: 3125, 
      length: 5, 
      convRule: rule45
  }, {
      start: 3133, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3134, 
      length: 3, 
      convRule: rule84
  }, {
      start: 3137, 
      length: 4, 
      convRule: rule114
  }, {
      start: 3142, 
      length: 3, 
      convRule: rule84
  }, {
      start: 3146, 
      length: 4, 
      convRule: rule84
  }, {
      start: 3157, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3160, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3168, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3170, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3174, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3192, 
      length: 7, 
      convRule: rule17
  }, {
      start: 3199, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3202, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3205, 
      length: 8, 
      convRule: rule45
  }, {
      start: 3214, 
      length: 3, 
      convRule: rule45
  }, {
      start: 3218, 
      length: 23, 
      convRule: rule45
  }, {
      start: 3242, 
      length: 10, 
      convRule: rule45
  }, {
      start: 3253, 
      length: 5, 
      convRule: rule45
  }, {
      start: 3260, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3261, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3262, 
      length: 1, 
      convRule: rule114
  }, {
      start: 3263, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3264, 
      length: 5, 
      convRule: rule114
  }, {
      start: 3270, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3271, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3274, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3276, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3285, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3294, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3296, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3298, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3302, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3313, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3330, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3333, 
      length: 8, 
      convRule: rule45
  }, {
      start: 3342, 
      length: 3, 
      convRule: rule45
  }, {
      start: 3346, 
      length: 41, 
      convRule: rule45
  }, {
      start: 3389, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3390, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3393, 
      length: 4, 
      convRule: rule84
  }, {
      start: 3398, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3402, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3405, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3406, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3415, 
      length: 1, 
      convRule: rule114
  }, {
      start: 3424, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3426, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3430, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3440, 
      length: 6, 
      convRule: rule17
  }, {
      start: 3449, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3450, 
      length: 6, 
      convRule: rule45
  }, {
      start: 3458, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3461, 
      length: 18, 
      convRule: rule45
  }, {
      start: 3482, 
      length: 24, 
      convRule: rule45
  }, {
      start: 3507, 
      length: 9, 
      convRule: rule45
  }, {
      start: 3517, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3520, 
      length: 7, 
      convRule: rule45
  }, {
      start: 3530, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3535, 
      length: 3, 
      convRule: rule114
  }, {
      start: 3538, 
      length: 3, 
      convRule: rule84
  }, {
      start: 3542, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3544, 
      length: 8, 
      convRule: rule114
  }, {
      start: 3570, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3572, 
      length: 1, 
      convRule: rule2
  }, {
      start: 3585, 
      length: 48, 
      convRule: rule45
  }, {
      start: 3633, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3634, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3636, 
      length: 7, 
      convRule: rule84
  }, {
      start: 3647, 
      length: 1, 
      convRule: rule3
  }, {
      start: 3648, 
      length: 6, 
      convRule: rule45
  }, {
      start: 3654, 
      length: 1, 
      convRule: rule83
  }, {
      start: 3655, 
      length: 8, 
      convRule: rule84
  }, {
      start: 3663, 
      length: 1, 
      convRule: rule2
  }, {
      start: 3664, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3674, 
      length: 2, 
      convRule: rule2
  }, {
      start: 3713, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3716, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3719, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3722, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3725, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3732, 
      length: 4, 
      convRule: rule45
  }, {
      start: 3737, 
      length: 7, 
      convRule: rule45
  }, {
      start: 3745, 
      length: 3, 
      convRule: rule45
  }, {
      start: 3749, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3751, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3754, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3757, 
      length: 4, 
      convRule: rule45
  }, {
      start: 3761, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3762, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3764, 
      length: 6, 
      convRule: rule84
  }, {
      start: 3771, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3773, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3776, 
      length: 5, 
      convRule: rule45
  }, {
      start: 3782, 
      length: 1, 
      convRule: rule83
  }, {
      start: 3784, 
      length: 6, 
      convRule: rule84
  }, {
      start: 3792, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3804, 
      length: 2, 
      convRule: rule45
  }, {
      start: 3840, 
      length: 1, 
      convRule: rule45
  }, {
      start: 3841, 
      length: 3, 
      convRule: rule13
  }, {
      start: 3844, 
      length: 15, 
      convRule: rule2
  }, {
      start: 3859, 
      length: 5, 
      convRule: rule13
  }, {
      start: 3864, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3866, 
      length: 6, 
      convRule: rule13
  }, {
      start: 3872, 
      length: 10, 
      convRule: rule8
  }, {
      start: 3882, 
      length: 10, 
      convRule: rule17
  }, {
      start: 3892, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3893, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3894, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3895, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3896, 
      length: 1, 
      convRule: rule13
  }, {
      start: 3897, 
      length: 1, 
      convRule: rule84
  }, {
      start: 3898, 
      length: 1, 
      convRule: rule4
  }, {
      start: 3899, 
      length: 1, 
      convRule: rule5
  }, {
      start: 3900, 
      length: 1, 
      convRule: rule4
  }, {
      start: 3901, 
      length: 1, 
      convRule: rule5
  }, {
      start: 3902, 
      length: 2, 
      convRule: rule114
  }, {
      start: 3904, 
      length: 8, 
      convRule: rule45
  }, {
      start: 3913, 
      length: 36, 
      convRule: rule45
  }, {
      start: 3953, 
      length: 14, 
      convRule: rule84
  }, {
      start: 3967, 
      length: 1, 
      convRule: rule114
  }, {
      start: 3968, 
      length: 5, 
      convRule: rule84
  }, {
      start: 3973, 
      length: 1, 
      convRule: rule2
  }, {
      start: 3974, 
      length: 2, 
      convRule: rule84
  }, {
      start: 3976, 
      length: 5, 
      convRule: rule45
  }, {
      start: 3981, 
      length: 11, 
      convRule: rule84
  }, {
      start: 3993, 
      length: 36, 
      convRule: rule84
  }, {
      start: 4030, 
      length: 8, 
      convRule: rule13
  }, {
      start: 4038, 
      length: 1, 
      convRule: rule84
  }, {
      start: 4039, 
      length: 6, 
      convRule: rule13
  }, {
      start: 4046, 
      length: 2, 
      convRule: rule13
  }, {
      start: 4048, 
      length: 5, 
      convRule: rule2
  }, {
      start: 4053, 
      length: 4, 
      convRule: rule13
  }, {
      start: 4057, 
      length: 2, 
      convRule: rule2
  }, {
      start: 4096, 
      length: 43, 
      convRule: rule45
  }, {
      start: 4139, 
      length: 2, 
      convRule: rule114
  }, {
      start: 4141, 
      length: 4, 
      convRule: rule84
  }, {
      start: 4145, 
      length: 1, 
      convRule: rule114
  }, {
      start: 4146, 
      length: 6, 
      convRule: rule84
  }, {
      start: 4152, 
      length: 1, 
      convRule: rule114
  }, {
      start: 4153, 
      length: 2, 
      convRule: rule84
  }, {
      start: 4155, 
      length: 2, 
      convRule: rule114
  }, {
      start: 4157, 
      length: 2, 
      convRule: rule84
  }, {
      start: 4159, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4160, 
      length: 10, 
      convRule: rule8
  }, {
      start: 4170, 
      length: 6, 
      convRule: rule2
  }, {
      start: 4176, 
      length: 6, 
      convRule: rule45
  }, {
      start: 4182, 
      length: 2, 
      convRule: rule114
  }, {
      start: 4184, 
      length: 2, 
      convRule: rule84
  }, {
      start: 4186, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4190, 
      length: 3, 
      convRule: rule84
  }, {
      start: 4193, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4194, 
      length: 3, 
      convRule: rule114
  }, {
      start: 4197, 
      length: 2, 
      convRule: rule45
  }, {
      start: 4199, 
      length: 7, 
      convRule: rule114
  }, {
      start: 4206, 
      length: 3, 
      convRule: rule45
  }, {
      start: 4209, 
      length: 4, 
      convRule: rule84
  }, {
      start: 4213, 
      length: 13, 
      convRule: rule45
  }, {
      start: 4226, 
      length: 1, 
      convRule: rule84
  }, {
      start: 4227, 
      length: 2, 
      convRule: rule114
  }, {
      start: 4229, 
      length: 2, 
      convRule: rule84
  }, {
      start: 4231, 
      length: 6, 
      convRule: rule114
  }, {
      start: 4237, 
      length: 1, 
      convRule: rule84
  }, {
      start: 4238, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4239, 
      length: 1, 
      convRule: rule114
  }, {
      start: 4240, 
      length: 10, 
      convRule: rule8
  }, {
      start: 4250, 
      length: 3, 
      convRule: rule114
  }, {
      start: 4253, 
      length: 1, 
      convRule: rule84
  }, {
      start: 4254, 
      length: 2, 
      convRule: rule13
  }, {
      start: 4256, 
      length: 38, 
      convRule: rule115
  }, {
      start: 4304, 
      length: 43, 
      convRule: rule45
  }, {
      start: 4347, 
      length: 1, 
      convRule: rule2
  }, {
      start: 4348, 
      length: 1, 
      convRule: rule83
  }, {
      start: 4352, 
      length: 329, 
      convRule: rule45
  }, {
      start: 4682, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4688, 
      length: 7, 
      convRule: rule45
  }, {
      start: 4696, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4698, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4704, 
      length: 41, 
      convRule: rule45
  }, {
      start: 4746, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4752, 
      length: 33, 
      convRule: rule45
  }, {
      start: 4786, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4792, 
      length: 7, 
      convRule: rule45
  }, {
      start: 4800, 
      length: 1, 
      convRule: rule45
  }, {
      start: 4802, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4808, 
      length: 15, 
      convRule: rule45
  }, {
      start: 4824, 
      length: 57, 
      convRule: rule45
  }, {
      start: 4882, 
      length: 4, 
      convRule: rule45
  }, {
      start: 4888, 
      length: 67, 
      convRule: rule45
  }, {
      start: 4957, 
      length: 3, 
      convRule: rule84
  }, {
      start: 4960, 
      length: 1, 
      convRule: rule13
  }, {
      start: 4961, 
      length: 8, 
      convRule: rule2
  }, {
      start: 4969, 
      length: 20, 
      convRule: rule17
  }, {
      start: 4992, 
      length: 16, 
      convRule: rule45
  }, {
      start: 5008, 
      length: 10, 
      convRule: rule13
  }, {
      start: 5024, 
      length: 85, 
      convRule: rule45
  }, {
      start: 5120, 
      length: 1, 
      convRule: rule7
  }, {
      start: 5121, 
      length: 620, 
      convRule: rule45
  }, {
      start: 5741, 
      length: 2, 
      convRule: rule2
  }, {
      start: 5743, 
      length: 17, 
      convRule: rule45
  }, {
      start: 5760, 
      length: 1, 
      convRule: rule1
  }, {
      start: 5761, 
      length: 26, 
      convRule: rule45
  }, {
      start: 5787, 
      length: 1, 
      convRule: rule4
  }, {
      start: 5788, 
      length: 1, 
      convRule: rule5
  }, {
      start: 5792, 
      length: 75, 
      convRule: rule45
  }, {
      start: 5867, 
      length: 3, 
      convRule: rule2
  }, {
      start: 5870, 
      length: 3, 
      convRule: rule116
  }, {
      start: 5888, 
      length: 13, 
      convRule: rule45
  }, {
      start: 5902, 
      length: 4, 
      convRule: rule45
  }, {
      start: 5906, 
      length: 3, 
      convRule: rule84
  }, {
      start: 5920, 
      length: 18, 
      convRule: rule45
  }, {
      start: 5938, 
      length: 3, 
      convRule: rule84
  }, {
      start: 5941, 
      length: 2, 
      convRule: rule2
  }, {
      start: 5952, 
      length: 18, 
      convRule: rule45
  }, {
      start: 5970, 
      length: 2, 
      convRule: rule84
  }, {
      start: 5984, 
      length: 13, 
      convRule: rule45
  }, {
      start: 5998, 
      length: 3, 
      convRule: rule45
  }, {
      start: 6002, 
      length: 2, 
      convRule: rule84
  }, {
      start: 6016, 
      length: 52, 
      convRule: rule45
  }, {
      start: 6068, 
      length: 2, 
      convRule: rule16
  }, {
      start: 6070, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6071, 
      length: 7, 
      convRule: rule84
  }, {
      start: 6078, 
      length: 8, 
      convRule: rule114
  }, {
      start: 6086, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6087, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6089, 
      length: 11, 
      convRule: rule84
  }, {
      start: 6100, 
      length: 3, 
      convRule: rule2
  }, {
      start: 6103, 
      length: 1, 
      convRule: rule83
  }, {
      start: 6104, 
      length: 3, 
      convRule: rule2
  }, {
      start: 6107, 
      length: 1, 
      convRule: rule3
  }, {
      start: 6108, 
      length: 1, 
      convRule: rule45
  }, {
      start: 6109, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6112, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6128, 
      length: 10, 
      convRule: rule17
  }, {
      start: 6144, 
      length: 6, 
      convRule: rule2
  }, {
      start: 6150, 
      length: 1, 
      convRule: rule7
  }, {
      start: 6151, 
      length: 4, 
      convRule: rule2
  }, {
      start: 6155, 
      length: 3, 
      convRule: rule84
  }, {
      start: 6158, 
      length: 1, 
      convRule: rule1
  }, {
      start: 6160, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6176, 
      length: 35, 
      convRule: rule45
  }, {
      start: 6211, 
      length: 1, 
      convRule: rule83
  }, {
      start: 6212, 
      length: 52, 
      convRule: rule45
  }, {
      start: 6272, 
      length: 41, 
      convRule: rule45
  }, {
      start: 6313, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6314, 
      length: 1, 
      convRule: rule45
  }, {
      start: 6320, 
      length: 70, 
      convRule: rule45
  }, {
      start: 6400, 
      length: 29, 
      convRule: rule45
  }, {
      start: 6432, 
      length: 3, 
      convRule: rule84
  }, {
      start: 6435, 
      length: 4, 
      convRule: rule114
  }, {
      start: 6439, 
      length: 2, 
      convRule: rule84
  }, {
      start: 6441, 
      length: 3, 
      convRule: rule114
  }, {
      start: 6448, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6450, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6451, 
      length: 6, 
      convRule: rule114
  }, {
      start: 6457, 
      length: 3, 
      convRule: rule84
  }, {
      start: 6464, 
      length: 1, 
      convRule: rule13
  }, {
      start: 6468, 
      length: 2, 
      convRule: rule2
  }, {
      start: 6470, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6480, 
      length: 30, 
      convRule: rule45
  }, {
      start: 6512, 
      length: 5, 
      convRule: rule45
  }, {
      start: 6528, 
      length: 44, 
      convRule: rule45
  }, {
      start: 6576, 
      length: 17, 
      convRule: rule114
  }, {
      start: 6593, 
      length: 7, 
      convRule: rule45
  }, {
      start: 6600, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6608, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6618, 
      length: 1, 
      convRule: rule17
  }, {
      start: 6622, 
      length: 34, 
      convRule: rule13
  }, {
      start: 6656, 
      length: 23, 
      convRule: rule45
  }, {
      start: 6679, 
      length: 2, 
      convRule: rule84
  }, {
      start: 6681, 
      length: 3, 
      convRule: rule114
  }, {
      start: 6686, 
      length: 2, 
      convRule: rule2
  }, {
      start: 6688, 
      length: 53, 
      convRule: rule45
  }, {
      start: 6741, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6742, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6743, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6744, 
      length: 7, 
      convRule: rule84
  }, {
      start: 6752, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6753, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6754, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6755, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6757, 
      length: 8, 
      convRule: rule84
  }, {
      start: 6765, 
      length: 6, 
      convRule: rule114
  }, {
      start: 6771, 
      length: 10, 
      convRule: rule84
  }, {
      start: 6783, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6784, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6800, 
      length: 10, 
      convRule: rule8
  }, {
      start: 6816, 
      length: 7, 
      convRule: rule2
  }, {
      start: 6823, 
      length: 1, 
      convRule: rule83
  }, {
      start: 6824, 
      length: 6, 
      convRule: rule2
  }, {
      start: 6912, 
      length: 4, 
      convRule: rule84
  }, {
      start: 6916, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6917, 
      length: 47, 
      convRule: rule45
  }, {
      start: 6964, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6965, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6966, 
      length: 5, 
      convRule: rule84
  }, {
      start: 6971, 
      length: 1, 
      convRule: rule114
  }, {
      start: 6972, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6973, 
      length: 5, 
      convRule: rule114
  }, {
      start: 6978, 
      length: 1, 
      convRule: rule84
  }, {
      start: 6979, 
      length: 2, 
      convRule: rule114
  }, {
      start: 6981, 
      length: 7, 
      convRule: rule45
  }, {
      start: 6992, 
      length: 10, 
      convRule: rule8
  }, {
      start: 7002, 
      length: 7, 
      convRule: rule2
  }, {
      start: 7009, 
      length: 10, 
      convRule: rule13
  }, {
      start: 7019, 
      length: 9, 
      convRule: rule84
  }, {
      start: 7028, 
      length: 9, 
      convRule: rule13
  }, {
      start: 7040, 
      length: 2, 
      convRule: rule84
  }, {
      start: 7042, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7043, 
      length: 30, 
      convRule: rule45
  }, {
      start: 7073, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7074, 
      length: 4, 
      convRule: rule84
  }, {
      start: 7078, 
      length: 2, 
      convRule: rule114
  }, {
      start: 7080, 
      length: 2, 
      convRule: rule84
  }, {
      start: 7082, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7086, 
      length: 2, 
      convRule: rule45
  }, {
      start: 7088, 
      length: 10, 
      convRule: rule8
  }, {
      start: 7104, 
      length: 38, 
      convRule: rule45
  }, {
      start: 7142, 
      length: 1, 
      convRule: rule84
  }, {
      start: 7143, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7144, 
      length: 2, 
      convRule: rule84
  }, {
      start: 7146, 
      length: 3, 
      convRule: rule114
  }, {
      start: 7149, 
      length: 1, 
      convRule: rule84
  }, {
      start: 7150, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7151, 
      length: 3, 
      convRule: rule84
  }, {
      start: 7154, 
      length: 2, 
      convRule: rule114
  }, {
      start: 7164, 
      length: 4, 
      convRule: rule2
  }, {
      start: 7168, 
      length: 36, 
      convRule: rule45
  }, {
      start: 7204, 
      length: 8, 
      convRule: rule114
  }, {
      start: 7212, 
      length: 8, 
      convRule: rule84
  }, {
      start: 7220, 
      length: 2, 
      convRule: rule114
  }, {
      start: 7222, 
      length: 2, 
      convRule: rule84
  }, {
      start: 7227, 
      length: 5, 
      convRule: rule2
  }, {
      start: 7232, 
      length: 10, 
      convRule: rule8
  }, {
      start: 7245, 
      length: 3, 
      convRule: rule45
  }, {
      start: 7248, 
      length: 10, 
      convRule: rule8
  }, {
      start: 7258, 
      length: 30, 
      convRule: rule45
  }, {
      start: 7288, 
      length: 6, 
      convRule: rule83
  }, {
      start: 7294, 
      length: 2, 
      convRule: rule2
  }, {
      start: 7376, 
      length: 3, 
      convRule: rule84
  }, {
      start: 7379, 
      length: 1, 
      convRule: rule2
  }, {
      start: 7380, 
      length: 13, 
      convRule: rule84
  }, {
      start: 7393, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7394, 
      length: 7, 
      convRule: rule84
  }, {
      start: 7401, 
      length: 4, 
      convRule: rule45
  }, {
      start: 7405, 
      length: 1, 
      convRule: rule84
  }, {
      start: 7406, 
      length: 4, 
      convRule: rule45
  }, {
      start: 7410, 
      length: 1, 
      convRule: rule114
  }, {
      start: 7424, 
      length: 44, 
      convRule: rule14
  }, {
      start: 7468, 
      length: 54, 
      convRule: rule83
  }, {
      start: 7522, 
      length: 22, 
      convRule: rule14
  }, {
      start: 7544, 
      length: 1, 
      convRule: rule83
  }, {
      start: 7545, 
      length: 1, 
      convRule: rule117
  }, {
      start: 7546, 
      length: 3, 
      convRule: rule14
  }, {
      start: 7549, 
      length: 1, 
      convRule: rule118
  }, {
      start: 7550, 
      length: 29, 
      convRule: rule14
  }, {
      start: 7579, 
      length: 37, 
      convRule: rule83
  }, {
      start: 7616, 
      length: 39, 
      convRule: rule84
  }, {
      start: 7676, 
      length: 4, 
      convRule: rule84
  }, {
      start: 7680, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7681, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7682, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7683, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7684, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7685, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7686, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7687, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7688, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7689, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7690, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7691, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7692, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7693, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7694, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7695, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7696, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7697, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7698, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7699, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7700, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7701, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7702, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7703, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7704, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7705, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7706, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7707, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7708, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7709, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7710, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7711, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7712, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7713, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7714, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7715, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7716, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7717, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7718, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7719, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7720, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7721, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7722, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7723, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7724, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7725, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7726, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7727, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7728, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7729, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7730, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7731, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7732, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7733, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7734, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7735, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7736, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7737, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7738, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7739, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7740, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7741, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7742, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7743, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7744, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7745, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7746, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7747, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7748, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7749, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7750, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7751, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7752, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7753, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7754, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7755, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7756, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7757, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7758, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7759, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7760, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7761, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7762, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7763, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7764, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7765, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7766, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7767, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7768, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7769, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7770, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7771, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7772, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7773, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7774, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7775, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7776, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7777, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7778, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7779, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7780, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7781, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7782, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7783, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7784, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7785, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7786, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7787, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7788, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7789, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7790, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7791, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7792, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7793, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7794, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7795, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7796, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7797, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7798, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7799, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7800, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7801, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7802, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7803, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7804, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7805, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7806, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7807, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7808, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7809, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7810, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7811, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7812, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7813, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7814, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7815, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7816, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7817, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7818, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7819, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7820, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7821, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7822, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7823, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7824, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7825, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7826, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7827, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7828, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7829, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7830, 
      length: 5, 
      convRule: rule14
  }, {
      start: 7835, 
      length: 1, 
      convRule: rule119
  }, {
      start: 7836, 
      length: 2, 
      convRule: rule14
  }, {
      start: 7838, 
      length: 1, 
      convRule: rule120
  }, {
      start: 7839, 
      length: 1, 
      convRule: rule14
  }, {
      start: 7840, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7841, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7842, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7843, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7844, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7845, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7846, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7847, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7848, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7849, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7850, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7851, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7852, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7853, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7854, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7855, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7856, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7857, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7858, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7859, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7860, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7861, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7862, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7863, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7864, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7865, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7866, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7867, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7868, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7869, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7870, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7871, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7872, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7873, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7874, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7875, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7876, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7877, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7878, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7879, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7884, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7885, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7888, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7889, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7890, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7891, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7892, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7893, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7894, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7895, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7896, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7897, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7898, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7899, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7900, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7901, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7902, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7903, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7904, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7905, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7906, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7907, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7908, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7909, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7910, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7911, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7912, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7913, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7914, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7915, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7916, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7917, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7918, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7919, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7920, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7921, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7922, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7923, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7924, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7925, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7926, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7927, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7928, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7929, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7930, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7931, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7932, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7933, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7934, 
      length: 1, 
      convRule: rule21
  }, {
      start: 7935, 
      length: 1, 
      convRule: rule22
  }, {
      start: 7936, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7944, 
      length: 8, 
      convRule: rule122
  }, {
      start: 7952, 
      length: 6, 
      convRule: rule121
  }, {
      start: 7960, 
      length: 6, 
      convRule: rule122
  }, {
      start: 7968, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7976, 
      length: 8, 
      convRule: rule122
  }, {
      start: 7984, 
      length: 8, 
      convRule: rule121
  }, {
      start: 7992, 
      length: 8, 
      convRule: rule122
  }, {
      start: 8000, 
      length: 6, 
      convRule: rule121
  }, {
      start: 8008, 
      length: 6, 
      convRule: rule122
  }, {
      start: 8016, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8017, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8018, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8019, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8020, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8021, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8022, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8023, 
      length: 1, 
      convRule: rule121
  }, {
      start: 8025, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8027, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8029, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8031, 
      length: 1, 
      convRule: rule122
  }, {
      start: 8032, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8040, 
      length: 8, 
      convRule: rule122
  }, {
      start: 8048, 
      length: 2, 
      convRule: rule123
  }, {
      start: 8050, 
      length: 4, 
      convRule: rule124
  }, {
      start: 8054, 
      length: 2, 
      convRule: rule125
  }, {
      start: 8056, 
      length: 2, 
      convRule: rule126
  }, {
      start: 8058, 
      length: 2, 
      convRule: rule127
  }, {
      start: 8060, 
      length: 2, 
      convRule: rule128
  }, {
      start: 8064, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8072, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8080, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8088, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8096, 
      length: 8, 
      convRule: rule121
  }, {
      start: 8104, 
      length: 8, 
      convRule: rule129
  }, {
      start: 8112, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8114, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8115, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8116, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8118, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8120, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8122, 
      length: 2, 
      convRule: rule131
  }, {
      start: 8124, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8125, 
      length: 1, 
      convRule: rule10
  }, {
      start: 8126, 
      length: 1, 
      convRule: rule133
  }, {
      start: 8127, 
      length: 3, 
      convRule: rule10
  }, {
      start: 8130, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8131, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8132, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8134, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8136, 
      length: 4, 
      convRule: rule134
  }, {
      start: 8140, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8141, 
      length: 3, 
      convRule: rule10
  }, {
      start: 8144, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8146, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8150, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8152, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8154, 
      length: 2, 
      convRule: rule135
  }, {
      start: 8157, 
      length: 3, 
      convRule: rule10
  }, {
      start: 8160, 
      length: 2, 
      convRule: rule121
  }, {
      start: 8162, 
      length: 3, 
      convRule: rule14
  }, {
      start: 8165, 
      length: 1, 
      convRule: rule104
  }, {
      start: 8166, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8168, 
      length: 2, 
      convRule: rule122
  }, {
      start: 8170, 
      length: 2, 
      convRule: rule136
  }, {
      start: 8172, 
      length: 1, 
      convRule: rule107
  }, {
      start: 8173, 
      length: 3, 
      convRule: rule10
  }, {
      start: 8178, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8179, 
      length: 1, 
      convRule: rule130
  }, {
      start: 8180, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8182, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8184, 
      length: 2, 
      convRule: rule137
  }, {
      start: 8186, 
      length: 2, 
      convRule: rule138
  }, {
      start: 8188, 
      length: 1, 
      convRule: rule132
  }, {
      start: 8189, 
      length: 2, 
      convRule: rule10
  }, {
      start: 8192, 
      length: 11, 
      convRule: rule1
  }, {
      start: 8203, 
      length: 5, 
      convRule: rule16
  }, {
      start: 8208, 
      length: 6, 
      convRule: rule7
  }, {
      start: 8214, 
      length: 2, 
      convRule: rule2
  }, {
      start: 8216, 
      length: 1, 
      convRule: rule15
  }, {
      start: 8217, 
      length: 1, 
      convRule: rule19
  }, {
      start: 8218, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8219, 
      length: 2, 
      convRule: rule15
  }, {
      start: 8221, 
      length: 1, 
      convRule: rule19
  }, {
      start: 8222, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8223, 
      length: 1, 
      convRule: rule15
  }, {
      start: 8224, 
      length: 8, 
      convRule: rule2
  }, {
      start: 8232, 
      length: 1, 
      convRule: rule139
  }, {
      start: 8233, 
      length: 1, 
      convRule: rule140
  }, {
      start: 8234, 
      length: 5, 
      convRule: rule16
  }, {
      start: 8239, 
      length: 1, 
      convRule: rule1
  }, {
      start: 8240, 
      length: 9, 
      convRule: rule2
  }, {
      start: 8249, 
      length: 1, 
      convRule: rule15
  }, {
      start: 8250, 
      length: 1, 
      convRule: rule19
  }, {
      start: 8251, 
      length: 4, 
      convRule: rule2
  }, {
      start: 8255, 
      length: 2, 
      convRule: rule11
  }, {
      start: 8257, 
      length: 3, 
      convRule: rule2
  }, {
      start: 8260, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8261, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8262, 
      length: 1, 
      convRule: rule5
  }, {
      start: 8263, 
      length: 11, 
      convRule: rule2
  }, {
      start: 8274, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8275, 
      length: 1, 
      convRule: rule2
  }, {
      start: 8276, 
      length: 1, 
      convRule: rule11
  }, {
      start: 8277, 
      length: 10, 
      convRule: rule2
  }, {
      start: 8287, 
      length: 1, 
      convRule: rule1
  }, {
      start: 8288, 
      length: 5, 
      convRule: rule16
  }, {
      start: 8298, 
      length: 6, 
      convRule: rule16
  }, {
      start: 8304, 
      length: 1, 
      convRule: rule17
  }, {
      start: 8305, 
      length: 1, 
      convRule: rule83
  }, {
      start: 8308, 
      length: 6, 
      convRule: rule17
  }, {
      start: 8314, 
      length: 3, 
      convRule: rule6
  }, {
      start: 8317, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8318, 
      length: 1, 
      convRule: rule5
  }, {
      start: 8319, 
      length: 1, 
      convRule: rule83
  }, {
      start: 8320, 
      length: 10, 
      convRule: rule17
  }, {
      start: 8330, 
      length: 3, 
      convRule: rule6
  }, {
      start: 8333, 
      length: 1, 
      convRule: rule4
  }, {
      start: 8334, 
      length: 1, 
      convRule: rule5
  }, {
      start: 8336, 
      length: 13, 
      convRule: rule83
  }, {
      start: 8352, 
      length: 26, 
      convRule: rule3
  }, {
      start: 8400, 
      length: 13, 
      convRule: rule84
  }, {
      start: 8413, 
      length: 4, 
      convRule: rule109
  }, {
      start: 8417, 
      length: 1, 
      convRule: rule84
  }, {
      start: 8418, 
      length: 3, 
      convRule: rule109
  }, {
      start: 8421, 
      length: 12, 
      convRule: rule84
  }, {
      start: 8448, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8450, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8451, 
      length: 4, 
      convRule: rule13
  }, {
      start: 8455, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8456, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8458, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8459, 
      length: 3, 
      convRule: rule98
  }, {
      start: 8462, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8464, 
      length: 3, 
      convRule: rule98
  }, {
      start: 8467, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8468, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8469, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8470, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8472, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8473, 
      length: 5, 
      convRule: rule98
  }, {
      start: 8478, 
      length: 6, 
      convRule: rule13
  }, {
      start: 8484, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8485, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8486, 
      length: 1, 
      convRule: rule141
  }, {
      start: 8487, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8488, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8489, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8490, 
      length: 1, 
      convRule: rule142
  }, {
      start: 8491, 
      length: 1, 
      convRule: rule143
  }, {
      start: 8492, 
      length: 2, 
      convRule: rule98
  }, {
      start: 8494, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8495, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8496, 
      length: 2, 
      convRule: rule98
  }, {
      start: 8498, 
      length: 1, 
      convRule: rule144
  }, {
      start: 8499, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8500, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8501, 
      length: 4, 
      convRule: rule45
  }, {
      start: 8505, 
      length: 1, 
      convRule: rule14
  }, {
      start: 8506, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8508, 
      length: 2, 
      convRule: rule14
  }, {
      start: 8510, 
      length: 2, 
      convRule: rule98
  }, {
      start: 8512, 
      length: 5, 
      convRule: rule6
  }, {
      start: 8517, 
      length: 1, 
      convRule: rule98
  }, {
      start: 8518, 
      length: 4, 
      convRule: rule14
  }, {
      start: 8522, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8523, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8524, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8526, 
      length: 1, 
      convRule: rule145
  }, {
      start: 8527, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8528, 
      length: 16, 
      convRule: rule17
  }, {
      start: 8544, 
      length: 16, 
      convRule: rule146
  }, {
      start: 8560, 
      length: 16, 
      convRule: rule147
  }, {
      start: 8576, 
      length: 3, 
      convRule: rule116
  }, {
      start: 8579, 
      length: 1, 
      convRule: rule21
  }, {
      start: 8580, 
      length: 1, 
      convRule: rule22
  }, {
      start: 8581, 
      length: 4, 
      convRule: rule116
  }, {
      start: 8585, 
      length: 1, 
      convRule: rule17
  }, {
      start: 8592, 
      length: 5, 
      convRule: rule6
  }, {
      start: 8597, 
      length: 5, 
      convRule: rule13
  }, {
      start: 8602, 
      length: 2, 
      convRule: rule6
  }, {
      start: 8604, 
      length: 4, 
      convRule: rule13
  }, {
      start: 8608, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8609, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8611, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8612, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8614, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8615, 
      length: 7, 
      convRule: rule13
  }, {
      start: 8622, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8623, 
      length: 31, 
      convRule: rule13
  }, {
      start: 8654, 
      length: 2, 
      convRule: rule6
  }, {
      start: 8656, 
      length: 2, 
      convRule: rule13
  }, {
      start: 8658, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8659, 
      length: 1, 
      convRule: rule13
  }, {
      start: 8660, 
      length: 1, 
      convRule: rule6
  }, {
      start: 8661, 
      length: 31, 
      convRule: rule13
  }, {
      start: 8692, 
      length: 268, 
      convRule: rule6
  }, {
      start: 8960, 
      length: 8, 
      convRule: rule13
  }, {
      start: 8968, 
      length: 4, 
      convRule: rule6
  }, {
      start: 8972, 
      length: 20, 
      convRule: rule13
  }, {
      start: 8992, 
      length: 2, 
      convRule: rule6
  }, {
      start: 8994, 
      length: 7, 
      convRule: rule13
  }, {
      start: 9001, 
      length: 1, 
      convRule: rule4
  }, {
      start: 9002, 
      length: 1, 
      convRule: rule5
  }, {
      start: 9003, 
      length: 81, 
      convRule: rule13
  }, {
      start: 9084, 
      length: 1, 
      convRule: rule6
  }, {
      start: 9085, 
      length: 30, 
      convRule: rule13
  }, {
      start: 9115, 
      length: 25, 
      convRule: rule6
  }, {
      start: 9140, 
      length: 40, 
      convRule: rule13
  }, {
      start: 9180, 
      length: 6, 
      convRule: rule6
  }, {
      start: 9186, 
      length: 18, 
      convRule: rule13
  }, {
      start: 9216, 
      length: 39, 
      convRule: rule13
  }, {
      start: 9280, 
      length: 11, 
      convRule: rule13
  }, {
      start: 9312, 
      length: 60, 
      convRule: rule17
  }, {
      start: 9372, 
      length: 26, 
      convRule: rule13
  }, {
      start: 9398, 
      length: 26, 
      convRule: rule148
  }, {
      start: 9424, 
      length: 26, 
      convRule: rule149
  }, {
      start: 9450, 
      length: 22, 
      convRule: rule17
  }, {
      start: 9472, 
      length: 183, 
      convRule: rule13
  }, {
      start: 9655, 
      length: 1, 
      convRule: rule6
  }, {
      start: 9656, 
      length: 9, 
      convRule: rule13
  }, {
      start: 9665, 
      length: 1, 
      convRule: rule6
  }, {
      start: 9666, 
      length: 54, 
      convRule: rule13
  }, {
      start: 9720, 
      length: 8, 
      convRule: rule6
  }, {
      start: 9728, 
      length: 111, 
      convRule: rule13
  }, {
      start: 9839, 
      length: 1, 
      convRule: rule6
  }, {
      start: 9840, 
      length: 144, 
      convRule: rule13
  }, {
      start: 9985, 
      length: 103, 
      convRule: rule13
  }, {
      start: 10088, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10089, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10090, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10091, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10092, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10093, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10094, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10095, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10096, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10097, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10098, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10099, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10100, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10101, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10102, 
      length: 30, 
      convRule: rule17
  }, {
      start: 10132, 
      length: 44, 
      convRule: rule13
  }, {
      start: 10176, 
      length: 5, 
      convRule: rule6
  }, {
      start: 10181, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10182, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10183, 
      length: 4, 
      convRule: rule6
  }, {
      start: 10188, 
      length: 1, 
      convRule: rule6
  }, {
      start: 10190, 
      length: 24, 
      convRule: rule6
  }, {
      start: 10214, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10215, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10216, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10217, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10218, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10219, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10220, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10221, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10222, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10223, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10224, 
      length: 16, 
      convRule: rule6
  }, {
      start: 10240, 
      length: 256, 
      convRule: rule13
  }, {
      start: 10496, 
      length: 131, 
      convRule: rule6
  }, {
      start: 10627, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10628, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10629, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10630, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10631, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10632, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10633, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10634, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10635, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10636, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10637, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10638, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10639, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10640, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10641, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10642, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10643, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10644, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10645, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10646, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10647, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10648, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10649, 
      length: 63, 
      convRule: rule6
  }, {
      start: 10712, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10713, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10714, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10715, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10716, 
      length: 32, 
      convRule: rule6
  }, {
      start: 10748, 
      length: 1, 
      convRule: rule4
  }, {
      start: 10749, 
      length: 1, 
      convRule: rule5
  }, {
      start: 10750, 
      length: 258, 
      convRule: rule6
  }, {
      start: 11008, 
      length: 48, 
      convRule: rule13
  }, {
      start: 11056, 
      length: 21, 
      convRule: rule6
  }, {
      start: 11077, 
      length: 2, 
      convRule: rule13
  }, {
      start: 11079, 
      length: 6, 
      convRule: rule6
  }, {
      start: 11088, 
      length: 10, 
      convRule: rule13
  }, {
      start: 11264, 
      length: 47, 
      convRule: rule112
  }, {
      start: 11312, 
      length: 47, 
      convRule: rule113
  }, {
      start: 11360, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11361, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11362, 
      length: 1, 
      convRule: rule150
  }, {
      start: 11363, 
      length: 1, 
      convRule: rule151
  }, {
      start: 11364, 
      length: 1, 
      convRule: rule152
  }, {
      start: 11365, 
      length: 1, 
      convRule: rule153
  }, {
      start: 11366, 
      length: 1, 
      convRule: rule154
  }, {
      start: 11367, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11368, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11369, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11370, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11371, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11372, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11373, 
      length: 1, 
      convRule: rule155
  }, {
      start: 11374, 
      length: 1, 
      convRule: rule156
  }, {
      start: 11375, 
      length: 1, 
      convRule: rule157
  }, {
      start: 11376, 
      length: 1, 
      convRule: rule158
  }, {
      start: 11377, 
      length: 1, 
      convRule: rule14
  }, {
      start: 11378, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11379, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11380, 
      length: 1, 
      convRule: rule14
  }, {
      start: 11381, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11382, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11383, 
      length: 6, 
      convRule: rule14
  }, {
      start: 11389, 
      length: 1, 
      convRule: rule83
  }, {
      start: 11390, 
      length: 2, 
      convRule: rule159
  }, {
      start: 11392, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11393, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11394, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11395, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11396, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11397, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11398, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11399, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11400, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11401, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11402, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11403, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11404, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11405, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11406, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11407, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11408, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11409, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11410, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11411, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11412, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11413, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11414, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11415, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11416, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11417, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11418, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11419, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11420, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11421, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11422, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11423, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11424, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11425, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11426, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11427, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11428, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11429, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11430, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11431, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11432, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11433, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11434, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11435, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11436, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11437, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11438, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11439, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11440, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11441, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11442, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11443, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11444, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11445, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11446, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11447, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11448, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11449, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11450, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11451, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11452, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11453, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11454, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11455, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11456, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11457, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11458, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11459, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11460, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11461, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11462, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11463, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11464, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11465, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11466, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11467, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11468, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11469, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11470, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11471, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11472, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11473, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11474, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11475, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11476, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11477, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11478, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11479, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11480, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11481, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11482, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11483, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11484, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11485, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11486, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11487, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11488, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11489, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11490, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11491, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11492, 
      length: 1, 
      convRule: rule14
  }, {
      start: 11493, 
      length: 6, 
      convRule: rule13
  }, {
      start: 11499, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11500, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11501, 
      length: 1, 
      convRule: rule21
  }, {
      start: 11502, 
      length: 1, 
      convRule: rule22
  }, {
      start: 11503, 
      length: 3, 
      convRule: rule84
  }, {
      start: 11513, 
      length: 4, 
      convRule: rule2
  }, {
      start: 11517, 
      length: 1, 
      convRule: rule17
  }, {
      start: 11518, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11520, 
      length: 38, 
      convRule: rule160
  }, {
      start: 11568, 
      length: 54, 
      convRule: rule45
  }, {
      start: 11631, 
      length: 1, 
      convRule: rule83
  }, {
      start: 11632, 
      length: 1, 
      convRule: rule2
  }, {
      start: 11647, 
      length: 1, 
      convRule: rule84
  }, {
      start: 11648, 
      length: 23, 
      convRule: rule45
  }, {
      start: 11680, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11688, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11696, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11704, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11712, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11720, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11728, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11736, 
      length: 7, 
      convRule: rule45
  }, {
      start: 11744, 
      length: 32, 
      convRule: rule84
  }, {
      start: 11776, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11778, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11779, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11780, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11781, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11782, 
      length: 3, 
      convRule: rule2
  }, {
      start: 11785, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11786, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11787, 
      length: 1, 
      convRule: rule2
  }, {
      start: 11788, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11789, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11790, 
      length: 9, 
      convRule: rule2
  }, {
      start: 11799, 
      length: 1, 
      convRule: rule7
  }, {
      start: 11800, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11802, 
      length: 1, 
      convRule: rule7
  }, {
      start: 11803, 
      length: 1, 
      convRule: rule2
  }, {
      start: 11804, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11805, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11806, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11808, 
      length: 1, 
      convRule: rule15
  }, {
      start: 11809, 
      length: 1, 
      convRule: rule19
  }, {
      start: 11810, 
      length: 1, 
      convRule: rule4
  }, {
      start: 11811, 
      length: 1, 
      convRule: rule5
  }, {
      start: 11812, 
      length: 1, 
      convRule: rule4
  }, {
      start: 11813, 
      length: 1, 
      convRule: rule5
  }, {
      start: 11814, 
      length: 1, 
      convRule: rule4
  }, {
      start: 11815, 
      length: 1, 
      convRule: rule5
  }, {
      start: 11816, 
      length: 1, 
      convRule: rule4
  }, {
      start: 11817, 
      length: 1, 
      convRule: rule5
  }, {
      start: 11818, 
      length: 5, 
      convRule: rule2
  }, {
      start: 11823, 
      length: 1, 
      convRule: rule83
  }, {
      start: 11824, 
      length: 2, 
      convRule: rule2
  }, {
      start: 11904, 
      length: 26, 
      convRule: rule13
  }, {
      start: 11931, 
      length: 89, 
      convRule: rule13
  }, {
      start: 12032, 
      length: 214, 
      convRule: rule13
  }, {
      start: 12272, 
      length: 12, 
      convRule: rule13
  }, {
      start: 12288, 
      length: 1, 
      convRule: rule1
  }, {
      start: 12289, 
      length: 3, 
      convRule: rule2
  }, {
      start: 12292, 
      length: 1, 
      convRule: rule13
  }, {
      start: 12293, 
      length: 1, 
      convRule: rule83
  }, {
      start: 12294, 
      length: 1, 
      convRule: rule45
  }, {
      start: 12295, 
      length: 1, 
      convRule: rule116
  }, {
      start: 12296, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12297, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12298, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12299, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12300, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12301, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12302, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12303, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12304, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12305, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12306, 
      length: 2, 
      convRule: rule13
  }, {
      start: 12308, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12309, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12310, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12311, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12312, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12313, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12314, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12315, 
      length: 1, 
      convRule: rule5
  }, {
      start: 12316, 
      length: 1, 
      convRule: rule7
  }, {
      start: 12317, 
      length: 1, 
      convRule: rule4
  }, {
      start: 12318, 
      length: 2, 
      convRule: rule5
  }, {
      start: 12320, 
      length: 1, 
      convRule: rule13
  }, {
      start: 12321, 
      length: 9, 
      convRule: rule116
  }, {
      start: 12330, 
      length: 6, 
      convRule: rule84
  }, {
      start: 12336, 
      length: 1, 
      convRule: rule7
  }, {
      start: 12337, 
      length: 5, 
      convRule: rule83
  }, {
      start: 12342, 
      length: 2, 
      convRule: rule13
  }, {
      start: 12344, 
      length: 3, 
      convRule: rule116
  }, {
      start: 12347, 
      length: 1, 
      convRule: rule83
  }, {
      start: 12348, 
      length: 1, 
      convRule: rule45
  }, {
      start: 12349, 
      length: 1, 
      convRule: rule2
  }, {
      start: 12350, 
      length: 2, 
      convRule: rule13
  }, {
      start: 12353, 
      length: 86, 
      convRule: rule45
  }, {
      start: 12441, 
      length: 2, 
      convRule: rule84
  }, {
      start: 12443, 
      length: 2, 
      convRule: rule10
  }, {
      start: 12445, 
      length: 2, 
      convRule: rule83
  }, {
      start: 12447, 
      length: 1, 
      convRule: rule45
  }, {
      start: 12448, 
      length: 1, 
      convRule: rule7
  }, {
      start: 12449, 
      length: 90, 
      convRule: rule45
  }, {
      start: 12539, 
      length: 1, 
      convRule: rule2
  }, {
      start: 12540, 
      length: 3, 
      convRule: rule83
  }, {
      start: 12543, 
      length: 1, 
      convRule: rule45
  }, {
      start: 12549, 
      length: 41, 
      convRule: rule45
  }, {
      start: 12593, 
      length: 94, 
      convRule: rule45
  }, {
      start: 12688, 
      length: 2, 
      convRule: rule13
  }, {
      start: 12690, 
      length: 4, 
      convRule: rule17
  }, {
      start: 12694, 
      length: 10, 
      convRule: rule13
  }, {
      start: 12704, 
      length: 27, 
      convRule: rule45
  }, {
      start: 12736, 
      length: 36, 
      convRule: rule13
  }, {
      start: 12784, 
      length: 16, 
      convRule: rule45
  }, {
      start: 12800, 
      length: 31, 
      convRule: rule13
  }, {
      start: 12832, 
      length: 10, 
      convRule: rule17
  }, {
      start: 12842, 
      length: 39, 
      convRule: rule13
  }, {
      start: 12881, 
      length: 15, 
      convRule: rule17
  }, {
      start: 12896, 
      length: 32, 
      convRule: rule13
  }, {
      start: 12928, 
      length: 10, 
      convRule: rule17
  }, {
      start: 12938, 
      length: 39, 
      convRule: rule13
  }, {
      start: 12977, 
      length: 15, 
      convRule: rule17
  }, {
      start: 12992, 
      length: 63, 
      convRule: rule13
  }, {
      start: 13056, 
      length: 256, 
      convRule: rule13
  }, {
      start: 13312, 
      length: 6582, 
      convRule: rule45
  }, {
      start: 19904, 
      length: 64, 
      convRule: rule13
  }, {
      start: 19968, 
      length: 20940, 
      convRule: rule45
  }, {
      start: 40960, 
      length: 21, 
      convRule: rule45
  }, {
      start: 40981, 
      length: 1, 
      convRule: rule83
  }, {
      start: 40982, 
      length: 1143, 
      convRule: rule45
  }, {
      start: 42128, 
      length: 55, 
      convRule: rule13
  }, {
      start: 42192, 
      length: 40, 
      convRule: rule45
  }, {
      start: 42232, 
      length: 6, 
      convRule: rule83
  }, {
      start: 42238, 
      length: 2, 
      convRule: rule2
  }, {
      start: 42240, 
      length: 268, 
      convRule: rule45
  }, {
      start: 42508, 
      length: 1, 
      convRule: rule83
  }, {
      start: 42509, 
      length: 3, 
      convRule: rule2
  }, {
      start: 42512, 
      length: 16, 
      convRule: rule45
  }, {
      start: 42528, 
      length: 10, 
      convRule: rule8
  }, {
      start: 42538, 
      length: 2, 
      convRule: rule45
  }, {
      start: 42560, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42561, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42562, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42563, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42564, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42565, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42566, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42567, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42568, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42569, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42570, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42571, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42572, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42573, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42574, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42575, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42576, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42577, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42578, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42579, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42580, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42581, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42582, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42583, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42584, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42585, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42586, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42587, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42588, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42589, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42590, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42591, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42592, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42593, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42594, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42595, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42596, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42597, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42598, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42599, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42600, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42601, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42602, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42603, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42604, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42605, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42606, 
      length: 1, 
      convRule: rule45
  }, {
      start: 42607, 
      length: 1, 
      convRule: rule84
  }, {
      start: 42608, 
      length: 3, 
      convRule: rule109
  }, {
      start: 42611, 
      length: 1, 
      convRule: rule2
  }, {
      start: 42620, 
      length: 2, 
      convRule: rule84
  }, {
      start: 42622, 
      length: 1, 
      convRule: rule2
  }, {
      start: 42623, 
      length: 1, 
      convRule: rule83
  }, {
      start: 42624, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42625, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42626, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42627, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42628, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42629, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42630, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42631, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42632, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42633, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42634, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42635, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42636, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42637, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42638, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42639, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42640, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42641, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42642, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42643, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42644, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42645, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42646, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42647, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42656, 
      length: 70, 
      convRule: rule45
  }, {
      start: 42726, 
      length: 10, 
      convRule: rule116
  }, {
      start: 42736, 
      length: 2, 
      convRule: rule84
  }, {
      start: 42738, 
      length: 6, 
      convRule: rule2
  }, {
      start: 42752, 
      length: 23, 
      convRule: rule10
  }, {
      start: 42775, 
      length: 9, 
      convRule: rule83
  }, {
      start: 42784, 
      length: 2, 
      convRule: rule10
  }, {
      start: 42786, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42787, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42788, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42789, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42790, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42791, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42792, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42793, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42794, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42795, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42796, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42797, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42798, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42799, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42800, 
      length: 2, 
      convRule: rule14
  }, {
      start: 42802, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42803, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42804, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42805, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42806, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42807, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42808, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42809, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42810, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42811, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42812, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42813, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42814, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42815, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42816, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42817, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42818, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42819, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42820, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42821, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42822, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42823, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42824, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42825, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42826, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42827, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42828, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42829, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42830, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42831, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42832, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42833, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42834, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42835, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42836, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42837, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42838, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42839, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42840, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42841, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42842, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42843, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42844, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42845, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42846, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42847, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42848, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42849, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42850, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42851, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42852, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42853, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42854, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42855, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42856, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42857, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42858, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42859, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42860, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42861, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42862, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42863, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42864, 
      length: 1, 
      convRule: rule83
  }, {
      start: 42865, 
      length: 8, 
      convRule: rule14
  }, {
      start: 42873, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42874, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42875, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42876, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42877, 
      length: 1, 
      convRule: rule161
  }, {
      start: 42878, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42879, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42880, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42881, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42882, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42883, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42884, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42885, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42886, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42887, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42888, 
      length: 1, 
      convRule: rule83
  }, {
      start: 42889, 
      length: 2, 
      convRule: rule10
  }, {
      start: 42891, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42892, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42893, 
      length: 1, 
      convRule: rule162
  }, {
      start: 42894, 
      length: 1, 
      convRule: rule14
  }, {
      start: 42896, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42897, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42912, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42913, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42914, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42915, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42916, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42917, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42918, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42919, 
      length: 1, 
      convRule: rule22
  }, {
      start: 42920, 
      length: 1, 
      convRule: rule21
  }, {
      start: 42921, 
      length: 1, 
      convRule: rule22
  }, {
      start: 43002, 
      length: 1, 
      convRule: rule14
  }, {
      start: 43003, 
      length: 7, 
      convRule: rule45
  }, {
      start: 43010, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43011, 
      length: 3, 
      convRule: rule45
  }, {
      start: 43014, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43015, 
      length: 4, 
      convRule: rule45
  }, {
      start: 43019, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43020, 
      length: 23, 
      convRule: rule45
  }, {
      start: 43043, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43045, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43047, 
      length: 1, 
      convRule: rule114
  }, {
      start: 43048, 
      length: 4, 
      convRule: rule13
  }, {
      start: 43056, 
      length: 6, 
      convRule: rule17
  }, {
      start: 43062, 
      length: 2, 
      convRule: rule13
  }, {
      start: 43064, 
      length: 1, 
      convRule: rule3
  }, {
      start: 43065, 
      length: 1, 
      convRule: rule13
  }, {
      start: 43072, 
      length: 52, 
      convRule: rule45
  }, {
      start: 43124, 
      length: 4, 
      convRule: rule2
  }, {
      start: 43136, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43138, 
      length: 50, 
      convRule: rule45
  }, {
      start: 43188, 
      length: 16, 
      convRule: rule114
  }, {
      start: 43204, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43214, 
      length: 2, 
      convRule: rule2
  }, {
      start: 43216, 
      length: 10, 
      convRule: rule8
  }, {
      start: 43232, 
      length: 18, 
      convRule: rule84
  }, {
      start: 43250, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43256, 
      length: 3, 
      convRule: rule2
  }, {
      start: 43259, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43264, 
      length: 10, 
      convRule: rule8
  }, {
      start: 43274, 
      length: 28, 
      convRule: rule45
  }, {
      start: 43302, 
      length: 8, 
      convRule: rule84
  }, {
      start: 43310, 
      length: 2, 
      convRule: rule2
  }, {
      start: 43312, 
      length: 23, 
      convRule: rule45
  }, {
      start: 43335, 
      length: 11, 
      convRule: rule84
  }, {
      start: 43346, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43359, 
      length: 1, 
      convRule: rule2
  }, {
      start: 43360, 
      length: 29, 
      convRule: rule45
  }, {
      start: 43392, 
      length: 3, 
      convRule: rule84
  }, {
      start: 43395, 
      length: 1, 
      convRule: rule114
  }, {
      start: 43396, 
      length: 47, 
      convRule: rule45
  }, {
      start: 43443, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43444, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43446, 
      length: 4, 
      convRule: rule84
  }, {
      start: 43450, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43452, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43453, 
      length: 4, 
      convRule: rule114
  }, {
      start: 43457, 
      length: 13, 
      convRule: rule2
  }, {
      start: 43471, 
      length: 1, 
      convRule: rule83
  }, {
      start: 43472, 
      length: 10, 
      convRule: rule8
  }, {
      start: 43486, 
      length: 2, 
      convRule: rule2
  }, {
      start: 43520, 
      length: 41, 
      convRule: rule45
  }, {
      start: 43561, 
      length: 6, 
      convRule: rule84
  }, {
      start: 43567, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43569, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43571, 
      length: 2, 
      convRule: rule114
  }, {
      start: 43573, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43584, 
      length: 3, 
      convRule: rule45
  }, {
      start: 43587, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43588, 
      length: 8, 
      convRule: rule45
  }, {
      start: 43596, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43597, 
      length: 1, 
      convRule: rule114
  }, {
      start: 43600, 
      length: 10, 
      convRule: rule8
  }, {
      start: 43612, 
      length: 4, 
      convRule: rule2
  }, {
      start: 43616, 
      length: 16, 
      convRule: rule45
  }, {
      start: 43632, 
      length: 1, 
      convRule: rule83
  }, {
      start: 43633, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43639, 
      length: 3, 
      convRule: rule13
  }, {
      start: 43642, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43643, 
      length: 1, 
      convRule: rule114
  }, {
      start: 43648, 
      length: 48, 
      convRule: rule45
  }, {
      start: 43696, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43697, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43698, 
      length: 3, 
      convRule: rule84
  }, {
      start: 43701, 
      length: 2, 
      convRule: rule45
  }, {
      start: 43703, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43705, 
      length: 5, 
      convRule: rule45
  }, {
      start: 43710, 
      length: 2, 
      convRule: rule84
  }, {
      start: 43712, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43713, 
      length: 1, 
      convRule: rule84
  }, {
      start: 43714, 
      length: 1, 
      convRule: rule45
  }, {
      start: 43739, 
      length: 2, 
      convRule: rule45
  }, {
      start: 43741, 
      length: 1, 
      convRule: rule83
  }, {
      start: 43742, 
      length: 2, 
      convRule: rule2
  }, {
      start: 43777, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43785, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43793, 
      length: 6, 
      convRule: rule45
  }, {
      start: 43808, 
      length: 7, 
      convRule: rule45
  }, {
      start: 43816, 
      length: 7, 
      convRule: rule45
  }, {
      start: 43968, 
      length: 35, 
      convRule: rule45
  }, {
      start: 44003, 
      length: 2, 
      convRule: rule114
  }, {
      start: 44005, 
      length: 1, 
      convRule: rule84
  }, {
      start: 44006, 
      length: 2, 
      convRule: rule114
  }, {
      start: 44008, 
      length: 1, 
      convRule: rule84
  }, {
      start: 44009, 
      length: 2, 
      convRule: rule114
  }, {
      start: 44011, 
      length: 1, 
      convRule: rule2
  }, {
      start: 44012, 
      length: 1, 
      convRule: rule114
  }, {
      start: 44013, 
      length: 1, 
      convRule: rule84
  }, {
      start: 44016, 
      length: 10, 
      convRule: rule8
  }, {
      start: 44032, 
      length: 11172, 
      convRule: rule45
  }, {
      start: 55216, 
      length: 23, 
      convRule: rule45
  }, {
      start: 55243, 
      length: 49, 
      convRule: rule45
  }, {
      start: 55296, 
      length: 896, 
      convRule: rule163
  }, {
      start: 56192, 
      length: 128, 
      convRule: rule163
  }, {
      start: 56320, 
      length: 1024, 
      convRule: rule163
  }, {
      start: 57344, 
      length: 6400, 
      convRule: rule164
  }, {
      start: 63744, 
      length: 302, 
      convRule: rule45
  }, {
      start: 64048, 
      length: 62, 
      convRule: rule45
  }, {
      start: 64112, 
      length: 106, 
      convRule: rule45
  }, {
      start: 64256, 
      length: 7, 
      convRule: rule14
  }, {
      start: 64275, 
      length: 5, 
      convRule: rule14
  }, {
      start: 64285, 
      length: 1, 
      convRule: rule45
  }, {
      start: 64286, 
      length: 1, 
      convRule: rule84
  }, {
      start: 64287, 
      length: 10, 
      convRule: rule45
  }, {
      start: 64297, 
      length: 1, 
      convRule: rule6
  }, {
      start: 64298, 
      length: 13, 
      convRule: rule45
  }, {
      start: 64312, 
      length: 5, 
      convRule: rule45
  }, {
      start: 64318, 
      length: 1, 
      convRule: rule45
  }, {
      start: 64320, 
      length: 2, 
      convRule: rule45
  }, {
      start: 64323, 
      length: 2, 
      convRule: rule45
  }, {
      start: 64326, 
      length: 108, 
      convRule: rule45
  }, {
      start: 64434, 
      length: 16, 
      convRule: rule10
  }, {
      start: 64467, 
      length: 363, 
      convRule: rule45
  }, {
      start: 64830, 
      length: 1, 
      convRule: rule4
  }, {
      start: 64831, 
      length: 1, 
      convRule: rule5
  }, {
      start: 64848, 
      length: 64, 
      convRule: rule45
  }, {
      start: 64914, 
      length: 54, 
      convRule: rule45
  }, {
      start: 65008, 
      length: 12, 
      convRule: rule45
  }, {
      start: 65020, 
      length: 1, 
      convRule: rule3
  }, {
      start: 65021, 
      length: 1, 
      convRule: rule13
  }, {
      start: 65024, 
      length: 16, 
      convRule: rule84
  }, {
      start: 65040, 
      length: 7, 
      convRule: rule2
  }, {
      start: 65047, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65048, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65049, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65056, 
      length: 7, 
      convRule: rule84
  }, {
      start: 65072, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65073, 
      length: 2, 
      convRule: rule7
  }, {
      start: 65075, 
      length: 2, 
      convRule: rule11
  }, {
      start: 65077, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65078, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65079, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65080, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65081, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65082, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65083, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65084, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65085, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65086, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65087, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65088, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65089, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65090, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65091, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65092, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65093, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65095, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65096, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65097, 
      length: 4, 
      convRule: rule2
  }, {
      start: 65101, 
      length: 3, 
      convRule: rule11
  }, {
      start: 65104, 
      length: 3, 
      convRule: rule2
  }, {
      start: 65108, 
      length: 4, 
      convRule: rule2
  }, {
      start: 65112, 
      length: 1, 
      convRule: rule7
  }, {
      start: 65113, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65114, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65115, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65116, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65117, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65118, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65119, 
      length: 3, 
      convRule: rule2
  }, {
      start: 65122, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65123, 
      length: 1, 
      convRule: rule7
  }, {
      start: 65124, 
      length: 3, 
      convRule: rule6
  }, {
      start: 65128, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65129, 
      length: 1, 
      convRule: rule3
  }, {
      start: 65130, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65136, 
      length: 5, 
      convRule: rule45
  }, {
      start: 65142, 
      length: 135, 
      convRule: rule45
  }, {
      start: 65279, 
      length: 1, 
      convRule: rule16
  }, {
      start: 65281, 
      length: 3, 
      convRule: rule2
  }, {
      start: 65284, 
      length: 1, 
      convRule: rule3
  }, {
      start: 65285, 
      length: 3, 
      convRule: rule2
  }, {
      start: 65288, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65289, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65290, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65291, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65292, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65293, 
      length: 1, 
      convRule: rule7
  }, {
      start: 65294, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65296, 
      length: 10, 
      convRule: rule8
  }, {
      start: 65306, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65308, 
      length: 3, 
      convRule: rule6
  }, {
      start: 65311, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65313, 
      length: 26, 
      convRule: rule9
  }, {
      start: 65339, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65340, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65341, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65342, 
      length: 1, 
      convRule: rule10
  }, {
      start: 65343, 
      length: 1, 
      convRule: rule11
  }, {
      start: 65344, 
      length: 1, 
      convRule: rule10
  }, {
      start: 65345, 
      length: 26, 
      convRule: rule12
  }, {
      start: 65371, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65372, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65373, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65374, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65375, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65376, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65377, 
      length: 1, 
      convRule: rule2
  }, {
      start: 65378, 
      length: 1, 
      convRule: rule4
  }, {
      start: 65379, 
      length: 1, 
      convRule: rule5
  }, {
      start: 65380, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65382, 
      length: 10, 
      convRule: rule45
  }, {
      start: 65392, 
      length: 1, 
      convRule: rule83
  }, {
      start: 65393, 
      length: 45, 
      convRule: rule45
  }, {
      start: 65438, 
      length: 2, 
      convRule: rule83
  }, {
      start: 65440, 
      length: 31, 
      convRule: rule45
  }, {
      start: 65474, 
      length: 6, 
      convRule: rule45
  }, {
      start: 65482, 
      length: 6, 
      convRule: rule45
  }, {
      start: 65490, 
      length: 6, 
      convRule: rule45
  }, {
      start: 65498, 
      length: 3, 
      convRule: rule45
  }, {
      start: 65504, 
      length: 2, 
      convRule: rule3
  }, {
      start: 65506, 
      length: 1, 
      convRule: rule6
  }, {
      start: 65507, 
      length: 1, 
      convRule: rule10
  }, {
      start: 65508, 
      length: 1, 
      convRule: rule13
  }, {
      start: 65509, 
      length: 2, 
      convRule: rule3
  }, {
      start: 65512, 
      length: 1, 
      convRule: rule13
  }, {
      start: 65513, 
      length: 4, 
      convRule: rule6
  }, {
      start: 65517, 
      length: 2, 
      convRule: rule13
  }, {
      start: 65529, 
      length: 3, 
      convRule: rule16
  }, {
      start: 65532, 
      length: 2, 
      convRule: rule13
  }, {
      start: 65536, 
      length: 12, 
      convRule: rule45
  }, {
      start: 65549, 
      length: 26, 
      convRule: rule45
  }, {
      start: 65576, 
      length: 19, 
      convRule: rule45
  }, {
      start: 65596, 
      length: 2, 
      convRule: rule45
  }, {
      start: 65599, 
      length: 15, 
      convRule: rule45
  }, {
      start: 65616, 
      length: 14, 
      convRule: rule45
  }, {
      start: 65664, 
      length: 123, 
      convRule: rule45
  }, {
      start: 65792, 
      length: 2, 
      convRule: rule2
  }, {
      start: 65794, 
      length: 1, 
      convRule: rule13
  }, {
      start: 65799, 
      length: 45, 
      convRule: rule17
  }, {
      start: 65847, 
      length: 9, 
      convRule: rule13
  }, {
      start: 65856, 
      length: 53, 
      convRule: rule116
  }, {
      start: 65909, 
      length: 4, 
      convRule: rule17
  }, {
      start: 65913, 
      length: 17, 
      convRule: rule13
  }, {
      start: 65930, 
      length: 1, 
      convRule: rule17
  }, {
      start: 65936, 
      length: 12, 
      convRule: rule13
  }, {
      start: 66000, 
      length: 45, 
      convRule: rule13
  }, {
      start: 66045, 
      length: 1, 
      convRule: rule84
  }, {
      start: 66176, 
      length: 29, 
      convRule: rule45
  }, {
      start: 66208, 
      length: 49, 
      convRule: rule45
  }, {
      start: 66304, 
      length: 31, 
      convRule: rule45
  }, {
      start: 66336, 
      length: 4, 
      convRule: rule17
  }, {
      start: 66352, 
      length: 17, 
      convRule: rule45
  }, {
      start: 66369, 
      length: 1, 
      convRule: rule116
  }, {
      start: 66370, 
      length: 8, 
      convRule: rule45
  }, {
      start: 66378, 
      length: 1, 
      convRule: rule116
  }, {
      start: 66432, 
      length: 30, 
      convRule: rule45
  }, {
      start: 66463, 
      length: 1, 
      convRule: rule2
  }, {
      start: 66464, 
      length: 36, 
      convRule: rule45
  }, {
      start: 66504, 
      length: 8, 
      convRule: rule45
  }, {
      start: 66512, 
      length: 1, 
      convRule: rule2
  }, {
      start: 66513, 
      length: 5, 
      convRule: rule116
  }, {
      start: 66560, 
      length: 40, 
      convRule: rule165
  }, {
      start: 66600, 
      length: 40, 
      convRule: rule166
  }, {
      start: 66640, 
      length: 78, 
      convRule: rule45
  }, {
      start: 66720, 
      length: 10, 
      convRule: rule8
  }, {
      start: 67584, 
      length: 6, 
      convRule: rule45
  }, {
      start: 67592, 
      length: 1, 
      convRule: rule45
  }, {
      start: 67594, 
      length: 44, 
      convRule: rule45
  }, {
      start: 67639, 
      length: 2, 
      convRule: rule45
  }, {
      start: 67644, 
      length: 1, 
      convRule: rule45
  }, {
      start: 67647, 
      length: 23, 
      convRule: rule45
  }, {
      start: 67671, 
      length: 1, 
      convRule: rule2
  }, {
      start: 67672, 
      length: 8, 
      convRule: rule17
  }, {
      start: 67840, 
      length: 22, 
      convRule: rule45
  }, {
      start: 67862, 
      length: 6, 
      convRule: rule17
  }, {
      start: 67871, 
      length: 1, 
      convRule: rule2
  }, {
      start: 67872, 
      length: 26, 
      convRule: rule45
  }, {
      start: 67903, 
      length: 1, 
      convRule: rule2
  }, {
      start: 68096, 
      length: 1, 
      convRule: rule45
  }, {
      start: 68097, 
      length: 3, 
      convRule: rule84
  }, {
      start: 68101, 
      length: 2, 
      convRule: rule84
  }, {
      start: 68108, 
      length: 4, 
      convRule: rule84
  }, {
      start: 68112, 
      length: 4, 
      convRule: rule45
  }, {
      start: 68117, 
      length: 3, 
      convRule: rule45
  }, {
      start: 68121, 
      length: 27, 
      convRule: rule45
  }, {
      start: 68152, 
      length: 3, 
      convRule: rule84
  }, {
      start: 68159, 
      length: 1, 
      convRule: rule84
  }, {
      start: 68160, 
      length: 8, 
      convRule: rule17
  }, {
      start: 68176, 
      length: 9, 
      convRule: rule2
  }, {
      start: 68192, 
      length: 29, 
      convRule: rule45
  }, {
      start: 68221, 
      length: 2, 
      convRule: rule17
  }, {
      start: 68223, 
      length: 1, 
      convRule: rule2
  }, {
      start: 68352, 
      length: 54, 
      convRule: rule45
  }, {
      start: 68409, 
      length: 7, 
      convRule: rule2
  }, {
      start: 68416, 
      length: 22, 
      convRule: rule45
  }, {
      start: 68440, 
      length: 8, 
      convRule: rule17
  }, {
      start: 68448, 
      length: 19, 
      convRule: rule45
  }, {
      start: 68472, 
      length: 8, 
      convRule: rule17
  }, {
      start: 68608, 
      length: 73, 
      convRule: rule45
  }, {
      start: 69216, 
      length: 31, 
      convRule: rule17
  }, {
      start: 69632, 
      length: 1, 
      convRule: rule114
  }, {
      start: 69633, 
      length: 1, 
      convRule: rule84
  }, {
      start: 69634, 
      length: 1, 
      convRule: rule114
  }, {
      start: 69635, 
      length: 53, 
      convRule: rule45
  }, {
      start: 69688, 
      length: 15, 
      convRule: rule84
  }, {
      start: 69703, 
      length: 7, 
      convRule: rule2
  }, {
      start: 69714, 
      length: 20, 
      convRule: rule17
  }, {
      start: 69734, 
      length: 10, 
      convRule: rule8
  }, {
      start: 69760, 
      length: 2, 
      convRule: rule84
  }, {
      start: 69762, 
      length: 1, 
      convRule: rule114
  }, {
      start: 69763, 
      length: 45, 
      convRule: rule45
  }, {
      start: 69808, 
      length: 3, 
      convRule: rule114
  }, {
      start: 69811, 
      length: 4, 
      convRule: rule84
  }, {
      start: 69815, 
      length: 2, 
      convRule: rule114
  }, {
      start: 69817, 
      length: 2, 
      convRule: rule84
  }, {
      start: 69819, 
      length: 2, 
      convRule: rule2
  }, {
      start: 69821, 
      length: 1, 
      convRule: rule16
  }, {
      start: 69822, 
      length: 4, 
      convRule: rule2
  }, {
      start: 73728, 
      length: 879, 
      convRule: rule45
  }, {
      start: 74752, 
      length: 99, 
      convRule: rule116
  }, {
      start: 74864, 
      length: 4, 
      convRule: rule2
  }, {
      start: 77824, 
      length: 1071, 
      convRule: rule45
  }, {
      start: 92160, 
      length: 569, 
      convRule: rule45
  }, {
      start: 110592, 
      length: 2, 
      convRule: rule45
  }, {
      start: 118784, 
      length: 246, 
      convRule: rule13
  }, {
      start: 119040, 
      length: 39, 
      convRule: rule13
  }, {
      start: 119081, 
      length: 60, 
      convRule: rule13
  }, {
      start: 119141, 
      length: 2, 
      convRule: rule114
  }, {
      start: 119143, 
      length: 3, 
      convRule: rule84
  }, {
      start: 119146, 
      length: 3, 
      convRule: rule13
  }, {
      start: 119149, 
      length: 6, 
      convRule: rule114
  }, {
      start: 119155, 
      length: 8, 
      convRule: rule16
  }, {
      start: 119163, 
      length: 8, 
      convRule: rule84
  }, {
      start: 119171, 
      length: 2, 
      convRule: rule13
  }, {
      start: 119173, 
      length: 7, 
      convRule: rule84
  }, {
      start: 119180, 
      length: 30, 
      convRule: rule13
  }, {
      start: 119210, 
      length: 4, 
      convRule: rule84
  }, {
      start: 119214, 
      length: 48, 
      convRule: rule13
  }, {
      start: 119296, 
      length: 66, 
      convRule: rule13
  }, {
      start: 119362, 
      length: 3, 
      convRule: rule84
  }, {
      start: 119365, 
      length: 1, 
      convRule: rule13
  }, {
      start: 119552, 
      length: 87, 
      convRule: rule13
  }, {
      start: 119648, 
      length: 18, 
      convRule: rule17
  }, {
      start: 119808, 
      length: 26, 
      convRule: rule98
  }, {
      start: 119834, 
      length: 26, 
      convRule: rule14
  }, {
      start: 119860, 
      length: 26, 
      convRule: rule98
  }, {
      start: 119886, 
      length: 7, 
      convRule: rule14
  }, {
      start: 119894, 
      length: 18, 
      convRule: rule14
  }, {
      start: 119912, 
      length: 26, 
      convRule: rule98
  }, {
      start: 119938, 
      length: 26, 
      convRule: rule14
  }, {
      start: 119964, 
      length: 1, 
      convRule: rule98
  }, {
      start: 119966, 
      length: 2, 
      convRule: rule98
  }, {
      start: 119970, 
      length: 1, 
      convRule: rule98
  }, {
      start: 119973, 
      length: 2, 
      convRule: rule98
  }, {
      start: 119977, 
      length: 4, 
      convRule: rule98
  }, {
      start: 119982, 
      length: 8, 
      convRule: rule98
  }, {
      start: 119990, 
      length: 4, 
      convRule: rule14
  }, {
      start: 119995, 
      length: 1, 
      convRule: rule14
  }, {
      start: 119997, 
      length: 7, 
      convRule: rule14
  }, {
      start: 120005, 
      length: 11, 
      convRule: rule14
  }, {
      start: 120016, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120042, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120068, 
      length: 2, 
      convRule: rule98
  }, {
      start: 120071, 
      length: 4, 
      convRule: rule98
  }, {
      start: 120077, 
      length: 8, 
      convRule: rule98
  }, {
      start: 120086, 
      length: 7, 
      convRule: rule98
  }, {
      start: 120094, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120120, 
      length: 2, 
      convRule: rule98
  }, {
      start: 120123, 
      length: 4, 
      convRule: rule98
  }, {
      start: 120128, 
      length: 5, 
      convRule: rule98
  }, {
      start: 120134, 
      length: 1, 
      convRule: rule98
  }, {
      start: 120138, 
      length: 7, 
      convRule: rule98
  }, {
      start: 120146, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120172, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120198, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120224, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120250, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120276, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120302, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120328, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120354, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120380, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120406, 
      length: 26, 
      convRule: rule14
  }, {
      start: 120432, 
      length: 26, 
      convRule: rule98
  }, {
      start: 120458, 
      length: 28, 
      convRule: rule14
  }, {
      start: 120488, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120513, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120514, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120539, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120540, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120546, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120571, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120572, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120597, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120598, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120604, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120629, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120630, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120655, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120656, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120662, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120687, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120688, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120713, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120714, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120720, 
      length: 25, 
      convRule: rule98
  }, {
      start: 120745, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120746, 
      length: 25, 
      convRule: rule14
  }, {
      start: 120771, 
      length: 1, 
      convRule: rule6
  }, {
      start: 120772, 
      length: 6, 
      convRule: rule14
  }, {
      start: 120778, 
      length: 1, 
      convRule: rule98
  }, {
      start: 120779, 
      length: 1, 
      convRule: rule14
  }, {
      start: 120782, 
      length: 50, 
      convRule: rule8
  }, {
      start: 126976, 
      length: 44, 
      convRule: rule13
  }, {
      start: 127024, 
      length: 100, 
      convRule: rule13
  }, {
      start: 127136, 
      length: 15, 
      convRule: rule13
  }, {
      start: 127153, 
      length: 14, 
      convRule: rule13
  }, {
      start: 127169, 
      length: 15, 
      convRule: rule13
  }, {
      start: 127185, 
      length: 15, 
      convRule: rule13
  }, {
      start: 127232, 
      length: 11, 
      convRule: rule17
  }, {
      start: 127248, 
      length: 31, 
      convRule: rule13
  }, {
      start: 127280, 
      length: 58, 
      convRule: rule13
  }, {
      start: 127344, 
      length: 43, 
      convRule: rule13
  }, {
      start: 127462, 
      length: 29, 
      convRule: rule13
  }, {
      start: 127504, 
      length: 43, 
      convRule: rule13
  }, {
      start: 127552, 
      length: 9, 
      convRule: rule13
  }, {
      start: 127568, 
      length: 2, 
      convRule: rule13
  }, {
      start: 127744, 
      length: 33, 
      convRule: rule13
  }, {
      start: 127792, 
      length: 6, 
      convRule: rule13
  }, {
      start: 127799, 
      length: 70, 
      convRule: rule13
  }, {
      start: 127872, 
      length: 20, 
      convRule: rule13
  }, {
      start: 127904, 
      length: 37, 
      convRule: rule13
  }, {
      start: 127942, 
      length: 5, 
      convRule: rule13
  }, {
      start: 127968, 
      length: 17, 
      convRule: rule13
  }, {
      start: 128000, 
      length: 63, 
      convRule: rule13
  }, {
      start: 128064, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128066, 
      length: 182, 
      convRule: rule13
  }, {
      start: 128249, 
      length: 4, 
      convRule: rule13
  }, {
      start: 128256, 
      length: 62, 
      convRule: rule13
  }, {
      start: 128336, 
      length: 24, 
      convRule: rule13
  }, {
      start: 128507, 
      length: 5, 
      convRule: rule13
  }, {
      start: 128513, 
      length: 16, 
      convRule: rule13
  }, {
      start: 128530, 
      length: 3, 
      convRule: rule13
  }, {
      start: 128534, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128536, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128538, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128540, 
      length: 3, 
      convRule: rule13
  }, {
      start: 128544, 
      length: 6, 
      convRule: rule13
  }, {
      start: 128552, 
      length: 4, 
      convRule: rule13
  }, {
      start: 128557, 
      length: 1, 
      convRule: rule13
  }, {
      start: 128560, 
      length: 4, 
      convRule: rule13
  }, {
      start: 128565, 
      length: 12, 
      convRule: rule13
  }, {
      start: 128581, 
      length: 11, 
      convRule: rule13
  }, {
      start: 128640, 
      length: 70, 
      convRule: rule13
  }, {
      start: 128768, 
      length: 116, 
      convRule: rule13
  }, {
      start: 131072, 
      length: 42711, 
      convRule: rule45
  }, {
      start: 173824, 
      length: 4149, 
      convRule: rule45
  }, {
      start: 177984, 
      length: 222, 
      convRule: rule45
  }, {
      start: 194560, 
      length: 542, 
      convRule: rule45
  }, {
      start: 917505, 
      length: 1, 
      convRule: rule16
  }, {
      start: 917536, 
      length: 96, 
      convRule: rule16
  }, {
      start: 917760, 
      length: 240, 
      convRule: rule84
  }, {
      start: 983040, 
      length: 65534, 
      convRule: rule164
  }, {
      start: 1048576, 
      length: 65534, 
      convRule: rule164
  } ];
  var checkAttr = function (categories) {
      return function ($$char) {
          var numOfBlocks = (function () {
              var $24 = $$char < 256;
              if ($24) {
                  return numLat1Blocks;
              };
              if (!$24) {
                  return numBlocks;
              };
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4791, column 23 - line 4791, column 70: " + [ $24.constructor.name ]);
          })();
          var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories);
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4793, column 8 - line 4795, column 72: " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uIswalnum = checkAttr([ gencatLT, gencatLU, gencatLL, gencatLM, gencatLO, gencatMC, gencatME, gencatMN, gencatNO, gencatND, gencatNL ]);
  var uIswalpha = checkAttr([ gencatLL, gencatLU, gencatLT, gencatLM, gencatLO ]);                                                                                                                                                                                    
  var uIswupper = checkAttr([ gencatLU, gencatLT ]);
  exports["NUMCAT_LU"] = NUMCAT_LU;
  exports["NUMCAT_LL"] = NUMCAT_LL;
  exports["NUMCAT_LT"] = NUMCAT_LT;
  exports["NUMCAT_LM"] = NUMCAT_LM;
  exports["NUMCAT_LO"] = NUMCAT_LO;
  exports["NUMCAT_MN"] = NUMCAT_MN;
  exports["NUMCAT_MC"] = NUMCAT_MC;
  exports["NUMCAT_ME"] = NUMCAT_ME;
  exports["NUMCAT_ND"] = NUMCAT_ND;
  exports["NUMCAT_NL"] = NUMCAT_NL;
  exports["NUMCAT_NO"] = NUMCAT_NO;
  exports["NUMCAT_PC"] = NUMCAT_PC;
  exports["NUMCAT_PD"] = NUMCAT_PD;
  exports["NUMCAT_PS"] = NUMCAT_PS;
  exports["NUMCAT_PE"] = NUMCAT_PE;
  exports["NUMCAT_PI"] = NUMCAT_PI;
  exports["NUMCAT_PF"] = NUMCAT_PF;
  exports["NUMCAT_PO"] = NUMCAT_PO;
  exports["NUMCAT_SM"] = NUMCAT_SM;
  exports["NUMCAT_SC"] = NUMCAT_SC;
  exports["NUMCAT_SK"] = NUMCAT_SK;
  exports["NUMCAT_SO"] = NUMCAT_SO;
  exports["NUMCAT_ZS"] = NUMCAT_ZS;
  exports["NUMCAT_ZL"] = NUMCAT_ZL;
  exports["NUMCAT_ZP"] = NUMCAT_ZP;
  exports["NUMCAT_CC"] = NUMCAT_CC;
  exports["NUMCAT_CF"] = NUMCAT_CF;
  exports["NUMCAT_CS"] = NUMCAT_CS;
  exports["NUMCAT_CO"] = NUMCAT_CO;
  exports["NUMCAT_CN"] = NUMCAT_CN;
  exports["allchars"] = allchars;
  exports["blkCmp"] = blkCmp;
  exports["bsearch"] = bsearch;
  exports["checkAttr"] = checkAttr;
  exports["gencatCC"] = gencatCC;
  exports["gencatCF"] = gencatCF;
  exports["gencatCO"] = gencatCO;
  exports["gencatCS"] = gencatCS;
  exports["gencatLL"] = gencatLL;
  exports["gencatLM"] = gencatLM;
  exports["gencatLO"] = gencatLO;
  exports["gencatLT"] = gencatLT;
  exports["gencatLU"] = gencatLU;
  exports["gencatMC"] = gencatMC;
  exports["gencatME"] = gencatME;
  exports["gencatMN"] = gencatMN;
  exports["gencatND"] = gencatND;
  exports["gencatNL"] = gencatNL;
  exports["gencatNO"] = gencatNO;
  exports["gencatPC"] = gencatPC;
  exports["gencatPD"] = gencatPD;
  exports["gencatPE"] = gencatPE;
  exports["gencatPF"] = gencatPF;
  exports["gencatPI"] = gencatPI;
  exports["gencatPO"] = gencatPO;
  exports["gencatPS"] = gencatPS;
  exports["gencatSC"] = gencatSC;
  exports["gencatSK"] = gencatSK;
  exports["gencatSM"] = gencatSM;
  exports["gencatSO"] = gencatSO;
  exports["gencatZL"] = gencatZL;
  exports["gencatZP"] = gencatZP;
  exports["gencatZS"] = gencatZS;
  exports["getRule"] = getRule;
  exports["nullrule"] = nullrule;
  exports["numBlocks"] = numBlocks;
  exports["numLat1Blocks"] = numLat1Blocks;
  exports["rule0"] = rule0;
  exports["rule1"] = rule1;
  exports["rule10"] = rule10;
  exports["rule100"] = rule100;
  exports["rule101"] = rule101;
  exports["rule102"] = rule102;
  exports["rule103"] = rule103;
  exports["rule104"] = rule104;
  exports["rule105"] = rule105;
  exports["rule106"] = rule106;
  exports["rule107"] = rule107;
  exports["rule108"] = rule108;
  exports["rule109"] = rule109;
  exports["rule11"] = rule11;
  exports["rule110"] = rule110;
  exports["rule111"] = rule111;
  exports["rule112"] = rule112;
  exports["rule113"] = rule113;
  exports["rule114"] = rule114;
  exports["rule115"] = rule115;
  exports["rule116"] = rule116;
  exports["rule117"] = rule117;
  exports["rule118"] = rule118;
  exports["rule119"] = rule119;
  exports["rule12"] = rule12;
  exports["rule120"] = rule120;
  exports["rule121"] = rule121;
  exports["rule122"] = rule122;
  exports["rule123"] = rule123;
  exports["rule124"] = rule124;
  exports["rule125"] = rule125;
  exports["rule126"] = rule126;
  exports["rule127"] = rule127;
  exports["rule128"] = rule128;
  exports["rule129"] = rule129;
  exports["rule13"] = rule13;
  exports["rule130"] = rule130;
  exports["rule131"] = rule131;
  exports["rule132"] = rule132;
  exports["rule133"] = rule133;
  exports["rule134"] = rule134;
  exports["rule135"] = rule135;
  exports["rule136"] = rule136;
  exports["rule137"] = rule137;
  exports["rule138"] = rule138;
  exports["rule139"] = rule139;
  exports["rule14"] = rule14;
  exports["rule140"] = rule140;
  exports["rule141"] = rule141;
  exports["rule142"] = rule142;
  exports["rule143"] = rule143;
  exports["rule144"] = rule144;
  exports["rule145"] = rule145;
  exports["rule146"] = rule146;
  exports["rule147"] = rule147;
  exports["rule148"] = rule148;
  exports["rule149"] = rule149;
  exports["rule15"] = rule15;
  exports["rule150"] = rule150;
  exports["rule151"] = rule151;
  exports["rule152"] = rule152;
  exports["rule153"] = rule153;
  exports["rule154"] = rule154;
  exports["rule155"] = rule155;
  exports["rule156"] = rule156;
  exports["rule157"] = rule157;
  exports["rule158"] = rule158;
  exports["rule159"] = rule159;
  exports["rule16"] = rule16;
  exports["rule160"] = rule160;
  exports["rule161"] = rule161;
  exports["rule162"] = rule162;
  exports["rule163"] = rule163;
  exports["rule164"] = rule164;
  exports["rule165"] = rule165;
  exports["rule166"] = rule166;
  exports["rule17"] = rule17;
  exports["rule18"] = rule18;
  exports["rule19"] = rule19;
  exports["rule2"] = rule2;
  exports["rule20"] = rule20;
  exports["rule21"] = rule21;
  exports["rule22"] = rule22;
  exports["rule23"] = rule23;
  exports["rule24"] = rule24;
  exports["rule25"] = rule25;
  exports["rule26"] = rule26;
  exports["rule27"] = rule27;
  exports["rule28"] = rule28;
  exports["rule29"] = rule29;
  exports["rule3"] = rule3;
  exports["rule30"] = rule30;
  exports["rule31"] = rule31;
  exports["rule32"] = rule32;
  exports["rule33"] = rule33;
  exports["rule34"] = rule34;
  exports["rule35"] = rule35;
  exports["rule36"] = rule36;
  exports["rule37"] = rule37;
  exports["rule38"] = rule38;
  exports["rule39"] = rule39;
  exports["rule4"] = rule4;
  exports["rule40"] = rule40;
  exports["rule41"] = rule41;
  exports["rule42"] = rule42;
  exports["rule43"] = rule43;
  exports["rule44"] = rule44;
  exports["rule45"] = rule45;
  exports["rule46"] = rule46;
  exports["rule47"] = rule47;
  exports["rule48"] = rule48;
  exports["rule49"] = rule49;
  exports["rule5"] = rule5;
  exports["rule50"] = rule50;
  exports["rule51"] = rule51;
  exports["rule52"] = rule52;
  exports["rule53"] = rule53;
  exports["rule54"] = rule54;
  exports["rule55"] = rule55;
  exports["rule56"] = rule56;
  exports["rule57"] = rule57;
  exports["rule58"] = rule58;
  exports["rule59"] = rule59;
  exports["rule6"] = rule6;
  exports["rule60"] = rule60;
  exports["rule61"] = rule61;
  exports["rule62"] = rule62;
  exports["rule63"] = rule63;
  exports["rule64"] = rule64;
  exports["rule65"] = rule65;
  exports["rule66"] = rule66;
  exports["rule67"] = rule67;
  exports["rule68"] = rule68;
  exports["rule69"] = rule69;
  exports["rule7"] = rule7;
  exports["rule70"] = rule70;
  exports["rule71"] = rule71;
  exports["rule72"] = rule72;
  exports["rule73"] = rule73;
  exports["rule74"] = rule74;
  exports["rule75"] = rule75;
  exports["rule76"] = rule76;
  exports["rule77"] = rule77;
  exports["rule78"] = rule78;
  exports["rule79"] = rule79;
  exports["rule8"] = rule8;
  exports["rule80"] = rule80;
  exports["rule81"] = rule81;
  exports["rule82"] = rule82;
  exports["rule83"] = rule83;
  exports["rule84"] = rule84;
  exports["rule85"] = rule85;
  exports["rule86"] = rule86;
  exports["rule87"] = rule87;
  exports["rule88"] = rule88;
  exports["rule89"] = rule89;
  exports["rule9"] = rule9;
  exports["rule90"] = rule90;
  exports["rule91"] = rule91;
  exports["rule92"] = rule92;
  exports["rule93"] = rule93;
  exports["rule94"] = rule94;
  exports["rule95"] = rule95;
  exports["rule96"] = rule96;
  exports["rule97"] = rule97;
  exports["rule98"] = rule98;
  exports["rule99"] = rule99;
  exports["uIswalnum"] = uIswalnum;
  exports["uIswalpha"] = uIswalpha;
  exports["uIswupper"] = uIswupper;
})(PS["Data.Char.Unicode.Internal"] = PS["Data.Char.Unicode.Internal"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Char_Unicode_Internal = PS["Data.Char.Unicode.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Function = PS["Data.Function"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var isUpper = function ($47) {
      return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($47));
  };
  var isDigit = function (c) {
      var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0");
      return diff <= 9 && diff >= 0;
  };
  var isAlphaNum = function ($51) {
      return Data_Char_Unicode_Internal.uIswalnum(Data_Char.toCharCode($51));
  };
  var isAlpha = function ($52) {
      return Data_Char_Unicode_Internal.uIswalpha(Data_Char.toCharCode($52));
  };
  exports["isAlpha"] = isAlpha;
  exports["isAlphaNum"] = isAlphaNum;
  exports["isDigit"] = isDigit;
  exports["isUpper"] = isUpper;
})(PS["Data.Char.Unicode"] = PS["Data.Char.Unicode"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Boolean = PS["Data.Boolean"];
  var Control_Apply = PS["Control.Apply"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Enum = function (__superclass_Data$dotOrd$dotOrd_0, pred, succ) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (__superclass_Data$dotBounded$dotBounded_0, __superclass_Data$dotEnum$dotEnum_1, cardinality, fromEnum, toEnum) {
      this["__superclass_Data.Bounded.Bounded_0"] = __superclass_Data$dotBounded$dotBounded_0;
      this["__superclass_Data.Enum.Enum_1"] = __superclass_Data$dotEnum$dotEnum_1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var pred = function (dict) {
      return dict.pred;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var enumBoolean = new Enum(function () {
      return Data_Ord.ordBoolean;
  }, function (v) {
      if (v) {
          return new Data_Maybe.Just(false);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      if (!v) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return Data_Maybe.Just.create(Data_Char.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)(Data_Char.toCharCode), defaultSucc(charToEnum)(Data_Char.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, Data_Char.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - Data_Char.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)), Data_Char.toCharCode, charToEnum);
  var boundedEnumBoolean = new BoundedEnum(function () {
      return Data_Bounded.boundedBoolean;
  }, function () {
      return enumBoolean;
  }, 2, function (v) {
      if (!v) {
          return 0;
      };
      if (v) {
          return 1;
      };
      throw new Error("Failed pattern match at Data.Enum line 165, column 3 - line 166, column 3: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(false);
      };
      if (v === 1) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  exports["BoundedEnum"] = BoundedEnum;
  exports["Enum"] = Enum;
  exports["cardinality"] = cardinality;
  exports["defaultPred"] = defaultPred;
  exports["defaultSucc"] = defaultSucc;
  exports["fromEnum"] = fromEnum;
  exports["pred"] = pred;
  exports["succ"] = succ;
  exports["toEnum"] = toEnum;
  exports["enumBoolean"] = enumBoolean;
  exports["enumChar"] = enumChar;
  exports["boundedEnumBoolean"] = boundedEnumBoolean;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      this.thunk = null;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Field = PS["Data.Field"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Bind = PS["Control.Bind"];        
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));             
  var newtypeList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, List);
  var step = function ($154) {
      return Data_Lazy.force(Data_Newtype.unwrap(newtypeList)($154));
  };      
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($155) {
          return step(f($155));
      }));
  });
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_op) {
          return function (__copy_b) {
              return function (__copy_xs) {
                  var op = __copy_op;
                  var b = __copy_b;
                  var xs = __copy_xs;
                  tco: while (true) {
                      var $81 = step(xs);
                      if ($81 instanceof Nil) {
                          return b;
                      };
                      if ($81 instanceof Cons) {
                          var __tco_op = op;
                          var __tco_b = op(b)($81.value0);
                          op = __tco_op;
                          b = __tco_b;
                          xs = $81.value1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy.Types line 107, column 18 - line 109, column 41: " + [ $81.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["cons"] = cons;
  exports["nil"] = nil;
  exports["step"] = step;
  exports["newtypeList"] = newtypeList;
  exports["lazyList"] = lazyList;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Lazy.Types"] = PS["Data.List.Lazy.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var take = function (n) {
      var go = function (v) {
          return function (v1) {
              if (v <= 0) {
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Lazy_Types.Cons) {
                  return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 467, column 3 - line 467, column 24: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      return function ($188) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($188)));
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
          return Data_List_Lazy_Types.cons(x)(xs);
      });
  };
  var replicate = function (i) {
      return function (xs) {
          return take(i)(repeat(xs));
      };
  };
  exports["repeat"] = repeat;
  exports["replicate"] = replicate;
  exports["take"] = take;
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 423, column 1 - line 423, column 18: " + [ v.constructor.name ]);
  };
  var size = function ($647) {
      return Data_List.length(values($647));
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toAscUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          var __tco_v = v.value1;
                          v = __tco_v;
                          continue tco;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          var __tco_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          v = __tco_v;
                          continue tco;
                      };
                      if (v.value0 instanceof Three) {
                          var __tco_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 404, column 18 - line 413, column 71: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 402, column 1 - line 413, column 71: " + [ v.constructor.name ]);
              };
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toAscUnfoldable(Data_Unfoldable.unfoldableArray);
  var toList = toAscUnfoldable(Data_List_Types.unfoldableList);
  var lookup = function (dictOrd) {
      return Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (k) {
              return function (tree) {
                  if (tree instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  var comp = Data_Ord.compare(dictOrd);
                  var __unused = function (dictPartial1) {
                      return function ($dollar43) {
                          return $dollar43;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (tree instanceof Two) {
                          var $189 = comp(k)(tree.value1);
                          if ($189 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value2);
                          };
                          if ($189 instanceof Data_Ordering.LT) {
                              return lookup(dictOrd)(k)(tree.value0);
                          };
                          return lookup(dictOrd)(k)(tree.value3);
                      };
                      if (tree instanceof Three) {
                          var $194 = comp(k)(tree.value1);
                          if ($194 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value2);
                          };
                          var $196 = comp(k)(tree.value4);
                          if ($196 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value5);
                          };
                          if ($194 instanceof Data_Ordering.LT) {
                              return lookup(dictOrd)(k)(tree.value0);
                          };
                          if ($196 instanceof Data_Ordering.GT) {
                              return lookup(dictOrd)(k)(tree.value6);
                          };
                          return lookup(dictOrd)(k)(tree.value3);
                      };
                      throw new Error("Failed pattern match at Data.Map line 149, column 10 - line 163, column 39: " + [ tree.constructor.name ]);
                  })());
              };
          };
      });
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 417, column 1 - line 417, column 16: " + [ v.constructor.name ]);
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map line 74, column 3 - line 74, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_tree) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var tree = __copy_tree;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof TwoRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 240, column 3 - line 245, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 238, column 1 - line 238, column 27: " + [ v.constructor.name, tree.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                      };
                      if (v.value0 instanceof TwoRight) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 276, column 5 - line 281, column 104: " + [ v.value0.constructor.name, v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 274, column 3 - line 274, column 54: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var comp = Data_Ord.compare(dictOrd);
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Leaf) {
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var $317 = comp(k)(v1.value1);
                              if ($317 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if ($317 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var $322 = comp(k)(v1.value1);
                              if ($322 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var $324 = comp(k)(v1.value4);
                              if ($324 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if ($322 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if ($322 instanceof Data_Ordering.GT && $324 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value3;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 257, column 3 - line 257, column 52: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List_Types.Nil.value);
  };
  var pop = function (dictOrd) {
      var up = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var __unused = function (dictPartial1) {
                          return function ($dollar51) {
                              return $dollar51;
                          };
                      };
                      return __unused(dictPartial)((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map line 326, column 9 - line 343, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map line 323, column 5 - line 343, column 136: " + [ ctxs.constructor.name ]);
              };
          };
      });
      var removeMaxNode = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctx) {
              return function (m) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar53) {
                          return $dollar53;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 355, column 5 - line 359, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
      });
      var maxNode = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (m) {
              var __unused = function (dictPartial1) {
                  return function ($dollar55) {
                      return $dollar55;
                  };
              };
              return __unused(dictPartial)((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1, 
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4, 
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map line 346, column 33 - line 350, column 45: " + [ m.constructor.name ]);
              })());
          };
      });
      var comp = Data_Ord.compare(dictOrd);
      var down = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctx) {
              return function (k) {
                  return function (m) {
                      if (m instanceof Leaf) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var $535 = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && $535 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if ($535 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if ($535 instanceof Data_Ordering.LT) {
                              return down(new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx))(k)(m.value0);
                          };
                          return down(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(k)(m.value3);
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var $544 = comp(k)(m.value1);
                          var $545 = comp(k)(m.value4);
                          if (leaves && $544 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && $545 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if ($544 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if ($545 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if ($544 instanceof Data_Ordering.LT) {
                              return down(new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx))(k)(m.value0);
                          };
                          if ($544 instanceof Data_Ordering.GT && $545 instanceof Data_Ordering.LT) {
                              return down(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx))(k)(m.value3);
                          };
                          return down(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(k)(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 296, column 36 - line 319, column 82: " + [ m.constructor.name ]);
                  };
              };
          };
      });
      return down(Data_List_Types.Nil.value);
  };
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (m1) {
              return function (m2) {
                  return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
              };
          });
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var $635 = f(lookup(dictOrd)(k)(m));
                  if ($635 instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if ($635 instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)($635.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map line 364, column 15 - line 366, column 25: " + [ $635.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($648) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($648));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toList(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var semigroupMap = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  exports["alter"] = alter;
  exports["delete"] = $$delete;
  exports["empty"] = empty;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["keys"] = keys;
  exports["lookup"] = lookup;
  exports["member"] = member;
  exports["pop"] = pop;
  exports["singleton"] = singleton;
  exports["size"] = size;
  exports["toAscUnfoldable"] = toAscUnfoldable;
  exports["toList"] = toList;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["values"] = values;
  exports["eqMap"] = eqMap;
  exports["semigroupMap"] = semigroupMap;
  exports["functorMap"] = functorMap;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];        
  var $$Set = (function () {
      function Set(value0) {
          this.value0 = value0;
      };
      Set.create = function (value0) {
          return new Set(value0);
      };
      return Set;
  })();
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return new $$Set(Data_Map.union(dictOrd)(v.value0)(v1.value0));
          };
      };
  };
  var toList = function (v) {
      return Data_Map.keys(v.value0);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($61) {
          return Data_List.toUnfoldable(dictUnfoldable)(toList($61));
      };
  };
  var size = function (v) {
      return Data_Map.size(v.value0);
  };
  var singleton = function (a) {
      return new $$Set(Data_Map.singleton(a)(Data_Unit.unit));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map.member(dictOrd)(a)(v.value0);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map.insert(dictOrd)(a)(Data_Unit.unit)(v.value0));
          };
      };
  }; 
  var eqSet = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(Data_Map.eqMap(dictEq)(Data_Eq.eqUnit))(v.value0)(v1.value0);
          };
      });
  };
  var empty = new $$Set(Data_Map.empty);
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  var intersection = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              var toArray = function ($65) {
                  return Data_Array.fromFoldable(Data_List_Types.foldableList)(toList($65));
              };
              var rs = toArray(s2);
              var rl = Data_Array.length(rs);
              var ls = toArray(s1);
              var ll = Data_Array.length(ls);
              var intersect = function (acc) {
                  var go = Partial_Unsafe.unsafePartial(function (dictPartial) {
                      return function (l) {
                          return function (r) {
                              var $53 = l < ll && r < rl;
                              if ($53) {
                                  var $54 = Data_Ord.compare(dictOrd)(Data_Array.unsafeIndex(dictPartial)(ls)(l))(Data_Array.unsafeIndex(dictPartial)(rs)(r));
                                  if ($54 instanceof Data_Ordering.EQ) {
                                      return function __do() {
                                          var v = Data_Array_ST.pushSTArray(acc)(Data_Array.unsafeIndex(dictPartial)(ls)(l))();
                                          return new Control_Monad_Rec_Class.Loop({
                                              a: l + 1 | 0, 
                                              b: r + 1 | 0
                                          });
                                      };
                                  };
                                  if ($54 instanceof Data_Ordering.LT) {
                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Control_Monad_Rec_Class.Loop({
                                          a: l + 1 | 0, 
                                          b: r
                                      }));
                                  };
                                  if ($54 instanceof Data_Ordering.GT) {
                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Control_Monad_Rec_Class.Loop({
                                          a: l, 
                                          b: r + 1 | 0
                                      }));
                                  };
                                  throw new Error("Failed pattern match at Data.Set line 158, column 12 - line 163, column 43: " + [ $54.constructor.name ]);
                              };
                              if (!$53) {
                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Control_Monad_Rec_Class.Done(acc));
                              };
                              throw new Error("Failed pattern match at Data.Set line 157, column 7 - line 164, column 24: " + [ $53.constructor.name ]);
                          };
                      };
                  });
                  return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecEff)(go)(0)(0);
              };
              return fromFoldable(Data_Foldable.foldableArray)(dictOrd)(Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(Control_Bind.bind(Control_Monad_Eff.bindEff)(Data_Array_ST.emptySTArray)(intersect))));
          };
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map["delete"](dictOrd)(a)(v.value0));
          };
      };
  };
  var difference = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
          };
      };
  };
  exports["difference"] = difference;
  exports["empty"] = empty;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["intersection"] = intersection;
  exports["member"] = member;
  exports["singleton"] = singleton;
  exports["size"] = size;
  exports["toUnfoldable"] = toUnfoldable;
  exports["union"] = union;
  exports["eqSet"] = eqSet;
})(PS["Data.Set"] = PS["Data.Set"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports._collect = _collect;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (m) {
    return function (k) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["delete"] = $foreign["delete"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Bind = PS["Control.Bind"];        
  var values = function ($43) {
      return Data_List.fromFoldable(Data_Foldable.foldableArray)($foreign._collect(function (v) {
          return function (v1) {
              return v1;
          };
      })($43));
  };
  var toList = function ($44) {
      return Data_List.fromFoldable(Data_Foldable.foldableArray)($foreign._collect(Data_Tuple.Tuple.create)($44));
  };
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(s)(k)(v));
          });
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return v;
          });
      };
  };
  var $$delete = function (k) {
      return mutate(function (s) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST["delete"](s)(k));
      });
  };
  exports["delete"] = $$delete;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["thawST"] = thawST;
  exports["toList"] = toList;
  exports["values"] = values;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Pattern = function (x) {
      return x;
  };
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v), 
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $$null = function (s) {
      return s === "";
  };              
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);                                                                                
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["Pattern"] = Pattern;
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["null"] = $$null;
  exports["toChar"] = toChar;
  exports["uncons"] = uncons;
  exports["newtypePattern"] = newtypePattern;
  exports["drop"] = $foreign.drop;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["length"] = $foreign.length;
  exports["singleton"] = $foreign.singleton;
  exports["split"] = $foreign.split;
  exports["toCharArray"] = $foreign.toCharArray;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
      };
  };
  exports["tuple3"] = tuple3;
  exports["uncurry3"] = uncurry3;
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String = PS["Data.String"];
  var Data_Char = PS["Data.Char"];
  var Data_Enum = PS["Data.Enum"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var AST = PS["AST"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Unit = PS["Data.Unit"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Category = PS["Control.Category"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];        
  var Quat = (function () {
      function Quat(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Quat.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Quat(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Quat;
  })();
  var MatchingError = (function () {
      function MatchingError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MatchingError.create = function (value0) {
          return function (value1) {
              return new MatchingError(value0, value1);
          };
      };
      return MatchingError;
  })();
  var StrictnessError = (function () {
      function StrictnessError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StrictnessError.create = function (value0) {
          return function (value1) {
              return new StrictnessError(value0, value1);
          };
      };
      return StrictnessError;
  })();
  var TooFewArguments = (function () {
      function TooFewArguments(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TooFewArguments.create = function (value0) {
          return function (value1) {
              return new TooFewArguments(value0, value1);
          };
      };
      return TooFewArguments;
  })();
  var IndexError = (function () {
      function IndexError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      IndexError.create = function (value0) {
          return function (value1) {
              return new IndexError(value0, value1);
          };
      };
      return IndexError;
  })();
  var DivByZero = (function () {
      function DivByZero() {

      };
      DivByZero.value = new DivByZero();
      return DivByZero;
  })();
  var $$EvalError = (function () {
      function EvalError(value0) {
          this.value0 = value0;
      };
      EvalError.create = function (value0) {
          return new EvalError(value0);
      };
      return EvalError;
  })();
  var BinaryOpError = (function () {
      function BinaryOpError(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinaryOpError.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinaryOpError(value0, value1, value2);
              };
          };
      };
      return BinaryOpError;
  })();
  var UnaryOpError = (function () {
      function UnaryOpError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnaryOpError.create = function (value0) {
          return function (value1) {
              return new UnaryOpError(value0, value1);
          };
      };
      return UnaryOpError;
  })();
  var NameCaptureError = (function () {
      function NameCaptureError(value0) {
          this.value0 = value0;
      };
      NameCaptureError.create = function (value0) {
          return new NameCaptureError(value0);
      };
      return NameCaptureError;
  })();
  var UnknownFunction = (function () {
      function UnknownFunction(value0) {
          this.value0 = value0;
      };
      UnknownFunction.create = function (value0) {
          return new UnknownFunction(value0);
      };
      return UnknownFunction;
  })();
  var NoMatchingFunction = (function () {
      function NoMatchingFunction(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NoMatchingFunction.create = function (value0) {
          return function (value1) {
              return new NoMatchingFunction(value0, value1);
          };
      };
      return NoMatchingFunction;
  })();
  var BindingError = (function () {
      function BindingError(value0) {
          this.value0 = value0;
      };
      BindingError.create = function (value0) {
          return new BindingError(value0);
      };
      return BindingError;
  })();
  var CannotEvaluate = (function () {
      function CannotEvaluate(value0) {
          this.value0 = value0;
      };
      CannotEvaluate.create = function (value0) {
          return new CannotEvaluate(value0);
      };
      return CannotEvaluate;
  })();
  var NoError = (function () {
      function NoError() {

      };
      NoError.value = new NoError();
      return NoError;
  })();
  var MoreErrors = (function () {
      function MoreErrors(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MoreErrors.create = function (value0) {
          return function (value1) {
              return new MoreErrors(value0, value1);
          };
      };
      return MoreErrors;
  })();
  var zipWithM = function (dictMonad) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v1 instanceof Data_List_Types.Nil) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_List_Types.Nil.value);
                  };
                  if (v2 instanceof Data_List_Types.Nil) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_List_Types.Nil.value);
                  };
                  if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons) {
                      return Control_Apply.apply((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_List_Types.Cons.create)(v(v1.value0)(v2.value0)))(zipWithM(dictMonad)(v)(v1.value1)(v2.value1));
                  };
                  throw new Error("Failed pattern match at Evaluator line 36, column 1 - line 36, column 46: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  };
  var whnf = function (v) {
      if (v instanceof AST.Atom && v.value1 instanceof AST.Name) {
          return false;
      };
      if (v instanceof AST.Atom) {
          return true;
      };
      if (v instanceof AST.List) {
          return true;
      };
      if (v instanceof AST.NTuple) {
          return true;
      };
      if (v instanceof AST.Binary && v.value1.value0 instanceof AST.InfixConstr) {
          return true;
      };
      if (v instanceof AST.App && (v.value1 instanceof AST.Atom && v.value1.value1 instanceof AST.Constr)) {
          return true;
      };
      return false;
  };
  var unsafeTypeTreeToInt = function (v) {
      if (v instanceof AST.Atom && v.value1 instanceof AST.AInt) {
          return v.value1.value0;
      };
      if (v instanceof AST.Atom && v.value1 instanceof AST.Bool) {
          return Data_Enum.fromEnum(Data_Enum.boundedEnumBoolean)(v.value1.value0);
      };
      if (v instanceof AST.Atom && v.value1 instanceof AST.Char) {
          return Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_Maybe.fromMaybe("E")(Data_String.toChar(v.value1.value0)));
      };
      return Data_Bounded.top(Data_Bounded.boundedInt);
  };
  var showMatchingError = new Data_Show.Show(function (v) {
      if (v instanceof MatchingError) {
          return "MatchingError " + (Data_Show.show(AST.showBinding(AST.showMeta))(v.value0) + (" " + Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))(v.value1)));
      };
      if (v instanceof StrictnessError) {
          return "StrictnessError " + (Data_Show.show(AST.showBinding(AST.showMeta))(v.value0) + (" " + Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))(v.value1)));
      };
      if (v instanceof TooFewArguments) {
          return "TooFewArguments " + (Data_Show.show(Data_List_Types.showList(AST.showBinding(AST.showMeta)))(v.value0) + (" " + Data_Show.show(Data_List_Types.showList(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta)))(v.value1)));
      };
      throw new Error("Failed pattern match at Evaluator line 81, column 3 - line 81, column 77: " + [ v.constructor.name ]);
  });
  var showEvalError = new Data_Show.Show(function (v) {
      if (v instanceof IndexError) {
          return "IndexError " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + Data_Show.show(Data_Show.showInt)(v.value1)));
      };
      if (v instanceof DivByZero) {
          return "DivByZero";
      };
      if (v instanceof $$EvalError) {
          return "EvalError " + Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))(v.value0);
      };
      if (v instanceof BinaryOpError) {
          return "BinaryOpError " + (Data_Show.show(AST.showOp)(v.value0) + (" (" + (Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))(v.value1) + (") (" + (Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))(v.value2) + ")")))));
      };
      if (v instanceof UnaryOpError) {
          return "UnaryOpError " + (Data_Show.show(AST.showOp)(v.value0) + (" " + Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))(v.value1)));
      };
      if (v instanceof NameCaptureError) {
          return "NameCaptureError " + Data_Show.show(Data_List_Types.showList(Data_Show.showString))(v.value0);
      };
      if (v instanceof UnknownFunction) {
          return "UnknownFunction " + Data_Show.show(Data_Show.showString)(v.value0);
      };
      if (v instanceof NoMatchingFunction) {
          return "NoMatchingFunction " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + Data_Show.show(Data_List_Types.showList(showMatchingError))(v.value1)));
      };
      if (v instanceof BindingError) {
          return "BindingError " + Data_Show.show(showMatchingError)(v.value0);
      };
      if (v instanceof CannotEvaluate) {
          return "CannotEvaluate " + Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))(v.value0);
      };
      if (v instanceof NoError) {
          return "NoError";
      };
      if (v instanceof MoreErrors) {
          return "(MoreErrors " + (Data_Show.show(showEvalError)(v.value0) + (" " + (Data_Show.show(showEvalError)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Evaluator line 62, column 3 - line 62, column 77: " + [ v.constructor.name ]);
  });
  var runMatcherM = function (idx) {
      return function ($973) {
          return Control_Comonad.extract(Data_Identity.comonadIdentity)(Control_Monad_Except_Trans.runExceptT(Data_Function.flip(Control_Monad_State_Trans.runStateT)(idx)($973)));
      };
  };
  var runEvalM = function (idx) {
      return function ($974) {
          return Control_Comonad.extract(Data_Identity.comonadIdentity)(Control_Monad_Except_Trans.runExceptT(Data_Function.flip(Control_Monad_State_Trans.runStateT)(idx)($974)));
      };
  };                
  var mapMQuat = function (dictMonad) {
      return function (f) {
          return function (v) {
              return Control_Apply.apply((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())(Control_Apply.apply((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())(Control_Apply.apply((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Quat.create)(f(v.value0)))(f(v.value1)))(f(v.value2)))(f(v.value3));
          };
      };
  };
  var insertDef = function (env) {
      return function (v) {
          var $179 = Data_StrMap.lookup(v.value0)(env);
          if ($179 instanceof Data_Maybe.Nothing) {
              return Data_StrMap.insert(v.value0)(Data_List.singleton(new Data_Tuple.Tuple(v.value1, v.value2)))(env);
          };
          if ($179 instanceof Data_Maybe.Just) {
              return Data_StrMap.insert(v.value0)(Data_Semigroup.append(Data_List_Types.semigroupList)($179.value0)(Data_List.singleton(new Data_Tuple.Tuple(v.value1, v.value2))))(env);
          };
          throw new Error("Failed pattern match at Evaluator line 108, column 42 - line 110, column 79: " + [ $179.constructor.name ]);
      };
  };
  var functorQuat = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Quat(f(v.value0), f(v.value1), f(v.value2), f(v.value3));
      };
  });
  var intToABool = function (quat) {
      var intToBool$prime = function (i) {
          var $190 = i <= 0;
          if ($190) {
              return false;
          };
          if (!$190) {
              return true;
          };
          throw new Error("Failed pattern match at Evaluator line 318, column 20 - line 318, column 50: " + [ $190.constructor.name ]);
      };
      var temp = Data_Functor.map(functorQuat)(function (x) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(intToBool$prime)(x);
      })(quat);
      if (temp.value0 instanceof Data_Maybe.Just && temp.value1 instanceof Data_Maybe.Just) {
          var $192 = temp.value0.value0 === temp.value1.value0;
          if ($192) {
              return new Quat(new Data_Maybe.Just(temp.value0.value0), Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
          };
          if (!$192) {
              return temp;
          };
          throw new Error("Failed pattern match at Evaluator line 311, column 33 - line 311, column 95: " + [ $192.constructor.name ]);
      };
      return temp;
  };
  var intToAChar = function (quat) {
      var intToChar$prime = function (i) {
          var c = Data_Char.fromCharCode(i);
          var $199 = c >= Data_Bounded.top(Data_Bounded.boundedChar);
          if ($199) {
              return Data_Bounded.top(Data_Bounded.boundedChar);
          };
          if (!$199) {
              var $200 = c <= Data_Bounded.bottom(Data_Bounded.boundedChar);
              if ($200) {
                  return Data_Bounded.bottom(Data_Bounded.boundedChar);
              };
              if (!$200) {
                  return c;
              };
              throw new Error("Failed pattern match at Evaluator line 330, column 56 - line 330, column 99: " + [ $200.constructor.name ]);
          };
          throw new Error("Failed pattern match at Evaluator line 330, column 20 - line 330, column 99: " + [ $199.constructor.name ]);
      };
      var temp = Data_Functor.map(functorQuat)(function (x) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(intToChar$prime)(x);
      })(quat);
      if (temp.value0 instanceof Data_Maybe.Just && temp.value1 instanceof Data_Maybe.Just) {
          var $202 = temp.value0.value0 === temp.value1.value0;
          if ($202) {
              return new Quat(new Data_Maybe.Just(temp.value0.value0), Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
          };
          if (!$202) {
              return temp;
          };
          throw new Error("Failed pattern match at Evaluator line 323, column 33 - line 323, column 95: " + [ $202.constructor.name ]);
      };
      return temp;
  };
  var freshMeta = function (dictMonadState) {
      return Control_Bind.bind((dictMonadState["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Monad_State_Class.get(dictMonadState))(function (v) {
          return Control_Bind.bind((dictMonadState["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Monad_State_Class.modify(dictMonadState)(function (i1) {
              return i1 + 1 | 0;
          }))(function () {
              return Control_Applicative.pure((dictMonadState["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(AST.idxMeta(v));
          });
      });
  };
  var modulo = function (v) {
      return function (v1) {
          if (v instanceof AST.Atom && (v.value1 instanceof AST.AInt && (v1 instanceof AST.Atom && (v1.value1 instanceof AST.AInt && v1.value1.value0 === 0)))) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(DivByZero.value);
          };
          if (v instanceof AST.Atom && (v.value1 instanceof AST.AInt && (v1 instanceof AST.Atom && v1.value1 instanceof AST.AInt))) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.AInt.create(v.value1.value0 % v1.value1.value0)));
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(new AST.InfixFunc("mod"), v, v1));
      };
  };
  var unary = function (env) {
      return function (v) {
          return function (v1) {
              if (v.value0 instanceof AST.Sub && (v1 instanceof AST.Atom && v1.value1 instanceof AST.AInt)) {
                  return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.AInt(-v1.value1.value0)));
              };
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new UnaryOpError(v.value0, v1));
          };
      };
  };
  var wrapLambda = function (binds) {
      return function (args) {
          return function (body) {
              var $234 = Data_Ord.compare(Data_Ord.ordInt)(Data_List.length(binds))(Data_List.length(args));
              if ($234 instanceof Data_Ordering.EQ) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(body);
              };
              if ($234 instanceof Data_Ordering.GT) {
                  return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Lambda.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List.drop(Data_List.length(args))(binds))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(body));
              };
              if ($234 instanceof Data_Ordering.LT) {
                  return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.App.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(body)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List.drop(Data_List.length(binds))(args)));
              };
              throw new Error("Failed pattern match at Evaluator line 243, column 3 - line 246, column 78: " + [ $234.constructor.name ]);
          };
      };
  };
  var freshIndices = AST.traverseTree(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.traverseBinding(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(function (v) {
      return freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
  }))(function (v) {
      return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_Tuple.Tuple.create(v.value0))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))));
  })(function (v) {
      return freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
  });
  var freeVariables = function (v) {
      return Data_List_Types.Nil.value;
  };
  var envToDefs = function (env) {
      var tupleToDef = function (v) {
          return Data_Functor.map(Data_List_Types.functorList)(function (v1) {
              return new AST.Def(v.value0, v1.value0, v1.value1);
          })(v.value1);
      };
      return Data_List.concat(Data_Functor.map(Data_List_Types.functorList)(tupleToDef)(Data_StrMap.toList(env)));
  };
  var division = function (v) {
      return function (v1) {
          if (v instanceof AST.Atom && (v.value1 instanceof AST.AInt && (v1 instanceof AST.Atom && (v1.value1 instanceof AST.AInt && v1.value1.value0 === 0)))) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(DivByZero.value);
          };
          if (v instanceof AST.Atom && (v.value1 instanceof AST.AInt && (v1 instanceof AST.Atom && v1.value1 instanceof AST.AInt))) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.AInt.create(v.value1.value0 / v1.value1.value0 | 0)));
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(new AST.InfixFunc("div"), v, v1));
      };
  };
  var defsToEnv = Data_Foldable.foldl(Data_List_Types.foldableList)(insertDef)(Data_StrMap.empty);
  var clampSucc = function (i) {
      var $260 = i < Data_Bounded.top(Data_Bounded.boundedInt);
      if ($260) {
          return new Data_Maybe.Just(i + 1 | 0);
      };
      if (!$260) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Evaluator line 292, column 15 - line 292, column 56: " + [ $260.constructor.name ]);
  };
  var clampStep = function (istart) {
      return function (istep) {
          var $261 = istep >= istart;
          if ($261) {
              var $262 = Data_Bounded.top(Data_Bounded.boundedInt) - istep >= istep - istart;
              if ($262) {
                  return new Data_Maybe.Just(istep + (istep - istart) | 0);
              };
              if (!$262) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Evaluator line 296, column 8 - line 296, column 97: " + [ $262.constructor.name ]);
          };
          if (!$261) {
              var $263 = Data_Bounded.bottom(Data_Bounded.boundedInt) - istep <= istep - istart;
              if ($263) {
                  return new Data_Maybe.Just(istep + (istep - istart) | 0);
              };
              if (!$263) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Evaluator line 297, column 8 - line 297, column 97: " + [ $263.constructor.name ]);
          };
          throw new Error("Failed pattern match at Evaluator line 295, column 26 - line 297, column 97: " + [ $261.constructor.name ]);
      };
  };
  var checkStrictness = function (bs) {
      return function (es) {
          if (whnf(es)) {
              return new MatchingError(bs, es);
          };
          if (Data_Boolean.otherwise) {
              return new StrictnessError(bs, es);
          };
          throw new Error("Failed pattern match at Evaluator line 584, column 1 - line 585, column 58: " + [ bs.constructor.name, es.constructor.name ]);
      };
  };
  var match$prime = function (v) {
      return function (v1) {
          if (v instanceof AST.Lit && v.value1 instanceof AST.Name) {
              return Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Data_StrMap.insert(v.value1.value0)(v1));
          };
          if (v instanceof AST.Lit && v1 instanceof AST.Atom) {
              var $271 = Data_Eq.eq(AST.eqAtom)(v.value1)(v1.value1);
              if ($271) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Data_Unit.unit);
              };
              if (!$271) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(new MatchingError(new AST.Lit(v.value0, v.value1), new AST.Atom(v1.value0, v1.value1)));
              };
              throw new Error("Failed pattern match at Evaluator line 603, column 50 - line 605, column 115: " + [ $271.constructor.name ]);
          };
          if (v instanceof AST.Lit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(checkStrictness(new AST.Lit(v.value0, v.value1))(v1));
          };
          if (v instanceof AST.ConsLit && (v1 instanceof AST.Binary && v1.value1.value0 instanceof AST.Colon)) {
              return Control_Apply.applySecond(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(match$prime(v.value1)(v1.value2))(match$prime(v.value2)(v1.value3));
          };
          if (v instanceof AST.ConsLit && (v1 instanceof AST.List && v1.value1 instanceof Data_List_Types.Cons)) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(function (v2) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(function (v3) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(function (v4) {
                          return match$prime(new AST.ConsLit(v.value0, v.value1, v.value2))(AST.binary(v3)(v4)(AST.Colon.value)(v1.value1.value0)(new AST.List(v2, v1.value1.value1)));
                      });
                  });
              });
          };
          if (v instanceof AST.ConsLit && (v1 instanceof AST.List && v1.value1 instanceof Data_List_Types.Nil)) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(new MatchingError(new AST.ConsLit(v.value0, v.value1, v.value2), new AST.List(v1.value0, Data_List_Types.Nil.value)));
          };
          if (v instanceof AST.ConsLit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(checkStrictness(new AST.ConsLit(v.value0, v.value1, v.value2))(v1));
          };
          if (v instanceof AST.ListLit && (v.value1 instanceof Data_List_Types.Cons && (v1 instanceof AST.Binary && v1.value1.value0 instanceof AST.Colon))) {
              return Control_Apply.applySecond(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(match$prime(v.value1.value0)(v1.value2))(match$prime(new AST.ListLit(v.value0, v.value1.value1))(v1.value3));
          };
          if (v instanceof AST.ListLit && v1 instanceof AST.List) {
              var $315 = Data_List.length(v.value1) === Data_List.length(v1.value1);
              if ($315) {
                  return Data_Functor["void"](Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))))(Data_List.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(match$prime)(v.value1)(v1.value1));
              };
              if (!$315) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(new MatchingError(new AST.ListLit(v.value0, v.value1), new AST.List(v1.value0, v1.value1)));
              };
              throw new Error("Failed pattern match at Evaluator line 618, column 63 - line 620, column 125: " + [ $315.constructor.name ]);
          };
          if (v instanceof AST.ListLit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(checkStrictness(new AST.ListLit(v.value0, v.value1))(v1));
          };
          if (v instanceof AST.NTupleLit && v1 instanceof AST.NTuple) {
              var $322 = Data_List.length(v.value1) === Data_List.length(v1.value1);
              if ($322) {
                  return Data_Functor["void"](Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))))(Data_List.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(match$prime)(v.value1)(v1.value1));
              };
              if (!$322) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(new MatchingError(new AST.NTupleLit(v.value0, v.value1), new AST.NTuple(v1.value0, v1.value1)));
              };
              throw new Error("Failed pattern match at Evaluator line 623, column 51 - line 625, column 117: " + [ $322.constructor.name ]);
          };
          if (v instanceof AST.NTupleLit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(checkStrictness(new AST.NTupleLit(v.value0, v.value1))(v1));
          };
          if (v instanceof AST.ConstrLit && (v.value1 instanceof AST.PrefixDataConstr && (v1 instanceof AST.App && (v1.value1 instanceof AST.Atom && v1.value1.value1 instanceof AST.Constr)))) {
              var $329 = v.value1.value0 === v1.value1.value1.value0 && Data_List.length(v.value1.value2) === Data_List.length(v1.value2);
              if ($329) {
                  return Data_Functor["void"](Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))))(Data_List.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(match$prime)(v.value1.value2)(v1.value2));
              };
              if (!$329) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(new MatchingError(v, v1));
              };
              throw new Error("Failed pattern match at Evaluator line 628, column 5 - line 630, column 49: " + [ $329.constructor.name ]);
          };
          if (v instanceof AST.ConstrLit && (v.value1 instanceof AST.InfixDataConstr && (v1 instanceof AST.Binary && v1.value1.value0 instanceof AST.InfixConstr))) {
              var $341 = v.value1.value0 === v1.value1.value0.value0;
              if ($341) {
                  return Control_Apply.applySecond(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(match$prime(v.value1.value3)(v1.value2))(match$prime(v.value1.value4)(v1.value3));
              };
              if (!$341) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(new MatchingError(v, v1));
              };
              throw new Error("Failed pattern match at Evaluator line 633, column 5 - line 635, column 49: " + [ $341.constructor.name ]);
          };
          if (v instanceof AST.ConstrLit && (v.value1 instanceof AST.InfixDataConstr && (v1 instanceof AST.App && (v1.value1 instanceof AST.PrefixOp && (v1.value1.value1.value0 instanceof AST.InfixConstr && (v1.value2 instanceof Data_List_Types.Cons && (v1.value2.value1 instanceof Data_List_Types.Cons && v1.value2.value1.value1 instanceof Data_List_Types.Nil))))))) {
              var $356 = v.value1.value0 === v1.value1.value1.value0.value0;
              if ($356) {
                  return Control_Apply.applySecond(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(match$prime(v.value1.value3)(v1.value2.value0))(match$prime(v.value1.value4)(v1.value2.value1.value0));
              };
              if (!$356) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(new MatchingError(v, v1));
              };
              throw new Error("Failed pattern match at Evaluator line 638, column 5 - line 640, column 49: " + [ $356.constructor.name ]);
          };
          if (v instanceof AST.ConstrLit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))))(checkStrictness(v)(v1));
          };
          throw new Error("Failed pattern match at Evaluator line 602, column 1 - line 602, column 76: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var boundNames = (function () {
      var go = function (v) {
          if (v instanceof AST.Lit && v.value1 instanceof AST.Name) {
              return Data_List.singleton(v.value1.value0);
          };
          if (v instanceof AST.ConsLit) {
              return Data_Semigroup.append(Data_List_Types.semigroupList)(go(v.value1))(go(v.value2));
          };
          if (v instanceof AST.ListLit) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_List_Types.monoidList)(go)(v.value1);
          };
          if (v instanceof AST.NTupleLit) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_List_Types.monoidList)(go)(v.value1);
          };
          return Data_List_Types.Nil.value;
      };
      return go;
  })();
  var boundNames$prime = Data_List.concatMap(boundNames);
  var removeOverlapping = function (bind) {
      var removeOverlapping$prime = function (v) {
          if (v instanceof Data_List_Types.Nil) {
              return Control_Category.id(Control_Category.categoryFn);
          };
          if (v instanceof Data_List_Types.Cons) {
              return function ($975) {
                  return removeOverlapping$prime(v.value1)(Data_StrMap["delete"](v.value0)($975));
              };
          };
          throw new Error("Failed pattern match at Evaluator line 649, column 5 - line 649, column 40: " + [ v.constructor.name ]);
      };
      return removeOverlapping$prime(boundNames(bind));
  };
  var avoidCapture = function (subs) {
      return function (binds) {
          var $392 = Data_List.intersect(Data_Eq.eqString)(Data_List.concatMap(freeVariables)(Data_StrMap.values(subs)))(boundNames$prime(binds));
          if ($392 instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Unit.unit);
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new NameCaptureError($392));
      };
  };
  var scope = function (b) {
      return function (e) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(function (v) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(replace$prime(v)(e)))(function (v1) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(removeOverlapping(b)))(function () {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(v1);
                  });
              });
          });
      };
  };
  var replaceQualifiers = (function () {
      var replaceQual = function (qual) {
          if (qual instanceof AST.Gen) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(scope(qual.value1)(qual.value2))(function (e$prime) {
                  return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))))(AST.Gen.create)(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(qual.value1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(e$prime));
              });
          };
          if (qual instanceof AST.Let) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(scope(qual.value1)(qual.value2))(function (e$prime) {
                  return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))))(AST.Let.create)(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(qual.value1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(e$prime));
              });
          };
          if (qual instanceof AST.Guard) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(function (v) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(replace$prime(v)(qual.value1)))(function (v1) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))))(AST.Guard.create)(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(v1));
                  });
              });
          };
          throw new Error("Failed pattern match at Evaluator line 450, column 24 - line 456, column 45: " + [ qual.constructor.name ]);
      };
      return Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(replaceQual);
  })();
  var replaceBindings = Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(scope(v.value0)(v.value1))(function (v1) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(new Data_Tuple.Tuple(v.value0, v1));
      });
  });
  var replace$prime = function (subs) {
      var go = function (tt) {
          if (tt instanceof AST.Atom && tt.value1 instanceof AST.Name) {
              var $411 = Data_StrMap.lookup(tt.value1.value0)(subs);
              if ($411 instanceof Data_Maybe.Just) {
                  return AST.traverseTree(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.traverseBinding(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(function (v) {
                      return freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
                  }))(function (v) {
                      return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_Tuple.Tuple.create(v.value0))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))));
                  })(function (v) {
                      return freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
                  })($411.value0);
              };
              if ($411 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(tt);
              };
              throw new Error("Failed pattern match at Evaluator line 662, column 31 - line 668, column 33: " + [ $411.constructor.name ]);
          };
          if (tt instanceof AST.List) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(go)(tt.value1));
          };
          if (tt instanceof AST.NTuple) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.NTuple.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(go)(tt.value1));
          };
          if (tt instanceof AST.Binary) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Binary.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(tt.value1)))(go(tt.value2)))(go(tt.value3));
          };
          if (tt instanceof AST.Unary) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Unary.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(tt.value1)))(go(tt.value2));
          };
          if (tt instanceof AST.SectL) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.SectL.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(go(tt.value1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(tt.value2));
          };
          if (tt instanceof AST.SectR) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.SectR.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(tt.value1)))(go(tt.value2));
          };
          if (tt instanceof AST.IfExpr) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.IfExpr.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(go(tt.value1)))(go(tt.value2)))(go(tt.value3));
          };
          if (tt instanceof AST.ArithmSeq) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.ArithmSeq.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(go(tt.value1)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(go)(tt.value2)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(go)(tt.value3));
          };
          if (tt instanceof AST.Lambda) {
              return Control_Apply.applySecond(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(avoidCapture(subs)(tt.value1))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Lambda.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(tt.value1)))(replace$prime(Data_Foldable.foldr(Data_List_Types.foldableList)(Data_StrMap["delete"])(subs)(boundNames$prime(tt.value1)))(tt.value2)));
          };
          if (tt instanceof AST.App) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.App.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(go(tt.value1)))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(go)(tt.value2));
          };
          if (tt instanceof AST.ListComp) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Trans.runStateT(replaceQualifiers(tt.value2))(subs))(function (v) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(replace$prime(v.value1)(tt.value1))(function (v1) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.ListComp.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v.value0));
                  });
              });
          };
          if (tt instanceof AST.LetExpr) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Trans.runStateT(replaceBindings(tt.value1))(subs))(function (v) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(replace$prime(v.value1)(tt.value2))(function (v1) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.LetExpr.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v.value0)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v1));
                  });
              });
          };
          return freshIndices(tt);
      };
      return go;
  };
  var abs = function (x) {
      var $466 = x < 0;
      if ($466) {
          return -x;
      };
      if (!$466) {
          return x;
      };
      throw new Error("Failed pattern match at Evaluator line 289, column 9 - line 289, column 32: " + [ $466.constructor.name ]);
  };
  var intFromStepTo = function (start) {
      return function (v) {
          return function (v1) {
              if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
                  return new Quat(new Data_Maybe.Just(start), clampSucc(start), Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Nothing) {
                  var $470 = clampStep(start)(v.value0);
                  if ($470 instanceof Data_Maybe.Just) {
                      return new Quat(new Data_Maybe.Just(start), new Data_Maybe.Just(v.value0), new Data_Maybe.Just($470.value0), Data_Maybe.Nothing.value);
                  };
                  if ($470 instanceof Data_Maybe.Nothing) {
                      return new Quat(new Data_Maybe.Just(start), new Data_Maybe.Just(v.value0), Data_Maybe.Nothing.value, new Data_Maybe.Just(v.value0));
                  };
                  throw new Error("Failed pattern match at Evaluator line 268, column 43 - line 270, column 66: " + [ $470.constructor.name ]);
              };
              if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Just) {
                  var $473 = start > v1.value0;
                  if ($473) {
                      return new Quat(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                  };
                  if (!$473) {
                      var $474 = start === v1.value0;
                      if ($474) {
                          return new Quat(new Data_Maybe.Just(v1.value0), Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                      };
                      if (!$474) {
                          var $475 = clampSucc(start);
                          if ($475 instanceof Data_Maybe.Just) {
                              return new Quat(new Data_Maybe.Just(start), new Data_Maybe.Just($475.value0), Data_Maybe.Nothing.value, new Data_Maybe.Just(v1.value0));
                          };
                          if ($475 instanceof Data_Maybe.Nothing) {
                              return new Quat(new Data_Maybe.Just(start), Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                          };
                          throw new Error("Failed pattern match at Evaluator line 276, column 14 - line 278, column 63: " + [ $475.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Evaluator line 274, column 12 - line 278, column 63: " + [ $474.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Evaluator line 272, column 42 - line 278, column 63: " + [ $473.constructor.name ]);
              };
              if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                  var $478 = start <= v.value0 && start > v1.value0 || start > v.value0 && start < v1.value0;
                  if ($478) {
                      return new Quat(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                  };
                  if (!$478) {
                      var $479 = start === v1.value0 || abs(v.value0) > abs(v1.value0);
                      if ($479) {
                          return new Quat(new Data_Maybe.Just(start), Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                      };
                      if (!$479) {
                          var $480 = clampStep(start)(v.value0);
                          if ($480 instanceof Data_Maybe.Nothing) {
                              return new Quat(new Data_Maybe.Just(start), new Data_Maybe.Just(v.value0), Data_Maybe.Nothing.value, new Data_Maybe.Just(v.value0));
                          };
                          if ($480 instanceof Data_Maybe.Just) {
                              return new Quat(new Data_Maybe.Just(start), new Data_Maybe.Just(v.value0), new Data_Maybe.Just($480.value0), new Data_Maybe.Just(v1.value0));
                          };
                          throw new Error("Failed pattern match at Evaluator line 284, column 10 - line 286, column 74: " + [ $480.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Evaluator line 282, column 12 - line 286, column 74: " + [ $479.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Evaluator line 280, column 46 - line 286, column 74: " + [ $478.constructor.name ]);
              };
              throw new Error("Failed pattern match at Evaluator line 266, column 1 - line 266, column 94: " + [ start.constructor.name, v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var exprFromStepTo = function (start) {
      return function (step) {
          return function (end) {
              var intQuat = intFromStepTo(unsafeTypeTreeToInt(start))(Data_Functor.map(Data_Maybe.functorMaybe)(unsafeTypeTreeToInt)(step))(Data_Functor.map(Data_Maybe.functorMaybe)(unsafeTypeTreeToInt)(end));
              if (start instanceof AST.Atom && start.value1 instanceof AST.AInt) {
                  return mapMQuat(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(function (a) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.AInt(a)));
                  }))(intQuat);
              };
              if (start instanceof AST.Atom && start.value1 instanceof AST.Bool) {
                  return mapMQuat(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(function (a) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Bool(a)));
                  }))(intToABool(intQuat));
              };
              if (start instanceof AST.Atom && start.value1 instanceof AST.Char) {
                  return mapMQuat(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(function (a) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Char(Data_String.singleton(a))));
                  }))(intToAChar(intQuat));
              };
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new Quat(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value, Data_Maybe.Nothing.value));
          };
      };
  };
  var evalArithmSeq = function (start) {
      return function (step) {
          return function (end) {
              var isValid = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return true;
                  };
                  if (v instanceof Data_Maybe.Just && (v.value0 instanceof AST.Atom && v.value0.value1 instanceof AST.Name)) {
                      return false;
                  };
                  if (v instanceof Data_Maybe.Just && v.value0 instanceof AST.Atom) {
                      return true;
                  };
                  return false;
              };
              var evalArithmSeq$prime = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(exprFromStepTo(start)(step)(end))(function (v) {
                  if (v.value0 instanceof Data_Maybe.Nothing) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List_Types.Nil.value));
                  };
                  if (v.value0 instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Nothing) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v1) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.binary)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.Colon.value)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v.value0.value0)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.List(v1, Data_List_Types.Nil.value)));
                      });
                  };
                  if (v.value0 instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v1) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.binary)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.Colon.value)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v.value0.value0)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.ArithmSeq(v1, v.value1.value0, v.value2, v.value3)));
                      });
                  };
                  throw new Error("Failed pattern match at Evaluator line 353, column 7 - line 370, column 42: " + [ v.constructor.name ]);
              });
              var $521 = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraBoolean))(true)(Data_Functor.map(Data_Functor.functorArray)(isValid)([ new Data_Maybe.Just(start), step, end ]));
              if (!$521) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(CannotEvaluate.create(new AST.ArithmSeq(AST.emptyMeta, start, step, end)));
              };
              if ($521) {
                  return evalArithmSeq$prime;
              };
              throw new Error("Failed pattern match at Evaluator line 340, column 32 - line 342, column 26: " + [ $521.constructor.name ]);
          };
      };
  };
  var tryAll = function (v) {
      return function (v1) {
          return function (v2) {
              return function (name) {
                  return function (errs) {
                      if (v1 instanceof Data_List_Types.Nil) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new NoMatchingFunction(name, errs));
                      };
                      if (v1 instanceof Data_List_Types.Cons && Data_List.length(v2) < Data_List.length(v1.value0.value0)) {
                          return tryAll(v)(v1.value1)(v2)(name)(Data_Semigroup.append(Data_List_Types.semigroupList)(errs)(Data_List.singleton(new TooFewArguments(v1.value0.value0, v2))));
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v3) {
                              var $532 = runMatcherM(v3)(matchls$prime(v)(v1.value0.value0)(v2));
                              if ($532 instanceof Data_Either.Right) {
                                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))($532.value0.value1))(function () {
                                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(replace$prime($532.value0.value0)(v1.value0.value1))(function (v4) {
                                          return wrapLambda(v1.value0.value0)(v2)(v4);
                                      });
                                  });
                              };
                              if ($532 instanceof Data_Either.Left && $532.value0 instanceof StrictnessError) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new NoMatchingFunction(name, Data_Semigroup.append(Data_List_Types.semigroupList)(errs)(Data_List.singleton($532.value0))));
                              };
                              if ($532 instanceof Data_Either.Left) {
                                  return tryAll(v)(v1.value1)(v2)(name)(Data_Semigroup.append(Data_List_Types.semigroupList)(errs)(Data_List.singleton($532.value0)));
                              };
                              throw new Error("Failed pattern match at Evaluator line 566, column 3 - line 572, column 88: " + [ $532.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Evaluator line 562, column 1 - line 562, column 97: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, name.constructor.name, errs.constructor.name ]);
                  };
              };
          };
      };
  };
  var recurse = function (env) {
      return function (expr) {
          return function (bnd) {
              var evalToBindingQual = function (environment) {
                  return function (qual) {
                      return function (bnding) {
                          if (qual instanceof AST.Let) {
                              return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.Let.create(qual.value0)(qual.value1))(evalToBinding(environment)(qual.value2)(bnd));
                          };
                          if (qual instanceof AST.Gen) {
                              return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.Gen.create(qual.value0)(qual.value1))(evalToBinding(environment)(qual.value2)(bnd));
                          };
                          if (qual instanceof AST.Guard) {
                              return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.Guard.create(qual.value0))(evalToBinding(environment)(qual.value1)(bnd));
                          };
                          throw new Error("Failed pattern match at Evaluator line 234, column 49 - line 237, column 69: " + [ qual.constructor.name ]);
                      };
                  };
              };
              var expr$prime = (function () {
                  if (expr instanceof AST.Binary) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.Binary.create(expr.value0))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr.value1)))(evalToBinding(env)(expr.value2)(bnd)))(evalToBinding(env)(expr.value3)(bnd));
                  };
                  if (expr instanceof AST.Unary) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.Unary.create(expr.value0))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr.value1)))(evalToBinding(env)(expr.value2)(bnd));
                  };
                  if (expr instanceof AST.List) {
                      return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.List.create(expr.value0))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(function (e) {
                          return evalToBinding(env)(e)(bnd);
                      })(expr.value1));
                  };
                  if (expr instanceof AST.NTuple) {
                      return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.NTuple.create(expr.value0))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(function (e) {
                          return evalToBinding(env)(e)(bnd);
                      })(expr.value1));
                  };
                  if (expr instanceof AST.IfExpr) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.IfExpr.create(expr.value0))(evalToBinding(env)(expr.value1)(bnd)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr.value2)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr.value3));
                  };
                  if (expr instanceof AST.App && (expr.value1 instanceof AST.Atom && expr.value1.value1 instanceof AST.Constr)) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.App.create(expr.value0))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr.value1)))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(function (e) {
                          return evalToBinding(env)(e)(bnd);
                      })(expr.value2));
                  };
                  if (expr instanceof AST.App) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.App.create(expr.value0))(evalToBinding(env)(expr.value1)(bnd)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr.value2));
                  };
                  if (expr instanceof AST.ArithmSeq) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.ArithmSeq.create(expr.value0))(evalToBinding(env)(expr.value1)(bnd)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(function (x) {
                          return evalToBinding(env)(x)(bnd);
                      })(expr.value2)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(function (x) {
                          return evalToBinding(env)(x)(bnd);
                      })(expr.value3));
                  };
                  if (expr instanceof AST.ListComp) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.ListComp.create(expr.value0))(evalToBinding(env)(expr.value1)(bnd)))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(function (x) {
                          return evalToBindingQual(env)(x)(bnd);
                      })(expr.value2));
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr);
              })();
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(expr$prime)(function (v) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v1) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))((function () {
                          var $588 = runEvalM(v1)(eval1(env)(v));
                          if ($588 instanceof Data_Either.Left) {
                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(v);
                          };
                          if ($588 instanceof Data_Either.Right) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))($588.value0.value1))(function () {
                                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))($588.value0.value0);
                              });
                          };
                          throw new Error("Failed pattern match at Evaluator line 199, column 13 - line 203, column 18: " + [ $588.constructor.name ]);
                      })())(function (v2) {
                          var $594 = AST["eq'"](expr)(v2);
                          if ($594) {
                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr);
                          };
                          if (!$594) {
                              return evalToBinding(env)(v2)(bnd);
                          };
                          throw new Error("Failed pattern match at Evaluator line 204, column 3 - line 206, column 39: " + [ $594.constructor.name ]);
                      });
                  });
              });
          };
      };
  };
  var matchls$prime = function (env) {
      return function (bs) {
          return function (es) {
              var m = function (b) {
                  return function (t) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(function (v) {
                          var bndAndIdx = Control_Monad_State.runState(evalToBinding(env)(t)(b))(v);
                          var i$prime = Data_Tuple.snd(bndAndIdx);
                          var t$prime = Data_Tuple.fst(bndAndIdx);
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(i$prime)))(function () {
                              return match$prime(b)(t$prime);
                          });
                      });
                  };
              };
              return Control_Monad_State_Trans.execStateT(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_List.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(m)(bs)(es))(Data_StrMap.empty);
          };
      };
  };
  var evalToBinding = function (env) {
      return function (expr) {
          return function (bnd) {
              if (bnd instanceof AST.Lit && (bnd.value1 instanceof AST.Name && bnd.value1.value0 === "_|_")) {
                  return recurse(env)(expr)(bnd);
              };
              if (bnd instanceof AST.Lit && bnd.value1 instanceof AST.Name) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr);
              };
              if (bnd instanceof AST.Lit) {
                  if (expr instanceof AST.Atom) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr);
                  };
                  return recurse(env)(expr)(bnd);
              };
              if (bnd instanceof AST.ConsLit) {
                  if (expr instanceof AST.Binary && expr.value1.value0 instanceof AST.Colon) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.Binary.create(expr.value0)(new Data_Tuple.Tuple(AST.Colon.value, expr.value1.value1)))(evalToBinding(env)(expr.value2)(bnd.value1)))(evalToBinding(env)(expr.value3)(bnd.value2));
                  };
                  if (expr instanceof AST.List && expr.value1 instanceof Data_List_Types.Cons) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v) {
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v1) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v2) {
                                  return evalToBinding(env)(new AST.Binary(v, new Data_Tuple.Tuple(AST.Colon.value, v1), expr.value1.value0, new AST.List(v2, expr.value1.value1)))(bnd);
                              });
                          });
                      });
                  };
                  return recurse(env)(expr)(bnd);
              };
              if (bnd instanceof AST.ListLit) {
                  if (expr instanceof AST.List) {
                      if (Data_List.length(expr.value1) === Data_List.length(bnd.value1)) {
                          return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.List.create(expr.value0))(zipWithM(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(evalToBinding(env))(expr.value1)(bnd.value1));
                      };
                      if (Data_Boolean.otherwise) {
                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr);
                      };
                  };
                  return recurse(env)(expr)(bnd);
              };
              if (bnd instanceof AST.NTupleLit) {
                  if (expr instanceof AST.NTuple) {
                      return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.NTuple.create(expr.value0))(zipWithM(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(evalToBinding(env))(expr.value1)(bnd.value1));
                  };
                  return recurse(env)(expr)(bnd);
              };
              if (bnd instanceof AST.ConstrLit && bnd.value1 instanceof AST.PrefixDataConstr) {
                  if (expr instanceof AST.App && (expr.value1 instanceof AST.Atom && expr.value1.value1 instanceof AST.Constr)) {
                      var $636 = bnd.value1.value0 === expr.value1.value1.value0 && Data_List.length(bnd.value1.value2) === Data_List.length(expr.value2);
                      if ($636) {
                          return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.App.create(expr.value0)(new AST.Atom(expr.value1.value0, new AST.Constr(expr.value1.value1.value0))))(zipWithM(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(evalToBinding(env))(expr.value2)(bnd.value1.value2));
                      };
                      if (!$636) {
                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr);
                      };
                      throw new Error("Failed pattern match at Evaluator line 174, column 9 - line 176, column 29: " + [ $636.constructor.name ]);
                  };
                  return recurse(env)(expr)(bnd);
              };
              if (bnd instanceof AST.ConstrLit && bnd.value1 instanceof AST.InfixDataConstr) {
                  if (expr instanceof AST.App && (expr.value1 instanceof AST.PrefixOp && (expr.value1.value1.value0 instanceof AST.InfixConstr && (expr.value2 instanceof Data_List_Types.Cons && (expr.value2.value1 instanceof Data_List_Types.Cons && expr.value2.value1.value1 instanceof Data_List_Types.Nil))))) {
                      var $649 = bnd.value1.value0 === expr.value1.value1.value0.value0;
                      if ($649) {
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(evalToBinding(env)(expr.value2.value0)(bnd.value1.value3))(function (v) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(evalToBinding(env)(expr.value2.value1.value0)(bnd.value1.value4))(function (v1) {
                                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new AST.App(expr.value0, new AST.PrefixOp(expr.value1.value0, new Data_Tuple.Tuple(new AST.InfixConstr(expr.value1.value1.value0.value0), expr.value1.value1.value1)), new Data_List_Types.Cons(v, new Data_List_Types.Cons(v1, Data_List_Types.Nil.value))));
                              });
                          });
                      };
                      if (!$649) {
                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr);
                      };
                      throw new Error("Failed pattern match at Evaluator line 181, column 9 - line 186, column 32: " + [ $649.constructor.name ]);
                  };
                  if (expr instanceof AST.Binary && expr.value1.value0 instanceof AST.InfixConstr) {
                      var $664 = bnd.value1.value0 === expr.value1.value0.value0;
                      if ($664) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(AST.Binary.create(expr.value0)(new Data_Tuple.Tuple(new AST.InfixConstr(expr.value1.value0.value0), expr.value1.value1)))(evalToBinding(env)(expr.value2)(bnd.value1.value3)))(evalToBinding(env)(expr.value3)(bnd.value1.value4));
                      };
                      if (!$664) {
                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(expr);
                      };
                      throw new Error("Failed pattern match at Evaluator line 188, column 9 - line 190, column 32: " + [ $664.constructor.name ]);
                  };
                  return recurse(env)(expr)(bnd);
              };
              throw new Error("Failed pattern match at Evaluator line 146, column 30 - line 191, column 32: " + [ bnd.constructor.name ]);
          };
      };
  };
  var evalListComp = function (v) {
      return function (expr) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List.singleton(expr)));
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  if (v1.value0 instanceof AST.Guard && (v1.value0.value1 instanceof AST.Atom && (v1.value0.value1.value1 instanceof AST.Bool && !v1.value0.value1.value1.value0))) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List_Types.Nil.value));
                  };
                  if (v1.value0 instanceof AST.Guard && (v1.value0.value1 instanceof AST.Atom && (v1.value0.value1.value1 instanceof AST.Bool && v1.value0.value1.value1.value0))) {
                      if (Data_List["null"](v1.value1)) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List.singleton(expr)));
                      };
                      if (Data_Boolean.otherwise) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.ListComp.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v1.value1));
                      };
                  };
                  if (v1.value0 instanceof AST.Gen && (v1.value0.value2 instanceof AST.List && v1.value0.value2.value1 instanceof Data_List_Types.Nil)) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List_Types.Nil.value));
                  };
                  if (v1.value0 instanceof AST.Gen && (v1.value0.value2 instanceof AST.List && v1.value0.value2.value1 instanceof Data_List_Types.Cons)) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v2) {
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(evalListComp(v)(expr)(new Data_List_Types.Cons(new AST.Let(v2, v1.value0.value1, v1.value0.value2.value1.value0), v1.value1)))(function (v3) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v4) {
                                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v5) {
                                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v6) {
                                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.ListComp(v4, expr, new Data_List_Types.Cons(new AST.Gen(v5, v1.value0.value1, new AST.List(v6, v1.value0.value2.value1.value1)), v1.value1))))(function (v7) {
                                              if (v3 instanceof AST.List && (v3.value1 instanceof Data_List_Types.Cons && v3.value1.value1 instanceof Data_List_Types.Nil)) {
                                                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v8) {
                                                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v9) {
                                                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Binary(v8, new Data_Tuple.Tuple(AST.Colon.value, v9), v3.value1.value0, v7));
                                                      });
                                                  });
                                              };
                                              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.binary)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.Append.value)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v3)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v7));
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  };
                  if (v1.value0 instanceof AST.Gen && (v1.value0.value2 instanceof AST.Binary && v1.value0.value2.value1.value0 instanceof AST.Colon)) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v2) {
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(evalListComp(v)(expr)(new Data_List_Types.Cons(new AST.Let(v2, v1.value0.value1, v1.value0.value2.value2), v1.value1)))(function (v3) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v4) {
                                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v5) {
                                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.ListComp(v4, expr, new Data_List_Types.Cons(new AST.Gen(v5, v1.value0.value1, v1.value0.value2.value3), v1.value1))))(function (v6) {
                                          if (v3 instanceof AST.List && (v3.value1 instanceof Data_List_Types.Cons && v3.value1.value1 instanceof Data_List_Types.Nil)) {
                                              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.binary)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.Colon.value)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v3.value1.value0)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v6));
                                          };
                                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.binary)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.Append.value)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v3)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v6));
                                      });
                                  });
                              });
                          });
                      });
                  };
                  if (v1.value0 instanceof AST.Gen) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v2) {
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v3) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v4) {
                                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v5) {
                                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v6) {
                                          var e$prime = Control_Monad_State.runState(evalToBinding(v)(v1.value0.value2)(new AST.ConsLit(v4, v1.value0.value1, new AST.Lit(v5, new AST.Name("_")))))(v6);
                                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Tuple.snd(e$prime)))(function () {
                                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.ListComp(v2, expr, new Data_List_Types.Cons(new AST.Gen(v3, v1.value0.value1, Data_Tuple.fst(e$prime)), v1.value1)));
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  };
                  if (v1.value0 instanceof AST.Let) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v2) {
                          var $746 = runMatcherM(v2)(matchls$prime(Data_StrMap.empty)(Data_List.singleton(v1.value0.value1))(Data_List.singleton(v1.value0.value2)));
                          if ($746 instanceof Data_Either.Right) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))($746.value0.value1))(function () {
                                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Trans.runStateT(replaceQualifiers(v1.value1))($746.value0.value0))(function (v3) {
                                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(replace$prime(v3.value1)(expr))(function (v4) {
                                          if (v3.value0 instanceof Data_List_Types.Nil) {
                                              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List.singleton(v4)));
                                          };
                                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.ListComp.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v4)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v3.value0));
                                      });
                                  });
                              });
                          };
                          if ($746 instanceof Data_Either.Left) {
                              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(BindingError.create(new MatchingError(v1.value0.value1, v1.value0.value2)));
                          };
                          throw new Error("Failed pattern match at Evaluator line 434, column 5 - line 442, column 63: " + [ $746.constructor.name ]);
                      });
                  };
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new CannotEvaluate(new AST.ListComp(AST.emptyMeta, expr, new Data_List_Types.Cons(v1.value0, v1.value1))));
              };
              throw new Error("Failed pattern match at Evaluator line 377, column 1 - line 377, column 81: " + [ v.constructor.name, expr.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var evalLetTypeTree = function (v) {
      return function (v1) {
          if (v instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v1);
          };
          if (v instanceof Data_List_Types.Cons) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (v2) {
                  var $764 = runMatcherM(v2)(matchls$prime(Data_StrMap.empty)(Data_List.singleton(v.value0.value0))(Data_List.singleton(v.value0.value1)));
                  if ($764 instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(BindingError.create(new MatchingError(v.value0.value0, v.value0.value1)));
                  };
                  if ($764 instanceof Data_Either.Right) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))($764.value0.value1))(function () {
                          if (v.value1 instanceof Data_List_Types.Nil) {
                              return replace$prime($764.value0.value0)(v1);
                          };
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Trans.runStateT(replaceBindings(v.value1))($764.value0.value0))(function (v3) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(replace$prime(v3.value1)(v1))(function (v4) {
                                  return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.LetExpr.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v3.value0)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v4));
                              });
                          });
                      });
                  };
                  throw new Error("Failed pattern match at Evaluator line 475, column 3 - line 484, column 62: " + [ $764.constructor.name ]);
              });
          };
          throw new Error("Failed pattern match at Evaluator line 472, column 1 - line 472, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var eval1 = function (env) {
      return function (expr) {
          if (expr instanceof AST.Binary) {
              return binary(env)(expr.value1)(expr.value2)(expr.value3);
          };
          if (expr instanceof AST.Unary) {
              return unary(env)(expr.value1)(expr.value2);
          };
          if (expr instanceof AST.Atom && expr.value1 instanceof AST.Name) {
              return apply(env)(expr.value1.value0)(Data_List_Types.Nil.value);
          };
          if (expr instanceof AST.IfExpr && (expr.value1 instanceof AST.Atom && (expr.value1.value1 instanceof AST.Bool && expr.value1.value1.value0))) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value2);
          };
          if (expr instanceof AST.IfExpr && (expr.value1 instanceof AST.Atom && (expr.value1.value1 instanceof AST.Bool && !expr.value1.value1.value0))) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value3);
          };
          if (expr instanceof AST.ArithmSeq) {
              return evalArithmSeq(expr.value1)(expr.value2)(expr.value3);
          };
          if (expr instanceof AST.App && (expr.value1 instanceof AST.Binary && (expr.value1.value1.value0 instanceof AST.Composition && (expr.value2 instanceof Data_List_Types.Cons && expr.value2.value1 instanceof Data_List_Types.Nil)))) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.App.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value1.value2)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_List.singleton)(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.App.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value1.value3)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new Data_List_Types.Cons(expr.value2.value0, Data_List_Types.Nil.value)))));
          };
          if (expr instanceof AST.App && expr.value1 instanceof AST.Lambda) {
              return tryAll(env)(Data_List.singleton(new Data_Tuple.Tuple(expr.value1.value1, expr.value1.value2)))(expr.value2)("lambda")(Data_List_Types.Nil.value);
          };
          if (expr instanceof AST.App && (expr.value1 instanceof AST.SectL && (expr.value2 instanceof Data_List_Types.Cons && expr.value2.value1 instanceof Data_List_Types.Nil))) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Binary.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value1.value2)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value1.value1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value2.value0));
          };
          if (expr instanceof AST.App && (expr.value1 instanceof AST.SectR && (expr.value2 instanceof Data_List_Types.Cons && expr.value2.value1 instanceof Data_List_Types.Nil))) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Binary.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value1.value1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value2.value0)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value1.value2));
          };
          if (expr instanceof AST.App && (expr.value1 instanceof AST.PrefixOp && (expr.value2 instanceof Data_List_Types.Cons && (expr.value2.value1 instanceof Data_List_Types.Cons && expr.value2.value1.value1 instanceof Data_List_Types.Nil)))) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Binary.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value1.value1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value2.value0)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value2.value1.value0));
          };
          if (expr instanceof AST.App && (expr.value1 instanceof AST.Atom && expr.value1.value1 instanceof AST.Name)) {
              return apply(env)(expr.value1.value1.value0)(expr.value2);
          };
          if (expr instanceof AST.App && expr.value1 instanceof AST.App) {
              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.App.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(expr.value1.value1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Semigroup.append(Data_List_Types.semigroupList)(expr.value1.value2)(expr.value2)));
          };
          if (expr instanceof AST.ListComp) {
              return evalListComp(env)(expr.value1)(expr.value2);
          };
          if (expr instanceof AST.LetExpr) {
              return evalLetTypeTree(expr.value1)(expr.value2);
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new CannotEvaluate(expr));
      };
  };
  var binary = function (env) {
      return function (v) {
          var ord = function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return function (v6) {
                                  if (v5 instanceof AST.Atom && (v5.value1 instanceof AST.AInt && (v6 instanceof AST.Atom && v6.value1 instanceof AST.AInt))) {
                                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.Bool.create(v2(v5.value1.value0)(v6.value1.value0))));
                                  };
                                  if (v5 instanceof AST.Atom && (v5.value1 instanceof AST.Char && (v6 instanceof AST.Atom && v6.value1 instanceof AST.Char))) {
                                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.Bool.create(v3(v5.value1.value0)(v6.value1.value0))));
                                  };
                                  if (v5 instanceof AST.Atom && (v5.value1 instanceof AST.Bool && (v6 instanceof AST.Atom && v6.value1 instanceof AST.Bool))) {
                                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.Bool.create(v4(v5.value1.value0)(v6.value1.value0))));
                                  };
                                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(v1, v5, v6));
                              };
                          };
                      };
                  };
              };
          };
          var aint = function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          if (v3 instanceof AST.Atom && (v3.value1 instanceof AST.AInt && (v4 instanceof AST.Atom && v4.value1 instanceof AST.AInt))) {
                              return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(AST.AInt.create(v2(v3.value1.value0)(v4.value1.value0))));
                          };
                          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(v1, v3, v4));
                      };
                  };
              };
          };
          if (v.value0 instanceof AST.Power) {
              return aint(AST.Power.value)(function (i) {
                  return function (j) {
                      return Data_Foldable.product(Data_List_Lazy_Types.foldableList)(Data_Semiring.semiringInt)(Data_List_Lazy.replicate(j)(i));
                  };
              });
          };
          if (v.value0 instanceof AST.Mul) {
              return aint(AST.Mul.value)(Data_Semiring.mul(Data_Semiring.semiringInt));
          };
          if (v.value0 instanceof AST.Add) {
              return aint(AST.Add.value)(Data_Semiring.add(Data_Semiring.semiringInt));
          };
          if (v.value0 instanceof AST.Sub) {
              return aint(AST.Sub.value)(Data_Ring.sub(Data_Ring.ringInt));
          };
          if (v.value0 instanceof AST.Colon) {
              return function (e) {
                  return function (es) {
                      if (es instanceof AST.List) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new Data_List_Types.Cons(e, es.value1)));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(AST.Colon.value, e, es));
                  };
              };
          };
          if (v.value0 instanceof AST.Append) {
              return function (es1) {
                  return function (es2) {
                      var $907 = new Data_Tuple.Tuple(es1, es2);
                      if ($907.value0 instanceof AST.List && $907.value1 instanceof AST.List) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.List.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Semigroup.append(Data_List_Types.semigroupList)($907.value0.value1)($907.value1.value1)));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(AST.Append.value, es1, es2));
                  };
              };
          };
          if (v.value0 instanceof AST.Equ) {
              return ord(AST.Equ.value)(Data_Eq.eq(Data_Eq.eqInt))(Data_Eq.eq(Data_Eq.eqString))(Data_Eq.eq(Data_Eq.eqBoolean));
          };
          if (v.value0 instanceof AST.Neq) {
              return ord(AST.Neq.value)(Data_Eq.notEq(Data_Eq.eqInt))(Data_Eq.notEq(Data_Eq.eqString))(Data_Eq.notEq(Data_Eq.eqBoolean));
          };
          if (v.value0 instanceof AST.Leq) {
              return ord(AST.Leq.value)(Data_Ord.lessThanOrEq(Data_Ord.ordInt))(Data_Ord.lessThanOrEq(Data_Ord.ordString))(Data_Ord.lessThanOrEq(Data_Ord.ordBoolean));
          };
          if (v.value0 instanceof AST.Lt) {
              return ord(AST.Lt.value)(Data_Ord.lessThan(Data_Ord.ordInt))(Data_Ord.lessThan(Data_Ord.ordString))(Data_Ord.lessThan(Data_Ord.ordBoolean));
          };
          if (v.value0 instanceof AST.Geq) {
              return ord(AST.Geq.value)(Data_Ord.greaterThanOrEq(Data_Ord.ordInt))(Data_Ord.greaterThanOrEq(Data_Ord.ordString))(Data_Ord.greaterThanOrEq(Data_Ord.ordBoolean));
          };
          if (v.value0 instanceof AST.Gt) {
              return ord(AST.Gt.value)(Data_Ord.greaterThan(Data_Ord.ordInt))(Data_Ord.greaterThan(Data_Ord.ordString))(Data_Ord.greaterThan(Data_Ord.ordBoolean));
          };
          if (v.value0 instanceof AST.And) {
              return function (e1) {
                  return function (e2) {
                      var $914 = new Data_Tuple.Tuple(e1, e2);
                      if ($914.value0 instanceof AST.Atom && ($914.value0.value1 instanceof AST.Bool && !$914.value0.value1.value0)) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Bool(false)));
                      };
                      if ($914.value1 instanceof AST.Atom && ($914.value1.value1 instanceof AST.Bool && !$914.value1.value1.value0)) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Bool(false)));
                      };
                      if ($914.value0 instanceof AST.Atom && ($914.value0.value1 instanceof AST.Bool && ($914.value0.value1.value0 && ($914.value1 instanceof AST.Atom && ($914.value1.value1 instanceof AST.Bool && $914.value1.value1.value0))))) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Bool(true)));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(AST.And.value, e1, e2));
                  };
              };
          };
          if (v.value0 instanceof AST.Or) {
              return function (e1) {
                  return function (e2) {
                      var $935 = new Data_Tuple.Tuple(e1, e2);
                      if ($935.value0 instanceof AST.Atom && ($935.value0.value1 instanceof AST.Bool && $935.value0.value1.value0)) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Bool(true)));
                      };
                      if ($935.value1 instanceof AST.Atom && ($935.value1.value1 instanceof AST.Bool && $935.value1.value1.value0)) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Bool(true)));
                      };
                      if ($935.value0 instanceof AST.Atom && ($935.value0.value1 instanceof AST.Bool && (!$935.value0.value1.value0 && ($935.value1 instanceof AST.Atom && ($935.value1.value1 instanceof AST.Bool && !$935.value1.value1.value0))))) {
                          return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Atom.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new AST.Bool(false)));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(AST.And.value, e1, e2));
                  };
              };
          };
          if (v.value0 instanceof AST.Dollar) {
              return function (f) {
                  return function (e) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.App.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(f)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List.singleton(e)));
                  };
              };
          };
          if (v.value0 instanceof AST.Composition) {
              return function (e1) {
                  return function (e2) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new BinaryOpError(AST.And.value, e1, e2));
                  };
              };
          };
          if (v.value0 instanceof AST.InfixFunc) {
              return function (e1) {
                  return function (e2) {
                      return apply(env)(v.value0.value0)(new Data_List_Types.Cons(e1, new Data_List_Types.Cons(e2, Data_List_Types.Nil.value)));
                  };
              };
          };
          if (v.value0 instanceof AST.InfixConstr) {
              return function (e1) {
                  return function (e2) {
                      return Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.Binary.create)(freshMeta(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(new Data_Tuple.Tuple(v.value0, v.value1))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(e1)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(e2));
                  };
              };
          };
          throw new Error("Failed pattern match at Evaluator line 494, column 36 - line 524, column 108: " + [ v.value0.constructor.name ]);
      };
  };
  var apply = function (env) {
      return function (v) {
          return function (v1) {
              if (v === "div" && (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Cons)) {
                  return division(v1.value0)(v1.value1.value0);
              };
              if (v === "mod" && (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Cons)) {
                  return modulo(v1.value0)(v1.value1.value0);
              };
              var $971 = Data_StrMap.lookup(v)(env);
              if ($971 instanceof Data_Maybe.Nothing) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new UnknownFunction(v));
              };
              if ($971 instanceof Data_Maybe.Just) {
                  return tryAll(env)($971.value0)(v1)(v)(Data_List_Types.Nil.value);
              };
              throw new Error("Failed pattern match at Evaluator line 544, column 23 - line 546, column 47: " + [ $971.constructor.name ]);
          };
      };
  };
  var $$eval = function (nextIdx) {
      return function (env) {
          return function (expr) {
              return Control_Monad_State.runState(evalToBinding(env)(expr)(new AST.Lit(AST.emptyMeta, new AST.Name("_|_"))))(nextIdx);
          };
      };
  };
  exports["IndexError"] = IndexError;
  exports["DivByZero"] = DivByZero;
  exports["BinaryOpError"] = BinaryOpError;
  exports["UnaryOpError"] = UnaryOpError;
  exports["NameCaptureError"] = NameCaptureError;
  exports["UnknownFunction"] = UnknownFunction;
  exports["NoMatchingFunction"] = NoMatchingFunction;
  exports["BindingError"] = BindingError;
  exports["CannotEvaluate"] = CannotEvaluate;
  exports["NoError"] = NoError;
  exports["MoreErrors"] = MoreErrors;
  exports["MatchingError"] = MatchingError;
  exports["StrictnessError"] = StrictnessError;
  exports["TooFewArguments"] = TooFewArguments;
  exports["Quat"] = Quat;
  exports["abs"] = abs;
  exports["apply"] = apply;
  exports["avoidCapture"] = avoidCapture;
  exports["binary"] = binary;
  exports["boundNames"] = boundNames;
  exports["checkStrictness"] = checkStrictness;
  exports["clampStep"] = clampStep;
  exports["clampSucc"] = clampSucc;
  exports["defsToEnv"] = defsToEnv;
  exports["division"] = division;
  exports["envToDefs"] = envToDefs;
  exports["eval"] = $$eval;
  exports["eval1"] = eval1;
  exports["evalArithmSeq"] = evalArithmSeq;
  exports["evalLetTypeTree"] = evalLetTypeTree;
  exports["evalListComp"] = evalListComp;
  exports["evalToBinding"] = evalToBinding;
  exports["exprFromStepTo"] = exprFromStepTo;
  exports["freeVariables"] = freeVariables;
  exports["freshIndices"] = freshIndices;
  exports["freshMeta"] = freshMeta;
  exports["insertDef"] = insertDef;
  exports["intFromStepTo"] = intFromStepTo;
  exports["intToABool"] = intToABool;
  exports["intToAChar"] = intToAChar;
  exports["mapMQuat"] = mapMQuat;
  exports["modulo"] = modulo;
  exports["recurse"] = recurse;
  exports["removeOverlapping"] = removeOverlapping;
  exports["replaceBindings"] = replaceBindings;
  exports["replaceQualifiers"] = replaceQualifiers;
  exports["runEvalM"] = runEvalM;
  exports["runMatcherM"] = runMatcherM;
  exports["scope"] = scope;
  exports["tryAll"] = tryAll;
  exports["unary"] = unary;
  exports["unsafeTypeTreeToInt"] = unsafeTypeTreeToInt;
  exports["whnf"] = whnf;
  exports["wrapLambda"] = wrapLambda;
  exports["zipWithM"] = zipWithM;
  exports["showEvalError"] = showEvalError;
  exports["showMatchingError"] = showMatchingError;
  exports["functorQuat"] = functorQuat;
})(PS["Evaluator"] = PS["Evaluator"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String = PS["Data.String"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\n") {
                      return {
                          line: v.line + 1 | 0, 
                          column: 1
                      };
                  };
                  if (c === "\r") {
                      return {
                          line: v.line + 1 | 0, 
                          column: 1
                      };
                  };
                  if (c === "\t") {
                      return {
                          line: v.line, 
                          column: (v.column + 8 | 0) - (v.column - 1) % 8
                      };
                  };
                  return {
                      line: v.line, 
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String.split(Data_Newtype.wrap(Data_String.newtypePattern)(""))(str));
      };
  };
  var showPosition = new Data_Show.Show(function (v) {
      return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
  });
  var initialPos = {
      line: 1, 
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
  exports["showPosition"] = showPosition;
})(PS["Text.Parsing.Parser.Pos"] = PS["Text.Parsing.Parser.Pos"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadZero = PS["Control.MonadZero"];        
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var showParseError = new Data_Show.Show(function (v) {
      return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
  });
  var newtypeParserT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserT);
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
          };
      };
  };
  var monadTransParserT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($87) {
          return ParserT(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad)($87)));
      };
  });
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var monadErrorParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)(function ($88) {
          return Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(f($88)));
      });
  });
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bind(bindParserT(dictMonad))(Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
              return v.value1;
          }))(function (v) {
              return Control_Monad_Error_Class.throwError(monadErrorParserT(dictMonad))(new ParseError(message, v));
          });
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["fail"] = fail;
  exports["runParserT"] = runParserT;
  exports["showParseError"] = showParseError;
  exports["newtypeParserT"] = newtypeParserT;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["monadErrorParserT"] = monadErrorParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
  exports["monadTransParserT"] = monadTransParserT;
})(PS["Text.Parsing.Parser"] = PS["Text.Parsing.Parser"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];        
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var sepEndBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function (v1) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sepEndBy(dictMonad)(p)(sep))(function (v2) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v2));
                      });
                  }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.singleton(v)));
              });
          };
      };
  };
  var sepEndBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepEndBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var optionMaybe = function (dictMonad) {
      return function (p) {
          return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Maybe.Just.create)(p));
      };
  };
  var notFollowedBy = function (dictMonad) {
      return function (p) {
          return $$try(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(dictMonad)(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
      };
  };
  var lookAhead = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (s) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(s))(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v.value0, s));
              });
          })));
      };
  };
  var choice = function (dictFoldable) {
      return function (dictMonad) {
          return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
      };
  };
  var chainr1$prime = function (dictMonad) {
      return function (p) {
          return function (f) {
              return function (a) {
                  return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function (v) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(chainr1(dictMonad)(p)(f))(function (v1) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v(a)(v1));
                      });
                  }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
              };
          };
      };
  };
  var chainr1 = function (dictMonad) {
      return function (p) {
          return function (f) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return chainr1$prime(dictMonad)(p)(f)(v);
              });
          };
      };
  };
  var chainl1$prime = function (dictMonad) {
      return function (p) {
          return function (f) {
              return function (a) {
                  return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function (v) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v1) {
                          return chainl1$prime(dictMonad)(p)(f)(v(a)(v1));
                      });
                  }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
              };
          };
      };
  };
  var chainl1 = function (dictMonad) {
      return function (p) {
          return function (f) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return chainl1$prime(dictMonad)(p)(f)(v);
              });
          };
      };
  };
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
              };
          };
      };
  };
  exports["between"] = between;
  exports["chainl1"] = chainl1;
  exports["chainr1"] = chainr1;
  exports["choice"] = choice;
  exports["lookAhead"] = lookAhead;
  exports["notFollowedBy"] = notFollowedBy;
  exports["option"] = option;
  exports["optionMaybe"] = optionMaybe;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["sepEndBy"] = sepEndBy;
  exports["sepEndBy1"] = sepEndBy1;
  exports["try"] = $$try;
  exports["withErrorMessage"] = withErrorMessage;
})(PS["Text.Parsing.Parser.Combinators"] = PS["Text.Parsing.Parser.Combinators"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_String = PS["Data.String"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Functor = PS["Data.Functor"];        
  var StringLike = function (drop, indexOf, $$null, uncons) {
      this.drop = drop;
      this.indexOf = indexOf;
      this["null"] = $$null;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stringLikeString = new StringLike(Data_String.drop, Data_String.indexOf, Data_String["null"], Data_String.uncons);
  var $$null = function (dict) {
      return dict["null"];
  };
  var indexOf = function (dict) {
      return dict.indexOf;
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var string = function (dictStringLike) {
      return function (dictMonad) {
          return function (str) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                  return v.value0;
              }))(function (v) {
                  var $39 = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String.newtypePattern)(str))(v);
                  if ($39 instanceof Data_Maybe.Just && $39.value0 === 0) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                          return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String.length(str))(v), Text_Parsing_Parser_Pos.updatePosString(v1.value1)(str), true);
                      }))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                      });
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
              });
          };
      };
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (v) {
              var $50 = uncons(dictStringLike)(v);
              if ($50 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if ($50 instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                      return new Text_Parsing_Parser.ParseState($50.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String.singleton($50.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))($50.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 54, column 3 - line 61, column 16: " + [ $50.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators["try"](dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (v) {
                  var $59 = f(v);
                  if ($59) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                  };
                  if (!$59) {
                      return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String.singleton(v) + "' did not satisfy predicate"));
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.String line 67, column 3 - line 70, column 1: " + [ $59.constructor.name ]);
              }));
          };
      };
  };
  var $$char = function (dictStringLike) {
      return function (dictMonad) {
          return function (c) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                  return v === c;
              }))("Expected " + Data_Show.show(Data_Show.showChar)(c));
          };
      };
  };
  var noneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("Expected none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var oneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("Expected one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var whiteSpace = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(satisfy(dictStringLike)(dictMonad)(function (c) {
              return c === "\n" || (c === "\r" || (c === " " || c === "\t"));
          })))(function (v) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String.fromCharArray(v));
          });
      };
  };
  exports["StringLike"] = StringLike;
  exports["anyChar"] = anyChar;
  exports["char"] = $$char;
  exports["drop"] = drop;
  exports["indexOf"] = indexOf;
  exports["noneOf"] = noneOf;
  exports["oneOf"] = oneOf;
  exports["satisfy"] = satisfy;
  exports["string"] = string;
  exports["uncons"] = uncons;
  exports["whiteSpace"] = whiteSpace;
  exports["stringLikeString"] = stringLikeString;
})(PS["Text.Parsing.Parser.String"] = PS["Text.Parsing.Parser.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Category = PS["Control.Category"];
  var sourceLine = function (v) {
      return v.line;
  };
  var sourceColumn = function (v) {
      return v.column;
  };                                                                                                    
  var put$prime = function (dictMonad) {
      return function (p) {
          return Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonad))(p));
      };
  };
  var many1 = function (dictMonad) {
      return function (p) {
          return Control_Apply.lift2(Text_Parsing_Parser.applyParserT(dictMonad))(Data_List_Types.Cons.create)(p)(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(p));
      };
  };
  var getPosition = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(dictMonad)))(function (v) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value1);
      });
  };
  var get$prime = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad))))(function (v) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(v);
      });
  };
  var withPos = function (dictMonad) {
      return function (x) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(get$prime(dictMonad))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(getPosition(Control_Monad_State_Trans.monadStateT(dictMonad)))(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(put$prime(dictMonad)(v1))(x))(function (v2) {
                      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(put$prime(dictMonad)(v))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(v2));
                  });
              });
          });
      };
  };
  var biAp = function (f) {
      return function (c) {
          return function (v1) {
              return function (v2) {
                  return c(f(v1))(f(v2));
              };
          };
      };
  };
  var checkIndent = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(get$prime(dictMonad))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(getPosition(Control_Monad_State_Trans.monadStateT(dictMonad)))(function (v1) {
              var $64 = biAp(sourceColumn)(Data_Eq.eq(Data_Eq.eqInt))(v1)(v);
              if ($64) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Data_Unit.unit);
              };
              if (!$64) {
                  return Text_Parsing_Parser.fail(Control_Monad_State_Trans.monadStateT(dictMonad))("indentation doesn't match");
              };
              throw new Error("Failed pattern match at IndentParser line 169, column 5 - line 171, column 1: " + [ $64.constructor.name ]);
          });
      });
  };
  var block1 = function (dictMonad) {
      return function (p) {
          return withPos(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(many1(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(checkIndent(dictMonad))(p)))(function (v) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(v);
          }));
      };
  };
  var indented$prime = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(getPosition(Control_Monad_State_Trans.monadStateT(dictMonad)))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(get$prime(dictMonad))(function (v1) {
              var $76 = biAp(sourceColumn)(Data_Ord.lessThanOrEq(Data_Ord.ordInt))(v)(v1);
              if ($76) {
                  return Text_Parsing_Parser.fail(Control_Monad_State_Trans.monadStateT(dictMonad))("not indented");
              };
              if (!$76) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at IndentParser line 131, column 5 - line 131, column 76: " + [ $76.constructor.name ]);
          });
      });
  };
  var sameLine = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(getPosition(Control_Monad_State_Trans.monadStateT(dictMonad)))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(get$prime(dictMonad))(function (v1) {
              var $79 = biAp(sourceLine)(Data_Eq.eq(Data_Eq.eqInt))(v)(v1);
              if ($79) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Data_Unit.unit);
              };
              if (!$79) {
                  return Text_Parsing_Parser.fail(Control_Monad_State_Trans.monadStateT(dictMonad))("over one line");
              };
              throw new Error("Failed pattern match at IndentParser line 142, column 5 - line 144, column 1: " + [ $79.constructor.name ]);
          });
      });
  };
  exports["block1"] = block1;
  exports["checkIndent"] = checkIndent;
  exports["indented'"] = indented$prime;
  exports["sameLine"] = sameLine;
  exports["withPos"] = withPos;
})(PS["IndentParser"] = PS["IndentParser"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.ctrlKeyPressed = function(event) {
       return (!!(event.ctrlKey || event.metaKey))
  };

  exports.getType = function(event) {
    return event.type;
  }
})(PS["JSHelpers"] = PS["JSHelpers"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["JSHelpers"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  exports["ctrlKeyPressed"] = $foreign.ctrlKeyPressed;
  exports["getType"] = $foreign.getType;
})(PS["JSHelpers"] = PS["JSHelpers"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Category = PS["Control.Category"];        
  var AssocNone = (function () {
      function AssocNone() {

      };
      AssocNone.value = new AssocNone();
      return AssocNone;
  })();
  var AssocLeft = (function () {
      function AssocLeft() {

      };
      AssocLeft.value = new AssocLeft();
      return AssocLeft;
  })();
  var AssocRight = (function () {
      function AssocRight() {

      };
      AssocRight.value = new AssocRight();
      return AssocRight;
  })();
  var Infix = (function () {
      function Infix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Infix.create = function (value0) {
          return function (value1) {
              return new Infix(value0, value1);
          };
      };
      return Infix;
  })();
  var Prefix = (function () {
      function Prefix(value0) {
          this.value0 = value0;
      };
      Prefix.create = function (value0) {
          return new Prefix(value0);
      };
      return Prefix;
  })();
  var Postfix = (function () {
      function Postfix(value0) {
          this.value0 = value0;
      };
      Postfix.create = function (value0) {
          return new Postfix(value0);
      };
      return Postfix;
  })();
  var termP = function (dictMonad) {
      return function (prefixP) {
          return function (term) {
              return function (postfixP) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(prefixP)(function (v) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(term)(function (v1) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(postfixP)(function (v2) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v2(v(v1)));
                          });
                      });
                  });
              };
          };
      };
  };
  var splitOp = function (v) {
      return function (accum) {
          if (v instanceof Infix && v.value1 instanceof AssocNone) {
              var $25 = {};
              for (var $26 in accum) {
                  if (accum.hasOwnProperty($26)) {
                      $25[$26] = accum[$26];
                  };
              };
              $25.nassoc = new Data_List_Types.Cons(v.value0, accum.nassoc);
              return $25;
          };
          if (v instanceof Infix && v.value1 instanceof AssocLeft) {
              var $30 = {};
              for (var $31 in accum) {
                  if (accum.hasOwnProperty($31)) {
                      $30[$31] = accum[$31];
                  };
              };
              $30.lassoc = new Data_List_Types.Cons(v.value0, accum.lassoc);
              return $30;
          };
          if (v instanceof Infix && v.value1 instanceof AssocRight) {
              var $35 = {};
              for (var $36 in accum) {
                  if (accum.hasOwnProperty($36)) {
                      $35[$36] = accum[$36];
                  };
              };
              $35.rassoc = new Data_List_Types.Cons(v.value0, accum.rassoc);
              return $35;
          };
          if (v instanceof Prefix) {
              var $40 = {};
              for (var $41 in accum) {
                  if (accum.hasOwnProperty($41)) {
                      $40[$41] = accum[$41];
                  };
              };
              $40.prefix = new Data_List_Types.Cons(v.value0, accum.prefix);
              return $40;
          };
          if (v instanceof Postfix) {
              var $44 = {};
              for (var $45 in accum) {
                  if (accum.hasOwnProperty($45)) {
                      $44[$45] = accum[$45];
                  };
              };
              $44.postfix = new Data_List_Types.Cons(v.value0, accum.postfix);
              return $44;
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Expr line 70, column 1 - line 70, column 76: " + [ v.constructor.name, accum.constructor.name ]);
      };
  };
  var rassocP1 = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var rassocP = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(rassocOp)(function (v) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return rassocP1(dictMonad)(v1)(rassocOp)(prefixP)(term)(postfixP);
                              }))(function (v1) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v(x)(v1));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var nassocP = function (dictMonad) {
      return function (x) {
          return function (nassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nassocOp)(function (v) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v(x)(v1));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var lassocP1 = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var lassocP = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lassocOp)(function (v) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return lassocP1(dictMonad)(v(x)(v1))(lassocOp)(prefixP)(term)(postfixP);
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var makeParser = function (dictMonad) {
      return function (term) {
          return function (ops) {
              var accum = Data_Foldable.foldr(Data_Foldable.foldableArray)(splitOp)({
                  rassoc: Data_List_Types.Nil.value, 
                  lassoc: Data_List_Types.Nil.value, 
                  nassoc: Data_List_Types.Nil.value, 
                  prefix: Data_List_Types.Nil.value, 
                  postfix: Data_List_Types.Nil.value
              })(ops);
              var lassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.lassoc);
              var nassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.nassoc);
              var postfixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.postfix))("");
              var postfixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(postfixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.id(Control_Category.categoryFn)));
              var prefixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.prefix))("");
              var prefixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(prefixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.id(Control_Category.categoryFn)));
              var rassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.rassoc);
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v) {
                  return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(v)(rassocOp)(prefixP)(term)(postfixP))(lassocP(dictMonad)(v)(lassocOp)(prefixP)(term)(postfixP)))(nassocP(dictMonad)(v)(nassocOp)(prefixP)(term)(postfixP)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v)))("operator");
              });
          };
      };
  };
  var buildExprParser = function (dictMonad) {
      return function (operators) {
          return function (simpleExpr) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(makeParser(dictMonad))(simpleExpr)(operators);
          };
      };
  };
  exports["AssocNone"] = AssocNone;
  exports["AssocLeft"] = AssocLeft;
  exports["AssocRight"] = AssocRight;
  exports["Infix"] = Infix;
  exports["Prefix"] = Prefix;
  exports["Postfix"] = Postfix;
  exports["buildExprParser"] = buildExprParser;
})(PS["Text.Parsing.Parser.Expr"] = PS["Text.Parsing.Parser.Expr"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Char_Unicode = PS["Data.Char.Unicode"];
  var Data_List = PS["Data.List"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Alt = PS["Control.Alt"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Category = PS["Control.Category"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var upper = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isUpper))("uppercase letter");
  };
  var unGenLanguageDef = function (v) {
      return v;
  };
  var letter = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isAlpha))("letter");
  };
  var digit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isDigit))("digit");
  };
  var alphaNum = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isAlphaNum))("letter or digit");
  };
  exports["alphaNum"] = alphaNum;
  exports["digit"] = digit;
  exports["letter"] = letter;
  exports["unGenLanguageDef"] = unGenLanguageDef;
  exports["upper"] = upper;
})(PS["Text.Parsing.Parser.Token"] = PS["Text.Parsing.Parser.Token"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = PS["Text.Parsing.Parser.Token"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var emptyDef = (function () {
      var op$prime = function (dictMonad) {
          return Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
      };
      return {
          commentStart: "", 
          commentEnd: "", 
          commentLine: "", 
          nestedComments: true, 
          identStart: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("_")), 
          identLetter: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "'" ])), 
          opStart: op$prime(Data_Identity.monadIdentity), 
          opLetter: op$prime(Data_Identity.monadIdentity), 
          reservedOpNames: [  ], 
          reservedNames: [  ], 
          caseSensitive: true
      };
  })();
  var haskellStyle = (function () {
      var op$prime = function (dictMonad) {
          return Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
      };
      var $4 = Text_Parsing_Parser_Token.unGenLanguageDef(emptyDef);
      var $2 = {};
      for (var $3 in $4) {
          if ($4.hasOwnProperty($3)) {
              $2[$3] = $4[$3];
          };
      };
      $2.commentStart = "{-";
      $2.commentEnd = "-}";
      $2.commentLine = "--";
      $2.nestedComments = true;
      $2.identStart = Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity);
      $2.identLetter = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "'" ]));
      $2.opStart = op$prime(Data_Identity.monadIdentity);
      $2.opLetter = op$prime(Data_Identity.monadIdentity);
      $2.reservedOpNames = [  ];
      $2.reservedNames = [  ];
      $2.caseSensitive = true;
      return $2;
  })();
  var haskell98Def = (function () {
      var $7 = Text_Parsing_Parser_Token.unGenLanguageDef(haskellStyle);
      var $5 = {};
      for (var $6 in $7) {
          if ($7.hasOwnProperty($6)) {
              $5[$6] = $7[$6];
          };
      };
      $5.reservedOpNames = [ "::", "..", "=", "\\", "|", "<-", "->", "@", "~", "=>" ];
      $5.reservedNames = [ "let", "in", "case", "of", "if", "then", "else", "data", "type", "class", "default", "deriving", "do", "import", "infix", "infixl", "infixr", "instance", "module", "newtype", "where", "primitive" ];
      return $5;
  })();
  var haskellDef = (function () {
      var $9 = {};
      for (var $10 in haskell98Def) {
          if (haskell98Def.hasOwnProperty($10)) {
              $9[$10] = haskell98Def[$10];
          };
      };
      $9.identLetter = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(haskell98Def.identLetter)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("#"));
      $9.reservedNames = Data_Semigroup.append(Data_Semigroup.semigroupArray)(haskell98Def.reservedNames)([ "foreign", "import", "export", "primitive", "_ccall_", "_casm_", "forall" ]);
      return $9;
  })();
  exports["emptyDef"] = emptyDef;
  exports["haskellDef"] = haskellDef;
  exports["haskellStyle"] = haskellStyle;
})(PS["Text.Parsing.Parser.Language"] = PS["Text.Parsing.Parser.Language"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Expr = PS["Text.Parsing.Parser.Expr"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = PS["Text.Parsing.Parser.Token"];
  var Text_Parsing_Parser_Language = PS["Text.Parsing.Parser.Language"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var AST = PS["AST"];
  var IndentParser = PS["IndentParser"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Category = PS["Control.Category"];        
  var symbol = function (dictMonad) {
      return Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", ">", "=", "?", "@", "\\", "^", "|", "-", "~", "\xb0" ]);
  };
  var skipWhite = function (dictMonad) {
      return Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "\n", "\r", "\f", " ", "\t" ])));
  };
  var skipSpaces = function (dictMonad) {
      return Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ " ", "\t" ])));
  };
  var spaced = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_Combinators.between(dictMonad)(skipSpaces(dictMonad))(skipSpaces(dictMonad))(p));
      };
  };
  var runIndexingT = function (dictMonad) {
      return function (action) {
          return Control_Monad_State_Trans.runStateT(action)(0);
      };
  };
  var runIndexing = function ($247) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(runIndexingT(Data_Identity.monadIdentity)($247));
  };
  var runParserIndent = function (p) {
      return function (src) {
          var result = runIndexing(Data_Function.flip(Control_Monad_State_Trans.evalStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Text_Parsing_Parser_Pos.initialPos)(Text_Parsing_Parser.runParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(src)(p)));
          var $129 = Data_Tuple.fst(result);
          if ($129 instanceof Data_Either.Left) {
              return new Data_Either.Left($129.value0);
          };
          if ($129 instanceof Data_Either.Right) {
              return Data_Either.Right.create(new Data_Tuple.Tuple($129.value0, Data_Tuple.snd(result)));
          };
          throw new Error("Failed pattern match at Parser line 481, column 3 - line 483, column 48: " + [ $129.constructor.name ]);
      };
  };
  var putNew = function (dictMonad) {
      return function (dictMonadTrans) {
          return function (dictMonad1) {
              return function (i) {
                  return Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(dictMonad1)(Control_Monad_Trans_Class.lift(dictMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonad))(i)));
              };
          };
      };
  };
  var many1 = function (dictMonad) {
      return function (p) {
          return Control_Apply.lift2(Text_Parsing_Parser.applyParserT(dictMonad))(Data_List_Types.Cons.create)(p)(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(p));
      };
  };
  var lower = function (dictMonad) {
      return Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_String.toCharArray("abcdefghijklmnopqrstuvwxyz"));
  };
  var lookAhead = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.lookAhead(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.whiteSpace(Text_Parsing_Parser_String.stringLikeString)(dictMonad))(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(dictMonad)));
  };
  var integer = function (dictMonad) {
      var table = function (v) {
          if (v === "0") {
              return 0;
          };
          if (v === "1") {
              return 1;
          };
          if (v === "2") {
              return 2;
          };
          if (v === "3") {
              return 3;
          };
          if (v === "4") {
              return 4;
          };
          if (v === "5") {
              return 5;
          };
          if (v === "6") {
              return 6;
          };
          if (v === "7") {
              return 7;
          };
          if (v === "8") {
              return 8;
          };
          if (v === "9") {
              return 9;
          };
          return 47;
      };
      var convert = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
          return function (x) {
              return (acc * 10 | 0) + table(x) | 0;
          };
      })(0);
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(convert)(many1(dictMonad)(Text_Parsing_Parser_Token.digit(dictMonad)));
  };
  var $$int = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(AST.AInt.create)(integer(dictMonad));
  };
  var infixConstructor = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(":"))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(many1(dictMonad)(symbol(dictMonad)))(function (v) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(":", v))));
          });
      });
  };
  var ilexe = function (dictMonad) {
      return function (p) {
          return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(skipWhite(dictMonad));
      };
  };
  var indent = function (p) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.withErrorMessage(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(IndentParser.sameLine(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(IndentParser["indented'"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))("Missing indentation! Did you type a tab-character?"))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(p));
  };
  var typeExpr = function (t) {
      return Text_Parsing_Parser_Combinators.between(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("("))))(indent(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(")"))))(indent(t));
  };
  var typeTuple = function (t) {
      return Text_Parsing_Parser_Combinators.between(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("(")))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(")"))))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.sepBy1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(t))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(",")))))(function (v) {
          if (v instanceof Data_List_Types.Nil) {
              return Text_Parsing_Parser.fail(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("Empty Tuple");
          };
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(v.value0);
          };
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(AST.TTuple.create(v));
      }));
  };
  var fresh = function (dictMonad) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad)))(function (v) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonad))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(dictMonad))(function (i1) {
              return i1 + 1 | 0;
          }))(function () {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonad))(v);
          });
      });
  };
  var freshMeta = function (dictMonad) {
      return function (dictMonadTrans) {
          return function (dictMonad1) {
              return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad1["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(AST.idxMeta)(Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(dictMonad1)(Control_Monad_Trans_Class.lift(dictMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(fresh(dictMonad))));
          };
      };
  };
  var ifThenElse = function (expr) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("if"))(Text_Parsing_Parser_Combinators.lookAhead(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))([ " ", "\t", "\n", "(" ])))))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("then")))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr))(function (v1) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("else")))(function () {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr))(function (v2) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v3) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.IfExpr(v3, v, v1, v2));
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var list = function (expr) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("[")))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.sepBy(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(expr))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(",")))))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("]")))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.List(v1, v));
                  });
              });
          });
      });
  };
  var tuplesOrBrackets = function (expr) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("(")))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.optionMaybe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(",")))(function () {
                  return Text_Parsing_Parser_Combinators.sepBy1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(expr))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(","))));
              }))))(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(")")))(function () {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(v);
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v2) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.NTuple(v2, new Data_List_Types.Cons(v, v1.value0)));
                          });
                      };
                      throw new Error("Failed pattern match at Parser line 346, column 3 - line 350, column 37: " + [ v1.constructor.name ]);
                  });
              });
          });
      });
  };
  var curr = function (dictMonad) {
      return function (dictMonadTrans) {
          return function (dictMonad1) {
              return Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(dictMonad1)(Control_Monad_Trans_Class.lift(dictMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad))));
          };
      };
  };
  var character$prime = function (dictMonad) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("n"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))("\n")))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("r"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))("\r"))))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\"")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))))(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "\\", "'", "\"" ]));
  };
  var charLiteral = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(character$prime(dictMonad))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))(function () {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
              });
          });
      });
  };
  var character = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(function ($248) {
          return AST.Char.create(Data_String.singleton($248));
      })(charLiteral(dictMonad));
  };
  var charList = function (dictMonad) {
      return function (dictMonadTrans) {
          return function (dictMonad1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad1))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("\""))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad1))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad1))(Text_Parsing_Parser.lazyParserT)(character$prime(dictMonad1)))(function (v) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad1))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("\""))(function () {
                          return Control_Apply.apply(Text_Parsing_Parser.applyParserT(dictMonad1))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad1["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(AST.List.create)(freshMeta(dictMonad)(dictMonadTrans)(dictMonad1)))(Data_Traversable["for"](Text_Parsing_Parser.applicativeParserT(dictMonad1))(Data_List_Types.traversableList)(v)(function (chr) {
                              return Control_Apply.apply(Text_Parsing_Parser.applyParserT(dictMonad1))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad1["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(AST.Atom.create)(freshMeta(dictMonad)(dictMonadTrans)(dictMonad1)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad1))(AST.Char.create(Data_String.singleton(chr))));
                          }));
                      });
                  });
              });
          };
      };
  };
  var $$boolean = function (dictMonad) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)("True"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(true)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)("False"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(false)));
  };
  var bool = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(AST.Bool.create)($$boolean(dictMonad));
  };
  var arithmeticSequence = function (expr) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("[")))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.optionMaybe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(",")))(indent(expr))))(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("..")))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.optionMaybe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(expr)))(function (v2) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("]")))(function () {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v3) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.ArithmSeq(v3, v, v1, v2));
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var anyLetter = function (dictMonad) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("_"))(lower(dictMonad)))(Text_Parsing_Parser_Token.upper(dictMonad)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'")))(Text_Parsing_Parser_Token.digit(dictMonad));
  };
  var name = function (dictMonad) {
      var reservedWords = Data_Array.toUnfoldable(Data_List_Types.unfoldableList)((Text_Parsing_Parser_Token.unGenLanguageDef(Text_Parsing_Parser_Language.haskellDef)).reservedNames);
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("_"))(lower(dictMonad)))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(anyLetter(dictMonad)))(function (v1) {
              var nm = Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(v, v1)));
              var $158 = Data_List.elemIndex(Data_Eq.eqString)(nm)(reservedWords);
              if ($158 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(nm);
              };
              if ($158 instanceof Data_Maybe.Just) {
                  return Text_Parsing_Parser.fail(dictMonad)(nm + " is a reserved word!");
              };
              throw new Error("Failed pattern match at Parser line 177, column 3 - line 180, column 3: " + [ $158.constructor.name ]);
          });
      });
  };
  var infixFunc = function (dictMonad) {
      return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("`"))(name(dictMonad)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("`"));
  };
  var infixOperators = function (dictMonad) {
      return function (dictMonadTrans) {
          return function (dictMonad1) {
              return [ [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](dictMonad1)(infixConstructor(dictMonad1)))(AST.InfixConstr.create)(Text_Parsing_Parser_Expr.AssocLeft.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](dictMonad1)(infixFunc(dictMonad1)))(AST.InfixFunc.create)(Text_Parsing_Parser_Expr.AssocLeft.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](dictMonad1)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad1))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("."))(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad1)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad1)(".")))))(Data_Function["const"](AST.Composition.value))(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("^"))(Data_Function["const"](AST.Power.value))(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("*"))(Data_Function["const"](AST.Mul.value))(Text_Parsing_Parser_Expr.AssocLeft.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](dictMonad1)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad1))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("+"))(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad1)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("+")))))(Data_Function["const"](AST.Add.value))(Text_Parsing_Parser_Expr.AssocLeft.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("-"))(Data_Function["const"](AST.Sub.value))(Text_Parsing_Parser_Expr.AssocLeft.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)(":"))(Data_Function["const"](AST.Colon.value))(Text_Parsing_Parser_Expr.AssocRight.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("++"))(Data_Function["const"](AST.Append.value))(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("=="))(Data_Function["const"](AST.Equ.value))(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("/="))(Data_Function["const"](AST.Neq.value))(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](dictMonad1)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad1))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("<"))(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad1)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("=")))))(Data_Function["const"](AST.Lt.value))(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](dictMonad1)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad1))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)(">"))(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad1)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("=")))))(Data_Function["const"](AST.Gt.value))(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("<="))(Data_Function["const"](AST.Leq.value))(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)(">="))(Data_Function["const"](AST.Geq.value))(Text_Parsing_Parser_Expr.AssocNone.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("&&"))(Data_Function["const"](AST.And.value))(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("||"))(Data_Function["const"](AST.Or.value))(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("$"))(Data_Function["const"](AST.Dollar.value))(Text_Parsing_Parser_Expr.AssocRight.value) ] ];
          };
      };
  };
  var opParser = function (dictMonad) {
      return function (dictMonadTrans) {
          return function (dictMonad1) {
              return Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad1)((function (x) {
                  return Data_Functor.map(Data_List_Types.functorList)(Data_Tuple_Nested.uncurry3(function (p) {
                      return function (op) {
                          return function (v) {
                              return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad1["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(op)(p);
                          };
                      };
                  }))(x);
              })(Data_List.concat((function (x) {
                  return Data_Functor.map(Data_List_Types.functorList)(Data_Array.toUnfoldable(Data_List_Types.unfoldableList))(x);
              })(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(infixOperators(dictMonad)(dictMonadTrans)(dictMonad1))))));
          };
      };
  };
  var operatorTable = function (dictMonad) {
      return function (dictMonadTrans) {
          return function (dictMonad1) {
              var unaryMinus = (function () {
                  var minusParse = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad1))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad1)("-"))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad1))(freshMeta(dictMonad)(dictMonadTrans)(dictMonad1))(function (v) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad1))(freshMeta(dictMonad)(dictMonadTrans)(dictMonad1))(function (v1) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad1))(function (e) {
                                  if (e instanceof AST.Atom && e.value1 instanceof AST.AInt) {
                                      return new AST.Atom(v, new AST.AInt(-e.value1.value0));
                                  };
                                  return new AST.Unary(v, new Data_Tuple.Tuple(AST.Sub.value, v1), e);
                              });
                          });
                      });
                  });
                  return Text_Parsing_Parser_Expr.Prefix.create(spaced(dictMonad1)(minusParse));
              })();
              var infixTable = Data_Functor.map(Data_Functor.functorArray)(function (x) {
                  return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple_Nested.uncurry3(function (p) {
                      return function (op) {
                          return function (assoc) {
                              return new Text_Parsing_Parser_Expr.Infix(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad1))(freshMeta(dictMonad)(dictMonadTrans)(dictMonad1))(function (v) {
                                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad1))(freshMeta(dictMonad)(dictMonadTrans)(dictMonad1))(function (v1) {
                                      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad1["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(function ($249) {
                                          return AST.Binary.create(v)(Data_Function.flip(Data_Tuple.Tuple.create)(v1)(op($249)));
                                      })(spaced(dictMonad1)(p));
                                  });
                              }), assoc);
                          };
                      };
                  }))(x);
              })(infixOperators(dictMonad)(dictMonadTrans)(dictMonad1));
              return Data_Maybe.maybe([  ])(Control_Category.id(Control_Category.categoryFn))(Data_Array.modifyAt(3)(Data_Function.flip(Data_Array.snoc)(unaryMinus))(infixTable));
          };
      };
  };
  var simpleType = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(lookAhead(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v) {
      if (v === "B") {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.TypCon.create)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("Bool"));
      };
      if (v === "I") {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.TypCon.create)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("Int"));
      };
      if (v === "C") {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.TypCon.create)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("Char"));
      };
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.TypVar.create)(name(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))));
  });
  var variable = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(AST.Name.create)(name(dictMonad));
  };
  var upperCaseName = function (dictMonad) {
      var reservedWords = Data_Array.toUnfoldable(Data_List_Types.unfoldableList)((Text_Parsing_Parser_Token.unGenLanguageDef(Text_Parsing_Parser_Language.haskellDef)).reservedNames);
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Token.upper(dictMonad))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(anyLetter(dictMonad)))(function (v1) {
              var nm = Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(v, v1)));
              var $173 = Data_List.elemIndex(Data_Eq.eqString)(nm)(reservedWords);
              if ($173 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(nm);
              };
              if ($173 instanceof Data_Maybe.Just) {
                  return Text_Parsing_Parser.fail(dictMonad)(nm + " is a reserved word!");
              };
              throw new Error("Failed pattern match at Parser line 191, column 3 - line 194, column 3: " + [ $173.constructor.name ]);
          });
      });
  };
  var bndComplex = function (bnd) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(upperCaseName(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(many1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bnd))(function (v2) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.ConstrLit(v1, new AST.PrefixDataConstr(v, Data_List.length(v2), v2)));
              });
          });
      })))(indent(bnd));
  };
  var bndInfixes = function (bnd) {
      return Text_Parsing_Parser_Combinators.chainl1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bndComplex(bnd))))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(infixConstructor(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v1) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (l) {
                  return function (r) {
                      return new AST.ConstrLit(v1, new AST.InfixDataConstr(v, AST.LEFTASSOC.value, 9, l, r));
                  };
              });
          });
      }));
  };
  var bndConses = function (bnd) {
      return Text_Parsing_Parser_Combinators.chainr1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bndInfixes(bnd))))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(":"))))(function () {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.ConsLit.create)(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))));
      }));
  };
  var bndList = function (bnd) {
      return Text_Parsing_Parser_Combinators.sepBy(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(bndConses(bnd))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(","))));
  };
  var constructor = function (dictMonad) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(AST.Constr.create)(upperCaseName(dictMonad));
  };
  var atom = function (dictMonad) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))($$int(dictMonad))(variable(dictMonad)))(bool(dictMonad)))(constructor(dictMonad)))(character(dictMonad));
  };
  var bndLit = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.Lit.create)(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(atom(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))));
  var bndSimple = Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bndLit);
  var binding = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_String.whiteSpace(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function () {
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (bnd) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(lookAhead(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v) {
              if (v === "(") {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("(")))(indent(bndList(bnd))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(")"))))(function (v1) {
                      if (v1 instanceof Data_List_Types.Nil) {
                          return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.NTupleLit.create)(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List_Types.Nil.value));
                      };
                      if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(v1.value0);
                      };
                      return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.NTupleLit.create)(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(v1));
                  });
              };
              if (v === "[") {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("[")))(indent(bndList(bnd))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("]"))))(function (v1) {
                      if (v1 instanceof Data_List_Types.Nil) {
                          return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.ListLit.create)(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List_Types.Nil.value));
                      };
                      return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.ListLit.create)(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(v1));
                  });
              };
              return Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bndSimple));
          });
      });
  });
  var lambda = function (expr) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("\\")))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(many1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(binding)))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("->")))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr))(function (v1) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v2) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.Lambda(v2, v, v1));
                      });
                  });
              });
          });
      });
  };
  var letExpr = function (expr) {
      var bindingItem = function (expr1) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(binding))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("=")))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(IndentParser.withPos(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(expr1)))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new Data_Tuple.Tuple(v, v1));
                  });
              });
          });
      };
      var bindingBlock = function (expr1) {
          var layout = IndentParser.block1(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(bindingItem(expr1))(function (x) {
              return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.notFollowedBy(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(";"))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(x));
          })));
          var iblock = Text_Parsing_Parser_Combinators.sepBy1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bindingItem(expr1))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(";")));
          var curly = Text_Parsing_Parser_Combinators.between(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("{")))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("}")))(iblock);
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(curly)(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(layout)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(iblock));
      };
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("let")))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(bindingBlock(expr)))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("in")))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(IndentParser.withPos(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(expr)))(function (v1) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v2) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.LetExpr(v2, v, v1));
                      });
                  });
              });
          });
      });
  };
  var listComp = function (expr) {
      var qual = function (expr1) {
          var parseLet = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("let")))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(binding))(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("=")))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr1))(function (v1) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v2) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.Let(v2, v, v1));
                          });
                      });
                  });
              });
          });
          var parseGuard = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(expr1))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.Guard(v, v1));
              });
          });
          var parseGen = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(binding))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("<-")))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr1))(function (v1) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v2) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.Gen(v2, v, v1));
                      });
                  });
              });
          });
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(parseLet))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(parseGen)))(parseGuard);
      };
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("[")))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expr))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("|"))(Text_Parsing_Parser_Combinators.notFollowedBy(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("|")))))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(skipWhite(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.sepBy1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(qual(expr)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(",")))))(function (v1) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("]")))(function () {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v2) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.ListComp(v2, v, v1));
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var syntax = function (expr) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ifThenElse(expr)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(letExpr(expr))))(applicationOrSingleExpression(expr));
  };
  var section = function (expr) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("(")))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.optionMaybe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(syntax(expr))))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(Data_Tuple.Tuple.create)(opParser(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(skipWhite(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.optionMaybe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(syntax(expr))))(function (v2) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(")")))(function () {
                              if (v instanceof Data_Maybe.Nothing) {
                                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v3) {
                                      if (v2 instanceof Data_Maybe.Nothing) {
                                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.PrefixOp(v3, v1));
                                      };
                                      if (v2 instanceof Data_Maybe.Just) {
                                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.SectR(v3, v1, v2.value0));
                                      };
                                      throw new Error("Failed pattern match at Parser line 364, column 7 - line 366, column 43: " + [ v2.constructor.name ]);
                                  });
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v3) {
                                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.SectL(v3, v.value0, v1));
                                      });
                                  };
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return Text_Parsing_Parser.fail(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("Cannot have a section with two expressions!");
                                  };
                                  throw new Error("Failed pattern match at Parser line 368, column 7 - line 374, column 1: " + [ v2.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Parser line 361, column 3 - line 374, column 1: " + [ v.constructor.name ]);
                          });
                      });
                  });
              });
          });
      });
  };
  var base = function (expr) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(tuplesOrBrackets(expr)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(lambda(expr))))(section(expr)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(listComp(expr))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(arithmeticSequence(expr))))(list(expr)))(charList(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.Atom.create)(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(atom(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))));
  };
  var applicationOrSingleExpression = function (expr) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(base(expr)))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.optionMaybe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators.sepEndBy1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(base(expr))))(skipWhite(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))))(function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(v);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(freshMeta(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v2) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.App(v2, v, v1.value0));
                  });
              };
              throw new Error("Failed pattern match at Parser line 319, column 3 - line 323, column 29: " + [ v1.constructor.name ]);
          });
      });
  };
  var expression = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_String.whiteSpace(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function () {
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (expr) {
          return Text_Parsing_Parser_Expr.buildExprParser(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(operatorTable(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(syntax(expr));
      });
  });
  var definition = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(name(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser.lazyParserT)(indent(binding)))(function (v1) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("=")))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(expression))(function (v2) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.Def(v, v1, v2));
              });
          });
      });
  });
  var parseExpr = runParserIndent(expression);
  var types1 = function (t) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(lookAhead(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v) {
          if (v === "[") {
              return Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.TList.create)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("[")))(indent(t)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("]"))));
          };
          if (v === "(") {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(typeExpr(t)))(typeTuple(t));
          };
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(simpleType))(typeCons(t));
      });
  };
  var typeCons = function (t) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(upperCaseName(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser.lazyParserT)(indent(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(types1(t))(simpleType))))(function (v1) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.TTypeCons(v, v1));
          });
      });
  };
  var type1 = function (t) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(lookAhead(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v) {
          if (v === "(") {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators.between(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("("))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(")"))))(Text_Parsing_Parser_Combinators.sepBy1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(t))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(","))))))(function (v1) {
                  if (v1 instanceof Data_List_Types.Nil) {
                      return Text_Parsing_Parser.fail(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("Empty Tuple");
                  };
                  if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(v1.value0);
                  };
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(AST.TTuple.create(v1));
              });
          };
          if (v === "[") {
              return Text_Parsing_Parser_Combinators.between(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("["))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("]"))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(AST.TList.create)(indent(t)));
          };
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(simpleType)))(indent(typeCons(t)));
      });
  };
  var types = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_String.whiteSpace(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function () {
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (t) {
          return Text_Parsing_Parser_Combinators.chainr1(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(type1(t)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("->")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(AST.TypArr.create)));
      });
  });
  var infixDataConstrtructorDefinition = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(types))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(infixConstructor(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))))(function (v1) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(types)))(function (v2) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.InfixDataConstr(v1, AST.LEFTASSOC.value, 9, v, v2));
          });
      });
  });
  var prefixDataConstrtructorDefinition = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(upperCaseName(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser.lazyParserT)(types))(function (v1) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.PrefixDataConstr(v, Data_List.length(v1), v1));
      });
  });
  var dataConstructorDefinition = Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(prefixDataConstrtructorDefinition))(infixDataConstrtructorDefinition);
  var typeDefinition = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(ilexe(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("data")))(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(indent(upperCaseName(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser.lazyParserT)(indent(name(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))))(function (v1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("="))))(function () {
                  return Text_Parsing_Parser_Combinators.sepBy(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(dataConstructorDefinition))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(indent(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))("|"))));
              }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List_Types.Nil.value)))(function (v2) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(new AST.ADTDef(v, v1, v2));
              });
          });
      });
  });
  var typeDefinition$prime = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(curr(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(typeDefinition)(function (v1) {
          var defsAndIdx = Control_Monad_State.runState(AST.compileADTDef(v1))(v);
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(putNew(Data_Identity.monadIdentity)(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Tuple.snd(defsAndIdx)))(function () {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Tuple.fst(defsAndIdx));
          });
      });
  });
  var definitions = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(skipWhite(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(typeDefinition$prime))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))))(Control_Applicative.pure(Data_List_Types.applicativeList))(definition))))(function (v) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_List.concat(v));
      });
  });
  var parseDefs = runParserIndent(definitions);
  exports["anyLetter"] = anyLetter;
  exports["applicationOrSingleExpression"] = applicationOrSingleExpression;
  exports["arithmeticSequence"] = arithmeticSequence;
  exports["atom"] = atom;
  exports["base"] = base;
  exports["binding"] = binding;
  exports["bndComplex"] = bndComplex;
  exports["bndConses"] = bndConses;
  exports["bndInfixes"] = bndInfixes;
  exports["bndList"] = bndList;
  exports["bndLit"] = bndLit;
  exports["bndSimple"] = bndSimple;
  exports["bool"] = bool;
  exports["charList"] = charList;
  exports["charLiteral"] = charLiteral;
  exports["character"] = character;
  exports["constructor"] = constructor;
  exports["curr"] = curr;
  exports["dataConstructorDefinition"] = dataConstructorDefinition;
  exports["definition"] = definition;
  exports["definitions"] = definitions;
  exports["expression"] = expression;
  exports["fresh"] = fresh;
  exports["freshMeta"] = freshMeta;
  exports["ifThenElse"] = ifThenElse;
  exports["ilexe"] = ilexe;
  exports["indent"] = indent;
  exports["infixConstructor"] = infixConstructor;
  exports["infixDataConstrtructorDefinition"] = infixDataConstrtructorDefinition;
  exports["infixFunc"] = infixFunc;
  exports["infixOperators"] = infixOperators;
  exports["integer"] = integer;
  exports["lambda"] = lambda;
  exports["letExpr"] = letExpr;
  exports["list"] = list;
  exports["listComp"] = listComp;
  exports["lookAhead"] = lookAhead;
  exports["lower"] = lower;
  exports["many1"] = many1;
  exports["name"] = name;
  exports["opParser"] = opParser;
  exports["operatorTable"] = operatorTable;
  exports["parseDefs"] = parseDefs;
  exports["parseExpr"] = parseExpr;
  exports["prefixDataConstrtructorDefinition"] = prefixDataConstrtructorDefinition;
  exports["putNew"] = putNew;
  exports["runIndexing"] = runIndexing;
  exports["runIndexingT"] = runIndexingT;
  exports["runParserIndent"] = runParserIndent;
  exports["section"] = section;
  exports["simpleType"] = simpleType;
  exports["skipSpaces"] = skipSpaces;
  exports["skipWhite"] = skipWhite;
  exports["spaced"] = spaced;
  exports["symbol"] = symbol;
  exports["syntax"] = syntax;
  exports["tuplesOrBrackets"] = tuplesOrBrackets;
  exports["type1"] = type1;
  exports["typeCons"] = typeCons;
  exports["typeDefinition"] = typeDefinition;
  exports["typeExpr"] = typeExpr;
  exports["typeTuple"] = typeTuple;
  exports["types"] = types;
  exports["types1"] = types1;
  exports["upperCaseName"] = upperCaseName;
  exports["variable"] = variable;
})(PS["Parser"] = PS["Parser"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_List = PS["Data.List"];
  var Data_Set = PS["Data.Set"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Array = PS["Data.Array"];
  var Data_String = PS["Data.String"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var DOM = PS["DOM"];
  var AST = PS["AST"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Control_Category = PS["Control.Category"];        
  var Node = (function () {
      function Node(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Node.create = function (value0) {
          return function (value1) {
              return new Node(value0, value1);
          };
      };
      return Node;
  })();
  var zipList = function (zipp) {
      return function (hole) {
          return function (v) {
              if (v instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v instanceof Data_List_Types.Cons) {
                  return new Data_List_Types.Cons(zipp(function (x) {
                      return hole(new Data_List_Types.Cons(x, v.value1));
                  })(v.value0), zipList(zipp)(function ($210) {
                      return hole(Data_List_Types.Cons.create(v.value0)($210));
                  })(v.value1));
              };
              throw new Error("Failed pattern match at Web line 91, column 1 - line 91, column 28: " + [ zipp.constructor.name, hole.constructor.name, v.constructor.name ]);
          };
      };
  };
  var typedNodeHole = function (dictFoldable) {
      return function (dictFoldable1) {
          return function (content) {
              return function (classes) {
                  return function (children) {
                      return function (exprType) {
                          return function (expr) {
                              return function (hole) {
                                  return new Node({
                                      content: content, 
                                      classes: Data_List.fromFoldable(dictFoldable)(classes), 
                                      zipper: new Data_Maybe.Just(new Data_Tuple.Tuple(expr, hole)), 
                                      exprType: exprType
                                  }, Data_List.fromFoldable(dictFoldable1)(children));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var typedNode = function (dictFoldable) {
      return function (dictFoldable1) {
          return function (content) {
              return function (classes) {
                  return function (children) {
                      return function (exprType) {
                          return new Node({
                              content: content, 
                              classes: Data_List.fromFoldable(dictFoldable)(classes), 
                              zipper: Data_Maybe.Nothing.value, 
                              exprType: exprType
                          }, Data_List.fromFoldable(dictFoldable1)(children));
                      };
                  };
              };
          };
      };
  };
  var toString = function (ls) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Data_List_Types.Cons && (v1.value0 instanceof AST.Atom && v1.value0.value1 instanceof AST.Char)) {
                      var $51 = Data_String.toChar(v1.value0.value1.value0);
                      if ($51 instanceof Data_Maybe.Just) {
                          var __tco_v = Data_Array.snoc(v)($51.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if ($51 instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Web line 358, column 42 - line 360, column 64: " + [ $51.constructor.name ]);
                  };
                  if (v.length === 0 && v1 instanceof Data_List_Types.Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      return new Data_Maybe.Just(v);
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_String.fromCharArray)(go([  ])(ls));
  };
  var opToDiv = function (v) {
      return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(AST.pPrintOp(v.value0))([ "op" ])([  ])(v.value1.mtype);
  };
  var oneOfClasses = function (dictFoldable) {
      return function (dictFoldable1) {
          return function (cs1) {
              return function (cs2) {
                  var set2 = Data_Set.fromFoldable(dictFoldable1)(Data_Ord.ordString)(cs2);
                  var set1 = Data_Set.fromFoldable(dictFoldable)(Data_Ord.ordString)(cs1);
                  return Data_Set.size(Data_Set.intersection(Data_Ord.ordString)(set1)(set2)) > 0;
              };
          };
      };
  };
  var node = function (dictFoldable) {
      return function (dictFoldable1) {
          return function (content) {
              return function (classes) {
                  return function (children) {
                      return new Node({
                          content: content, 
                          classes: Data_List.fromFoldable(dictFoldable)(classes), 
                          zipper: Data_Maybe.Nothing.value, 
                          exprType: Data_Maybe.Nothing.value
                      }, Data_List.fromFoldable(dictFoldable1)(children));
                  };
              };
          };
      };
  };
  var openBrace = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("(")([ "brace", "left" ])([  ]);
  var needsTypeContainer = function (dictFoldable) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return false;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  var decideByType = function (v2) {
                      return true;
                  };
                  var decideByClass = function (classes1) {
                      var $63 = oneOfClasses(Data_Foldable.foldableArray)(dictFoldable)([ "op", "binding", "num", "char", "bool", "gen", "guard", "let" ])(classes1);
                      if ($63) {
                          return false;
                      };
                      if (!$63) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Web line 312, column 29 - line 312, column 137: " + [ $63.constructor.name ]);
                  };
                  return decideByClass(v) && decideByType(v1.value0);
              };
              throw new Error("Failed pattern match at Web line 308, column 1 - line 308, column 37: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var makeDiv = function (dictFoldable) {
      return function (text) {
          return function (classes) {
              return function __do() {
                  var v = Control_Monad_Eff_JQuery.create("<div></div>")();
                  Control_Monad_Eff_JQuery.setText(text)(v)();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(classes)(Data_Function.flip(Control_Monad_Eff_JQuery.addClass)(v))();
                  return v;
              };
          };
      };
  };
  var letexpr = function (t) {
      return function (binds) {
          return function (expr) {
              var semi = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(";")([ "comma" ])([  ]);
              var letDiv = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("let")([ "keyword" ])([  ]);
              var inDiv = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("in")([ "keyword" ])([  ]);
              var equal = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("=")([ "comma" ])([  ]);
              var bind = function (v) {
                  return [ node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([  ])([ v.value0, equal, v.value1 ]) ];
              };
              return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "letexpr" ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ letDiv ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidArray)([ semi ])(Data_Functor.map(Data_List_Types.functorList)(bind)(binds)))([ inDiv, expr ])))(t);
          };
      };
  };
  var letQual = function (t) {
      return function (bind) {
          return function (expr) {
              var letDiv = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("let")([ "keyword" ])([  ]);
              var eqDiv = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("=")([ "comma" ])([  ]);
              return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "let" ])([ letDiv, bind, eqDiv, expr ])(t);
          };
      };
  };
  var lambda = function (t) {
      return function (params) {
          return function (body) {
              var open = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("(")([ "brace", "left" ])([  ]);
              var close = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(")")([ "brace", "right" ])([  ]);
              var bslash = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("\\")([ "backslash", "separator" ])([  ]);
              var arrow = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("->")([ "arrow", "separator" ])([  ]);
              return typedNodeHole(Data_Foldable.foldableArray)(Data_List_Types.foldableList)("")([ "lambda" ])(Data_Semigroup.append(Data_List_Types.semigroupList)(new Data_List_Types.Cons(open, new Data_List_Types.Cons(bslash, params)))(new Data_List_Types.Cons(arrow, new Data_List_Types.Cons(body, new Data_List_Types.Cons(close, Data_List_Types.Nil.value)))))(t);
          };
      };
  };
  var isTypeError = function (v) {
      if (v instanceof Data_Maybe.Just && v.value0 instanceof AST["TypeError"]) {
          return true;
      };
      return false;
  };
  var intersperse = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
              return new Data_List_Types.Cons(v1.value0, Data_List_Types.Nil.value);
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return Data_List_Types.Cons.create(v1.value0)(Data_List_Types.Cons.create(v)(intersperse(v)(v1.value1)));
          };
          throw new Error("Failed pattern match at Web line 228, column 1 - line 228, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var listcomp = function (t) {
      return function (expr) {
          return function (quals) {
              var pipe = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("|")([ "brace" ])([  ]);
              var open = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("[")([ "brace", "left" ])([  ]);
              var comma = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(",")([ "comma" ])([  ]);
              var close = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("]")([ "brace", "right" ])([  ]);
              return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "listcomp", "list" ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ open, expr, pipe ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.fromFoldable(Data_List_Types.foldableList)(intersperse(comma)(quals)))([ close ])))(t);
          };
      };
  };
  var interleave = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
              return new Data_List_Types.Cons(v1.value0, Data_List_Types.Nil.value);
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return Data_List_Types.Cons.create(v1.value0)(Data_List_Types.Cons.create(v)(interleave(v)(v1.value1)));
          };
          throw new Error("Failed pattern match at Web line 175, column 1 - line 175, column 32: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var listify = function (b) {
      return function (s) {
          return function (e) {
              return function (ls) {
                  var sep = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(s)([ "separator", "comma" ])([  ]);
                  var end = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(e)([ "brace", "right" ])([  ]);
                  var begin = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(b)([ "brace", "left" ])([  ]);
                  return new Data_List_Types.Cons(begin, Data_List.snoc(interleave(sep)(ls))(end));
              };
          };
      };
  };
  var list = function (t) {
      return function (v) {
          if (v instanceof Data_List_Types.Nil) {
              return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("[]")([ "list empty" ])([  ])(t);
          };
          return typedNodeHole(Data_Foldable.foldableArray)(Data_List_Types.foldableList)("")([ "list" ])(listify("[")(",")("]")(v))(t);
      };
  };
  var ntuple = function (t) {
      return function (ls) {
          return typedNodeHole(Data_Foldable.foldableArray)(Data_List_Types.foldableList)("")([ "tuple" ])(listify("(")(",")(")")(ls))(t);
      };
  };
  var ifexpr = function (t) {
      return function (cd) {
          return function (td) {
              return function (ed) {
                  var thenDiv = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("then")([ "keyword" ])([  ]);
                  var ifDiv = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("if")([ "keyword" ])([  ]);
                  var elseDiv = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("else")([ "keyword" ])([  ]);
                  return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "if" ])([ ifDiv, cd, thenDiv, td, elseDiv, ed ])(t);
              };
          };
      };
  };
  var highlight$prime = function (hl) {
      return function (v) {
          var f = function (v1) {
              return function (acc) {
                  if (v1.value1 === v.index) {
                      return new Data_List_Types.Cons(v1.value0, acc);
                  };
                  return acc;
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(Data_List_Types.Nil.value)(hl);
      };
  };
  var highlight = function (hl) {
      return function (meta) {
          return function (v) {
              return new Node((function () {
                  var $95 = {};
                  for (var $96 in v.value0) {
                      if (v.value0.hasOwnProperty($96)) {
                          $95[$96] = v.value0[$96];
                      };
                  };
                  $95.classes = Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0.classes)(highlight$prime(hl)(meta));
                  return $95;
              })(), v.value1);
          };
      };
  };
  var guardQual = function (t) {
      return function (guard) {
          return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "guard" ])([ guard ])(t);
      };
  };
  var genQual = function (t) {
      return function (bind) {
          return function (expr) {
              var arrow = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("<-")([ "separator" ])([  ]);
              return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "gen" ])([ bind, arrow, expr ])(t);
          };
      };
  };
  var divToJQuery = function (isTopLevelDiv) {
      return function (callback) {
          return function (v) {
              var needsContainer = needsTypeContainer(Data_List_Types.foldableList)(v.value0.classes)(v.value0.exprType) || (isTopLevelDiv || isTypeError(v.value0.exprType));
              var isTyped = Data_Maybe.isJust(v.value0.exprType);
              return function __do() {
                  var v1 = makeDiv(Data_Foldable.foldableArray)("")([ "container" ])();
                  var v2 = makeDiv(Data_List_Types.foldableList)(v.value0.content)(v.value0.classes)();
                  Control_Monad_Eff_JQuery.append(v2)(v1)();
                  Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List_Types.traversableList)(v.value1)(Control_Bind.composeKleisli(Control_Monad_Eff.bindEff)(divToJQuery(false)(callback))(Data_Function.flip(Control_Monad_Eff_JQuery.append)(v2)))();
                  (function () {
                      if (v.value0.zipper instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                      };
                      if (v.value0.zipper instanceof Data_Maybe.Just) {
                          return function __do() {
                              Control_Monad_Eff_JQuery.on("click")(callback(v.value0.zipper.value0.value0)(v.value0.zipper.value0.value1))(v2)();
                              Control_Monad_Eff_JQuery.on("mouseover")(callback(v.value0.zipper.value0.value0)(v.value0.zipper.value0.value1))(v2)();
                              Control_Monad_Eff_JQuery.on("mouseout")(callback(v.value0.zipper.value0.value0)(v.value0.zipper.value0.value1))(v2)();
                              return Data_Unit.unit;
                          };
                      };
                      throw new Error("Failed pattern match at Web line 342, column 3 - line 348, column 16: " + [ v.value0.zipper.constructor.name ]);
                  })()();
                  if (needsContainer) {
                      return v1;
                  };
                  if (!needsContainer) {
                      return v2;
                  };
                  throw new Error("Failed pattern match at Web line 350, column 3 - line 352, column 18: " + [ needsContainer.constructor.name ]);
              };
          };
      };
  };
  var constr = function (t) {
      return function (n) {
          return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(n)([ "constr", "name" ])([  ])(t);
      };
  };
  var closeBrace = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(")")([ "brace", "right" ])([  ]);
  var prefixOp = function (binType) {
      return function (op) {
          return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "prefixOp" ])([ openBrace, opToDiv(op), closeBrace ])(binType);
      };
  };
  var sectl = function (t) {
      return function (div) {
          return function (op) {
              return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "section" ])([ openBrace, div, opToDiv(op), closeBrace ])(t);
          };
      };
  };
  var sectr = function (t) {
      return function (op) {
          return function (div) {
              return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "section" ])([ openBrace, opToDiv(op), div, closeBrace ])(t);
          };
      };
  };
  var unary = function (t) {
      return function (op) {
          return function (div) {
              return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "unary" ])([ openBrace, opToDiv(op), div, closeBrace ])(t);
          };
      };
  };
  var binary = function (binType) {
      return function (op) {
          return function (d1) {
              return function (d2) {
                  return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "binary" ])([ d1, opToDiv(op), d2 ])(binType);
              };
          };
      };
  };
  var atom = function (t) {
      return function (v) {
          if (v instanceof AST.AInt) {
              return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(Data_Show.show(Data_Show.showInt)(v.value0))([ "atom", "num" ])([  ])(t);
          };
          if (v instanceof AST.Bool) {
              return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)((function () {
                  if (v.value0) {
                      return "True";
                  };
                  if (!v.value0) {
                      return "False";
                  };
                  throw new Error("Failed pattern match at Web line 166, column 30 - line 166, column 59: " + [ v.value0.constructor.name ]);
              })())([ "atom", "bool" ])([  ])(t);
          };
          if (v instanceof AST.Char) {
              return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("'" + (v.value0 + "'"))([ "atom", "char" ])([  ])(t);
          };
          if (v instanceof AST.Name) {
              return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(v.value0)([ "atom", "name" ])([  ])(t);
          };
          if (v instanceof AST.Constr) {
              return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(v.value0)([ "constr", "name" ])([  ])(t);
          };
          throw new Error("Failed pattern match at Web line 165, column 1 - line 165, column 58: " + [ t.constructor.name, v.constructor.name ]);
      };
  };
  var binding = function (v) {
      if (v instanceof AST.Lit) {
          return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "binding", "lit" ])([ atom(AST.getMetaMType(v.value0))(v.value1) ])(AST.getMetaMType(v.value0));
      };
      if (v instanceof AST.ConsLit) {
          return typedNode(Data_Foldable.foldableArray)(Data_List_Types.foldableList)("")([ "binding", "conslit" ])(listify("(")(":")(")")(new Data_List_Types.Cons(binding(v.value1), new Data_List_Types.Cons(binding(v.value2), Data_List_Types.Nil.value))))(AST.getMetaMType(v.value0));
      };
      if (v instanceof AST.ListLit) {
          return typedNode(Data_Foldable.foldableArray)(Data_List_Types.foldableList)("")([ "binding", "listlit" ])(listify("[")(",")("]")(Data_Functor.map(Data_List_Types.functorList)(binding)(v.value1)))(AST.getMetaMType(v.value0));
      };
      if (v instanceof AST.NTupleLit) {
          return typedNode(Data_Foldable.foldableArray)(Data_List_Types.foldableList)("")([ "binding", "tuplelit" ])(listify("(")(",")(")")(Data_Functor.map(Data_List_Types.functorList)(binding)(v.value1)))(AST.getMetaMType(v.value0));
      };
      if (v instanceof AST.ConstrLit) {
          if (v.value1 instanceof AST.PrefixDataConstr) {
              return typedNode(Data_Foldable.foldableArray)(Data_List_Types.foldableList)("")([ "binding", "constrlit" ])(Data_Semigroup.append(Data_List_Types.semigroupList)(new Data_List_Types.Cons(node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("(")([ "brace", "left" ])([  ]), new Data_List_Types.Cons(constr(AST.getMetaMType(v.value0))(v.value1.value0), Data_Functor.map(Data_List_Types.functorList)(binding)(v.value1.value2))))(Data_List.singleton(node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(")")([ "brace", "right" ])([  ]))))(AST.getMetaMType(v.value0));
          };
          if (v.value1 instanceof AST.InfixDataConstr) {
              return typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "binding", "constrlit" ])([ binding(v.value1.value3), constr(AST.getMetaMType(v.value0))(v.value1.value0), binding(v.value1.value4) ])(AST.getMetaMType(v.value0));
          };
          throw new Error("Failed pattern match at Web line 276, column 27 - line 284, column 55: " + [ v.value1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Web line 272, column 1 - line 272, column 103: " + [ v.constructor.name ]);
  };
  var arithmseq = function (t) {
      return function (start) {
          return function (mnext) {
              return function (mend) {
                  var open = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("[")([ "brace", "left" ])([  ]);
                  var end = Data_Unfoldable.fromMaybe(Data_Unfoldable.unfoldableArray)(mend);
                  var dots = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("..")([ "dots", "comma" ])([  ]);
                  var comma = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(",")([ "comma" ])([  ]);
                  var commaNext = Data_Maybe.maybe([  ])(function (next) {
                      return [ comma, next ];
                  })(mnext);
                  var close = node(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("]")([ "brace", "right" ])([  ]);
                  return typedNodeHole(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("")([ "arithmseq", "list" ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ open, start ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(commaNext)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ dots ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(end)([ close ])))))(t);
              };
          };
      };
  };
  var app = function (t) {
      return function (func) {
          return function (args) {
              return typedNodeHole(Data_Foldable.foldableArray)(Data_List_Types.foldableList)("")([ "app" ])(new Data_List_Types.Cons(func, args))(t);
          };
      };
  };
  var exprToDiv = function (hl) {
      var h = highlight(hl);
      var go = function (hole) {
          return function (v) {
              if (v instanceof AST.Atom) {
                  return h(v.value0)(atom(AST.getMetaMType(v.value0))(v.value1));
              };
              if (v instanceof AST.List) {
                  var $152 = toString(v.value1);
                  if ($152 instanceof Data_Maybe.Nothing) {
                      return h(v.value0)(list(AST.getMetaMType(v.value0))(zipList(go)(function ($211) {
                          return hole(AST.List.create(v.value0)($211));
                      })(v.value1))(v)(hole));
                  };
                  if ($152 instanceof Data_Maybe.Just) {
                      return h(v.value0)(typedNode(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)("\"" + ($152.value0 + "\""))([ "list", "string" ])([  ])(AST.getMetaMType(v.value0)));
                  };
                  throw new Error("Failed pattern match at Web line 102, column 45 - line 104, column 138: " + [ $152.constructor.name ]);
              };
              if (v instanceof AST.NTuple) {
                  return h(v.value0)(ntuple(AST.getMetaMType(v.value0))(zipList(go)(function ($212) {
                      return hole(AST.NTuple.create(v.value0)($212));
                  })(v.value1))(v)(hole));
              };
              if (v instanceof AST.Binary) {
                  return h(v.value0)(binary(AST.getMetaMType(v.value0))(v.value1)(go(function (e11) {
                      return hole(new AST.Binary(v.value0, v.value1, e11, v.value3));
                  })(v.value2))(go(function (e21) {
                      return hole(new AST.Binary(v.value0, v.value1, v.value2, e21));
                  })(v.value3))(v)(hole));
              };
              if (v instanceof AST.Unary) {
                  return h(v.value0)(unary(AST.getMetaMType(v.value0))(v.value1)(go(function ($213) {
                      return hole(AST.Unary.create(v.value0)(v.value1)($213));
                  })(v.value2))(v)(hole));
              };
              if (v instanceof AST.SectL) {
                  return h(v.value0)(sectl(AST.getMetaMType(v.value0))(go(function (e1) {
                      return hole(new AST.SectL(v.value0, e1, v.value2));
                  })(v.value1))(v.value2)(v)(hole));
              };
              if (v instanceof AST.SectR) {
                  return h(v.value0)(sectr(AST.getMetaMType(v.value0))(v.value1)(go(function ($214) {
                      return hole(AST.SectR.create(v.value0)(v.value1)($214));
                  })(v.value2))(v)(hole));
              };
              if (v instanceof AST.PrefixOp) {
                  return h(v.value0)(prefixOp(AST.getMetaMType(v.value0))(v.value1));
              };
              if (v instanceof AST.IfExpr) {
                  return h(v.value0)(ifexpr(AST.getMetaMType(v.value0))(go(function (ce1) {
                      return hole(new AST.IfExpr(v.value0, ce1, v.value2, v.value3));
                  })(v.value1))(go(function (te1) {
                      return hole(new AST.IfExpr(v.value0, v.value1, te1, v.value3));
                  })(v.value2))(go(function (ee1) {
                      return hole(new AST.IfExpr(v.value0, v.value1, v.value2, ee1));
                  })(v.value3))(v)(hole));
              };
              if (v instanceof AST.LetExpr) {
                  return h(v.value0)(letexpr(AST.getMetaMType(v.value0))(zipList(function (listHole) {
                      return function (v1) {
                          return new Data_Tuple.Tuple(binding(v1.value0), go(function (x) {
                              return listHole(new Data_Tuple.Tuple(v1.value0, x));
                          })(v1.value1));
                      };
                  })(function (xs) {
                      return hole(new AST.LetExpr(v.value0, xs, v.value2));
                  })(v.value1))(go(function (x) {
                      return hole(new AST.LetExpr(v.value0, v.value1, x));
                  })(v.value2))(v)(hole));
              };
              if (v instanceof AST.Lambda) {
                  return h(v.value0)(lambda(AST.getMetaMType(v.value0))(Data_Functor.map(Data_List_Types.functorList)(binding)(v.value1))(go(function ($215) {
                      return hole(AST.Lambda.create(v.value0)(v.value1)($215));
                  })(v.value2))(v)(hole));
              };
              if (v instanceof AST.ArithmSeq) {
                  return h(v.value0)(arithmseq(AST.getMetaMType(v.value0))(go(function (x) {
                      return hole(new AST.ArithmSeq(v.value0, x, v.value2, v.value3));
                  })(v.value1))(Data_Functor.map(Data_Maybe.functorMaybe)(go(function (x) {
                      return hole(new AST.ArithmSeq(v.value0, v.value1, new Data_Maybe.Just(x), v.value3));
                  }))(v.value2))(Data_Functor.map(Data_Maybe.functorMaybe)(go(function (x) {
                      return hole(new AST.ArithmSeq(v.value0, v.value1, v.value2, new Data_Maybe.Just(x)));
                  }))(v.value3))(v)(hole));
              };
              if (v instanceof AST.ListComp) {
                  var qualToDiv = function (hole2) {
                      return function (v1) {
                          if (v1 instanceof AST.Guard) {
                              return h(v1.value0)(guardQual(AST.getMetaMType(v1.value0))(go(function (x) {
                                  return hole2(new AST.Guard(v1.value0, x));
                              })(v1.value1)));
                          };
                          if (v1 instanceof AST.Let) {
                              return h(v1.value0)(letQual(AST.getMetaMType(v1.value0))(binding(v1.value1))(go(function (x) {
                                  return hole2(new AST.Let(v1.value0, v1.value1, x));
                              })(v1.value2)));
                          };
                          if (v1 instanceof AST.Gen) {
                              return h(v1.value0)(genQual(AST.getMetaMType(v1.value0))(binding(v1.value1))(go(function (x) {
                                  return hole2(new AST.Gen(v1.value0, v1.value1, x));
                              })(v1.value2)));
                          };
                          throw new Error("Failed pattern match at Web line 141, column 9 - line 141, column 124: " + [ hole2.constructor.name, v1.constructor.name ]);
                      };
                  };
                  return h(v.value0)(listcomp(AST.getMetaMType(v.value0))(go(function (x) {
                      return hole(new AST.ListComp(v.value0, x, v.value2));
                  })(v.value1))(zipList(qualToDiv)(function (xs) {
                      return hole(new AST.ListComp(v.value0, v.value1, xs));
                  })(v.value2))(v)(hole));
              };
              if (v instanceof AST.App) {
                  var funcHole = function (func1) {
                      return hole(new AST.App(v.value0, func1, v.value2));
                  };
                  var argsDivs = zipList(go)(function ($216) {
                      return hole(AST.App.create(v.value0)(v.value1)($216));
                  })(v.value2);
                  return h(v.value0)(app(AST.getMetaMType(v.value0))(go(funcHole)(v.value1))(argsDivs)(v)(hole));
              };
              throw new Error("Failed pattern match at Web line 101, column 5 - line 101, column 80: " + [ hole.constructor.name, v.constructor.name ]);
          };
      };
      return go(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Node"] = Node;
  exports["app"] = app;
  exports["arithmseq"] = arithmseq;
  exports["atom"] = atom;
  exports["binary"] = binary;
  exports["binding"] = binding;
  exports["closeBrace"] = closeBrace;
  exports["constr"] = constr;
  exports["divToJQuery"] = divToJQuery;
  exports["exprToDiv"] = exprToDiv;
  exports["genQual"] = genQual;
  exports["guardQual"] = guardQual;
  exports["highlight"] = highlight;
  exports["ifexpr"] = ifexpr;
  exports["interleave"] = interleave;
  exports["intersperse"] = intersperse;
  exports["isTypeError"] = isTypeError;
  exports["lambda"] = lambda;
  exports["letQual"] = letQual;
  exports["letexpr"] = letexpr;
  exports["list"] = list;
  exports["listcomp"] = listcomp;
  exports["listify"] = listify;
  exports["makeDiv"] = makeDiv;
  exports["needsTypeContainer"] = needsTypeContainer;
  exports["node"] = node;
  exports["ntuple"] = ntuple;
  exports["oneOfClasses"] = oneOfClasses;
  exports["opToDiv"] = opToDiv;
  exports["openBrace"] = openBrace;
  exports["prefixOp"] = prefixOp;
  exports["sectl"] = sectl;
  exports["sectr"] = sectr;
  exports["toString"] = toString;
  exports["typedNode"] = typedNode;
  exports["typedNodeHole"] = typedNodeHole;
  exports["unary"] = unary;
  exports["zipList"] = zipList;
})(PS["Web"] = PS["Web"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Data_Array = PS["Data.Array"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Set = PS["Data.Set"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var AST = PS["AST"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Unit = PS["Data.Unit"];        
  var Unique = (function () {
      function Unique(value0) {
          this.value0 = value0;
      };
      Unique.create = function (value0) {
          return new Unique(value0);
      };
      return Unique;
  })();
  var Triple = (function () {
      function Triple(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Triple.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Triple(value0, value1, value2);
              };
          };
      };
      return Triple;
  })();
  var Forall = (function () {
      function Forall(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Forall.create = function (value0) {
          return function (value1) {
              return new Forall(value0, value1);
          };
      };
      return Forall;
  })();
  var TypeEnv = (function () {
      function TypeEnv(value0) {
          this.value0 = value0;
      };
      TypeEnv.create = function (value0) {
          return new TypeEnv(value0);
      };
      return TypeEnv;
  })();
  var Constraint = (function () {
      function Constraint(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Constraint.create = function (value0) {
          return function (value1) {
              return new Constraint(value0, value1);
          };
      };
      return Constraint;
  })();
  var ConstraintError = (function () {
      function ConstraintError(value0) {
          this.value0 = value0;
      };
      ConstraintError.create = function (value0) {
          return new ConstraintError(value0);
      };
      return ConstraintError;
  })();
  var Substitutable = function (apply, ftv) {
      this.apply = apply;
      this.ftv = ftv;
  };
  var unzip3 = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
      return function (v1) {
          return new Triple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1), new Data_List_Types.Cons(v.value2, v1.value2));
      };
  })(new Triple(Data_List_Types.Nil.value, Data_List_Types.Nil.value, Data_List_Types.Nil.value));
  var toConstraintAndIndexLists = function (constraints) {
      return Data_Semigroup.append(Data_Tuple.semigroupTuple(Data_List_Types.semigroupList)(Data_List_Types.semigroupList))(Data_List.unzip(constraints.unmapped))(Data_List.unzip(Data_Map.toList(constraints.mapped)));
  };
  var toArrowType = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Partial_Unsafe.unsafeCrashWith("Function `toArrowType` must not be called with an empty list.");
      };
      if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
          return v.value0;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new AST.TypArr(v.value0, toArrowType(v.value1));
      };
      throw new Error("Failed pattern match at TypeChecker line 289, column 1 - line 290, column 1: " + [ v.constructor.name ]);
  }; 
  var removeMultiple = function (v) {
      return function (tvars) {
          return TypeEnv.create(Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Map["delete"](Data_Ord.ordString))(v.value0)(tvars));
      };
  };
  var nullSubst = Data_Map.empty;
  var makeIndexedDefinitionGroup = (function () {
      var f = function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  var $311 = AST.makeIndexedDefinition(v1.value0)(v);
                  return new Data_List_Types.Cons($311.value0, f($311.value1)(v1.value1));
              };
              throw new Error("Failed pattern match at TypeChecker line 1299, column 1 - line 1303, column 60: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      return f(0);
  })();
  var last$prime = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Data_List_Types.Nil) {
              return Partial_Unsafe.unsafeCrashWith("last': empty list");
          };
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              return v.value0;
          };
          if (v instanceof Data_List_Types.Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          throw new Error("Failed pattern match at TypeChecker line 54, column 1 - line 55, column 1: " + [ v.constructor.name ]);
      };
  };
  var isTypedExpr = function ($1228) {
      return Data_Maybe.isJust(AST.getMetaMType(AST.extractFromTree($1228)));
  };
  var isTypedBinding = function ($1229) {
      return Data_Maybe.isJust((function (v) {
          return v.mtype;
      })(AST.extractFromBinding($1229)));
  };
  var isEnumType = function (v) {
      if (v instanceof AST.TypCon && v.value0 === "Int") {
          return true;
      };
      if (v instanceof AST.TypCon && v.value0 === "Char") {
          return true;
      };
      if (v instanceof AST.TypCon && v.value0 === "Bool") {
          return true;
      };
      return false;
  };
  var intType = new AST.TypCon("Int");
  var intToIntType = new AST.TypArr(intType, intType);
  var intToIntToIntType = new AST.TypArr(intType, intToIntType);
  var initialUnifier = function (constraints) {
      return {
          subst: nullSubst, 
          constraints: constraints
      };
  };
  var initUnique = new Unique({
      count: 0
  });
  var runInferWith = function (env) {
      return function (stopOnError) {
          return function (m) {
              var inferEnv = {
                  env: env, 
                  stopOnError: stopOnError
              };
              return Control_Monad_Except.runExcept(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Tuple.fst)(Control_Monad_RWS_Trans.evalRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(m)(inferEnv)(initUnique)));
          };
      };
  };
  var indexList = function (n) {
      if ((n / 26 | 0) > 0) {
          return Data_Array.cons(n % 26)(indexList((n / 26 | 0) - 1));
      };
      return [ n % 26 ];
  };
  var getNthName = (function () {
      var toCharArray = Data_Functor.map(Data_Functor.functorArray)(function ($1230) {
          return Data_Char.fromCharCode(97 + $1230 | 0);
      });
      return function ($1231) {
          return (function ($1232) {
              return Data_String.fromCharArray(toCharArray($1232));
          })(Data_Array.reverse(indexList($1231)));
      };
  })();
  var normalizeType$prime = function (t) {
      if (t instanceof AST.TypVar) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v) {
              var $329 = Data_Map.lookup(Data_Ord.ordString)(t.value0)(v.env);
              if ($329 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new AST.TypVar($329.value0));
              };
              if ($329 instanceof Data_Maybe.Nothing) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v1) {
                      var newVarName = getNthName(v1.count);
                      var env$prime = Data_Map.insert(Data_Ord.ordString)(t.value0)(newVarName)(v.env);
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))({
                          count: v1.count + 1 | 0, 
                          env: env$prime
                      }))(function () {
                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new AST.TypVar(newVarName));
                      });
                  });
              };
              throw new Error("Failed pattern match at TypeChecker line 1508, column 5 - line 1515, column 33: " + [ $329.constructor.name ]);
          });
      };
      if (t instanceof AST.TypArr) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(normalizeType$prime(t.value0))(function (v) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(normalizeType$prime(t.value1))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new AST.TypArr(v, v1));
              });
          });
      };
      if (t instanceof AST.TList) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(normalizeType$prime(t.value0))(function (v) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new AST.TList(v));
          });
      };
      if (t instanceof AST.TTuple) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(normalizeType$prime)(t.value0))(function (v) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new AST.TTuple(v));
          });
      };
      if (t instanceof AST.TTypeCons) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(normalizeType$prime)(t.value1))(function (v) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new AST.TTypeCons(t.value0, v));
          });
      };
      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(t);
  };
  var normalizeMType$prime = Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(normalizeType$prime);
  var normalizeBinding$prime = AST.traverseBinding(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(function (v) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(normalizeMType$prime(v.mtype))(function (v1) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))((function () {
              var $348 = {};
              for (var $349 in v) {
                  if (v.hasOwnProperty($349)) {
                      $348[$349] = v[$349];
                  };
              };
              $348.mtype = v1;
              return $348;
          })());
      });
  });
  var normalizeOp$prime = function (v) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(normalizeMType$prime(v.value1.mtype))(function (v1) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v.value0, AST.Meta((function () {
              var $353 = {};
              for (var $354 in v.value1) {
                  if (v.value1.hasOwnProperty($354)) {
                      $353[$354] = v.value1[$354];
                  };
              };
              $353.mtype = v1;
              return $353;
          })())));
      });
  };
  var normalizeTypeTree$prime = AST.traverseTree(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(normalizeBinding$prime)(normalizeOp$prime)(function (v) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(normalizeMType$prime(v.mtype))(function (v1) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))((function () {
              var $360 = {};
              for (var $361 in v) {
                  if (v.hasOwnProperty($361)) {
                      $360[$361] = v[$361];
                  };
              };
              $360.mtype = v1;
              return $360;
          })());
      });
  });
  var ftv = function (dict) {
      return dict.ftv;
  };
  var occursCheck = function (dictSubstitutable) {
      return function (a) {
          return function (t) {
              return Data_Set.member(Data_Ord.ordString)(a)(ftv(dictSubstitutable)(t));
          };
      };
  };
  var fromArrowType = function (v) {
      if (v instanceof AST.TypArr) {
          return new Data_List_Types.Cons(v.value0, fromArrowType(v.value1));
      };
      return new Data_List_Types.Cons(v, Data_List_Types.Nil.value);
  };
  var freshTVar = Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit)))(function (v) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Unique({
          count: v.value0.count + 1 | 0
      })))(function () {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))("t_" + Data_Show.show(Data_Show.showInt)(v.value0.count));
      });
  });
  var fresh = Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.TypVar.create)(freshTVar);
  var findTVarForNode = function (c) {
      return function (idx) {
          var $368 = Data_Map.lookup(Data_Ord.ordInt)(idx)(c.mapped);
          if ($368 instanceof Data_Maybe.Just && ($368.value0 instanceof Constraint && $368.value0.value0 instanceof AST.TypVar)) {
              return new Data_Maybe.Just($368.value0.value0.value0);
          };
          if ($368 instanceof Data_Maybe.Just && ($368.value0 instanceof Constraint && $368.value0.value1 instanceof AST.TypVar)) {
              return new Data_Maybe.Just($368.value0.value1.value0);
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var extend = function (v) {
      return function (v1) {
          return TypeEnv.create(Data_Map.insert(Data_Ord.ordString)(v1.value0)(v1.value1)(v.value0));
      };
  };
  var extendMultiple = Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Function.flip(extend));
  var withEnv = function (mappings) {
      return function (m) {
          var scope = function (mappings1) {
              return function (inferEnv) {
                  return {
                      env: extendMultiple(removeMultiple(inferEnv.env)(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.fst)(mappings1)))(mappings1), 
                      stopOnError: inferEnv.stopOnError
                  };
              };
          };
          return Control_Monad_Reader_Class.local(Control_Monad_RWS_Trans.monadReaderRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(scope(mappings))(m);
      };
  }; 
  var emptyTypeEnv = new TypeEnv(Data_Map.empty);
  var emptyNormalizationState = {
      count: 0, 
      env: Data_Map.empty
  };
  var normalizeType = function (t) {
      return Control_Monad_State.evalState(normalizeType$prime(t))(emptyNormalizationState);
  };
  var normalizeTypeError = function (v) {
      if (v instanceof AST.UnificationFail) {
          return new AST.UnificationFail(normalizeType(v.value0), normalizeType(v.value1));
      };
      if (v instanceof AST.InfiniteType) {
          return new AST.InfiniteType(AST.prettyPrintType(normalizeType(new AST.TypVar(v.value0))), normalizeType(v.value1));
      };
      return v;
  };
  var normalizeTypeTree = function (expr) {
      return Control_Monad_State.evalState(normalizeTypeTree$prime(expr))(emptyNormalizationState);
  };
  var emptyConstraints = {
      unmapped: Data_List_Types.Nil.value, 
      mapped: Data_Map.empty
  };
  var constraintSingleUnmapped = function (idx) {
      return function (v) {
          return function (v1) {
              if (v instanceof AST.UnknownType) {
                  return {
                      unmapped: new Data_List_Types.Cons(new Data_Tuple.Tuple(idx, new Constraint(v1, AST.UnknownType.value)), Data_List_Types.Nil.value), 
                      mapped: Data_Map.empty
                  };
              };
              return {
                  unmapped: new Data_List_Types.Cons(new Data_Tuple.Tuple(idx, new Constraint(v, v1)), Data_List_Types.Nil.value), 
                  mapped: Data_Map.empty
              };
          };
      };
  };
  var setConstraintFor = function (expr) {
      return function (t1) {
          return function (t2) {
              return constraintSingleUnmapped(AST.index(expr))(t1)(t2);
          };
      };
  };
  var setConstraintFor$prime = function (idx) {
      return function (t1) {
          return function (t2) {
              return constraintSingleUnmapped(idx)(t1)(t2);
          };
      };
  };
  var constraintSingleMapped = function (idx) {
      return function (v) {
          return function (v1) {
              if (v instanceof AST.UnknownType) {
                  return {
                      unmapped: Data_List_Types.Nil.value, 
                      mapped: Data_Map.singleton(idx)(new Constraint(v1, AST.UnknownType.value))
                  };
              };
              return {
                  unmapped: Data_List_Types.Nil.value, 
                  mapped: Data_Map.singleton(idx)(new Constraint(v, v1))
              };
          };
      };
  };
  var returnWithConstraint = function (expr) {
      return function (t) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v, constraintSingleMapped(AST.index(expr))(v)(t)));
          });
      };
  };
  var setSingleTypeConstraintFor = function (expr) {
      return function (t) {
          return constraintSingleMapped(AST.index(expr))(t)(t);
      };
  };
  var setSingleTypeConstraintFor$prime = function (idx) {
      return function (t) {
          return constraintSingleMapped(idx)(t)(t);
      };
  };
  var setTypeConstraintFor = function (expr) {
      return function (t1) {
          return function (t2) {
              return constraintSingleMapped(AST.index(expr))(t1)(t2);
          };
      };
  };
  var setTypeConstraintFor$prime = function (idx) {
      return function (t1) {
          return function (t2) {
              return constraintSingleMapped(idx)(t1)(t2);
          };
      };
  };
  var constraintError = function (idx) {
      return function (tv) {
          return function (error) {
              return {
                  unmapped: new Data_List_Types.Cons(new Data_Tuple.Tuple(idx, new Constraint(tv, AST.UnknownType.value)), Data_List_Types.Nil.value), 
                  mapped: Data_Map.singleton(idx)(ConstraintError.create(new AST["TypeError"](error)))
              };
          };
      };
  };
  var returnWithTypeError = function (expr) {
      return function (typeError) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Control_Monad_Reader_Class.ask(Control_Monad_RWS_Trans.monadAskRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit)))(function (v) {
              if (v.stopOnError) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(typeError);
              };
              if (!v.stopOnError) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v1, constraintError(AST.index(expr))(v1)(typeError)));
                  });
              };
              throw new Error("Failed pattern match at TypeChecker line 492, column 3 - line 496, column 66: " + [ v.stopOnError.constructor.name ]);
          });
      };
  };
  var compareTVarMappings = function (m1) {
      return function (m2) {
          var toSet = function (m) {
              return Data_Set.fromFoldable(Data_List_Types.foldableList)(Data_Ord.ordString)(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.fst)(m));
          };
          return Data_Eq.eq(Data_Set.eqSet(Data_Eq.eqString))(toSet(m1))(toSet(m2));
      };
  };   
  var charType = new AST.TypCon("Char");
  var buildDefinitionGroups = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Map.empty;
      };
      if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
          return Data_Map.singleton(v.value0.value0)(new Data_List_Types.Cons(v.value0, Data_List_Types.Nil.value));
      };
      if (v instanceof Data_List_Types.Cons) {
          var defMap = buildDefinitionGroups(v.value1);
          var binList = Data_Map.lookup(Data_Ord.ordString)(v.value0.value0)(defMap);
          if (binList instanceof Data_Maybe.Just) {
              return Data_Map.insert(Data_Ord.ordString)(v.value0.value0)(new Data_List_Types.Cons(v.value0, binList.value0))(defMap);
          };
          if (binList instanceof Data_Maybe.Nothing) {
              return Data_Map.insert(Data_Ord.ordString)(v.value0.value0)(new Data_List_Types.Cons(v.value0, Data_List_Types.Nil.value))(defMap);
          };
          throw new Error("Failed pattern match at TypeChecker line 1429, column 54 - line 1431, column 45: " + [ binList.constructor.name ]);
      };
      throw new Error("Failed pattern match at TypeChecker line 1427, column 1 - line 1427, column 38: " + [ v.constructor.name ]);
  };
  var makeIndexedDefinitionGroups = function ($1233) {
      return Data_Functor.map(Data_Map.functorMap)(makeIndexedDefinitionGroup)(buildDefinitionGroups($1233));
  };
  var boolType = new AST.TypCon("Bool");
  var apply = function (dict) {
      return dict.apply;
  };
  var listSub = function (dictSubstitutable) {
      return new Substitutable(function (s) {
          return function (xs) {
              return Data_Functor.map(Data_List_Types.functorList)(apply(dictSubstitutable)(s))(xs);
          };
      }, Data_Foldable.foldr(Data_List_Types.foldableList)(function (a) {
          return function (b) {
              return Data_Set.union(Data_Ord.ordString)(ftv(dictSubstitutable)(a))(b);
          };
      })(Data_Set.empty));
  };
  var subQualTree = function (dictSubstitutable) {
      return function (dictSubstitutable1) {
          return function (dictSubstitutable2) {
              return new Substitutable(function (s) {
                  return function (v) {
                      if (v instanceof AST.Gen) {
                          return new AST.Gen(apply(dictSubstitutable2)(s)(v.value0), apply(dictSubstitutable)(s)(v.value1), apply(dictSubstitutable1)(s)(v.value2));
                      };
                      if (v instanceof AST.Let) {
                          return new AST.Let(apply(dictSubstitutable2)(s)(v.value0), apply(dictSubstitutable)(s)(v.value1), apply(dictSubstitutable1)(s)(v.value2));
                      };
                      if (v instanceof AST.Guard) {
                          return new AST.Guard(apply(dictSubstitutable2)(s)(v.value0), apply(dictSubstitutable1)(s)(v.value1));
                      };
                      throw new Error("Failed pattern match at TypeChecker line 151, column 3 - line 151, column 64: " + [ s.constructor.name, v.constructor.name ]);
                  };
              }, function (v) {
                  if (v instanceof AST.Gen) {
                      return ftv(dictSubstitutable1)(v.value2);
                  };
                  if (v instanceof AST.Let) {
                      return ftv(dictSubstitutable1)(v.value2);
                  };
                  if (v instanceof AST.Guard) {
                      return ftv(dictSubstitutable1)(v.value1);
                  };
                  throw new Error("Failed pattern match at TypeChecker line 155, column 3 - line 155, column 26: " + [ v.constructor.name ]);
              });
          };
      };
  };
  var subType = new Substitutable(function (v) {
      return function (v1) {
          if (v1 instanceof AST.UnknownType) {
              return AST.UnknownType.value;
          };
          if (v1 instanceof AST.TypCon) {
              return new AST.TypCon(v1.value0);
          };
          if (v1 instanceof AST.TypVar) {
              return Data_Maybe.fromMaybe(v1)(Data_Map.lookup(Data_Ord.ordString)(v1.value0)(v));
          };
          if (v1 instanceof AST.TypArr) {
              return new AST.TypArr(apply(subType)(v)(v1.value0), apply(subType)(v)(v1.value1));
          };
          if (v1 instanceof AST.TList) {
              return new AST.TList(apply(subType)(v)(v1.value0));
          };
          if (v1 instanceof AST.TTuple) {
              return new AST.TTuple(apply(listSub(subType))(v)(v1.value0));
          };
          if (v1 instanceof AST.TTypeCons) {
              return new AST.TTypeCons(v1.value0, apply(listSub(subType))(v)(v1.value1));
          };
          if (v1 instanceof AST["TypeError"]) {
              return new AST["TypeError"](v1.value0);
          };
          throw new Error("Failed pattern match at TypeChecker line 119, column 4 - line 119, column 37: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, function (v) {
      if (v instanceof AST.UnknownType) {
          return Data_Set.empty;
      };
      if (v instanceof AST.TypCon) {
          return Data_Set.empty;
      };
      if (v instanceof AST.TypVar) {
          return Data_Set.singleton(v.value0);
      };
      if (v instanceof AST.TypArr) {
          return Data_Set.union(Data_Ord.ordString)(ftv(subType)(v.value0))(ftv(subType)(v.value1));
      };
      if (v instanceof AST.TList) {
          return ftv(subType)(v.value0);
      };
      if (v instanceof AST.TTuple) {
          return ftv(listSub(subType))(v.value0);
      };
      if (v instanceof AST.TTypeCons) {
          return ftv(listSub(subType))(v.value1);
      };
      if (v instanceof AST["TypeError"]) {
          return Data_Set.empty;
      };
      throw new Error("Failed pattern match at TypeChecker line 128, column 4 - line 128, column 31: " + [ v.constructor.name ]);
  });
  var assignTypes = function (v) {
      return function (expr) {
          var lookupTVar = function (idx) {
              var $463 = Data_Map.lookup(Data_Ord.ordInt)(idx)(v.constraints.mapped);
              if ($463 instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if ($463 instanceof Data_Maybe.Just && $463.value0 instanceof Constraint) {
                  return Data_Maybe.Just.create(apply(subType)(v.subst)($463.value0.value0));
              };
              if ($463 instanceof Data_Maybe.Just && $463.value0 instanceof ConstraintError) {
                  return new Data_Maybe.Just($463.value0.value0);
              };
              throw new Error("Failed pattern match at TypeChecker line 1284, column 20 - line 1287, column 55: " + [ $463.constructor.name ]);
          };
          var fo = function (v1) {
              return new Data_Tuple.Tuple(v1.value0, AST.Meta((function () {
                  var $470 = {};
                  for (var $471 in v1.value1) {
                      if (v1.value1.hasOwnProperty($471)) {
                          $470[$471] = v1.value1[$471];
                      };
                  };
                  $470.mtype = lookupTVar(v1.value1.index);
                  return $470;
              })()));
          };
          var f = function (v1) {
              return AST.Meta((function () {
                  var $476 = {};
                  for (var $477 in v1) {
                      if (v1.hasOwnProperty($477)) {
                          $476[$477] = v1[$477];
                      };
                  };
                  $476.mtype = lookupTVar(v1.index);
                  return $476;
              })());
          };
          var fb = Data_Functor.map(AST.functorBinding)(f);
          return AST.treeMap(Control_Category.id(Control_Category.categoryFn))(fb)(fo)(f)(expr);
      };
  };
  var bindTVar = function (tv) {
      return function (t) {
          if (Data_Eq.eq(AST.eqType)(t)(new AST.TypVar(tv))) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(nullSubst);
          };
          if (occursCheck(subType)(tv)(t)) {
              return Data_Either.Left.create(normalizeTypeError(new AST.InfiniteType(tv, t)));
          };
          if (Data_Boolean.otherwise) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Map.singleton(tv)(t));
          };
          throw new Error("Failed pattern match at TypeChecker line 1185, column 1 - line 1188, column 42: " + [ tv.constructor.name, t.constructor.name ]);
      };
  };
  var commonFreeTVars = function (tvars) {
      return function (t) {
          return Data_Set.toUnfoldable(Data_List_Types.unfoldableList)(Data_Set.intersection(Data_Ord.ordString)(ftv(subType)(t))(ftv(listSub(subType))(Data_Functor.map(Data_List_Types.functorList)(AST.TypVar.create)(tvars))));
      };
  };
  var compose = function (s1) {
      return function (s2) {
          var f = function (v) {
              return function (v1) {
                  if (v instanceof AST.UnknownType) {
                      return AST.UnknownType.value;
                  };
                  if (v1 instanceof AST.UnknownType) {
                      return AST.UnknownType.value;
                  };
                  return v;
              };
          };
          return Data_Map.unionWith(Data_Ord.ordString)(f)(Data_Functor.map(Data_Map.functorMap)(apply(subType)(s1))(s2))(s1);
      };
  };
  var instantiate = function (v) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Function["const"](fresh))(v.value0))(function (v1) {
          var s = Data_Map.fromFoldable(Data_Ord.ordString)(Data_List_Types.foldableList)(Data_List.zip(v.value0)(v1));
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(apply(subType)(s)(v.value1));
      });
  };
  var lookupEnv = function (tvar) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Control_Monad_Reader_Class.ask(Control_Monad_RWS_Trans.monadAskRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit)))(function (v) {
          var $490 = Data_Map.lookup(Data_Ord.ordString)(tvar)(v.env.value0);
          if ($490 instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Maybe.Nothing.value);
          };
          if ($490 instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(instantiate($490.value0))(function ($1234) {
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Maybe.Just.create($1234));
              });
          };
          throw new Error("Failed pattern match at TypeChecker line 475, column 3 - line 477, column 58: " + [ $490.constructor.name ]);
      });
  };
  var getOpType = function (op) {
      var toBoolType = Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.TypArr(v, new AST.TypArr(v, boolType)));
      });
      if (op instanceof AST.Composition) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v2) {
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.TypArr(new AST.TypArr(v1, v2), new AST.TypArr(new AST.TypArr(v, v1), new AST.TypArr(v, v2))));
                  });
              });
          });
      };
      if (op instanceof AST.Power) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(intToIntToIntType);
      };
      if (op instanceof AST.Mul) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(intToIntToIntType);
      };
      if (op instanceof AST.Add) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(intToIntToIntType);
      };
      if (op instanceof AST.Sub) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(intToIntToIntType);
      };
      if (op instanceof AST.Colon) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.TypArr(v, new AST.TypArr(new AST.TList(v), new AST.TList(v))));
          });
      };
      if (op instanceof AST.Append) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.TypArr(new AST.TList(v), new AST.TypArr(new AST.TList(v), new AST.TList(v))));
          });
      };
      if (op instanceof AST.Equ) {
          return toBoolType;
      };
      if (op instanceof AST.Neq) {
          return toBoolType;
      };
      if (op instanceof AST.Lt) {
          return toBoolType;
      };
      if (op instanceof AST.Leq) {
          return toBoolType;
      };
      if (op instanceof AST.Gt) {
          return toBoolType;
      };
      if (op instanceof AST.Geq) {
          return toBoolType;
      };
      if (op instanceof AST.And) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.TypArr(boolType, new AST.TypArr(boolType, boolType)));
      };
      if (op instanceof AST.Or) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.TypArr(boolType, new AST.TypArr(boolType, boolType)));
      };
      if (op instanceof AST.Dollar) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.TypArr(new AST.TypArr(v, v1), new AST.TypArr(v, v1)));
              });
          });
      };
      if (op instanceof AST.InfixConstr) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(lookupEnv(op.value0))(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.UnknownDataConstructor(op.value0));
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(v.value0);
              };
              throw new Error("Failed pattern match at TypeChecker line 551, column 7 - line 553, column 26: " + [ v.constructor.name ]);
          });
      };
      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(AST.UnknownType.value);
  };
  var schemeToType = function (scheme) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(instantiate(scheme))(function (v) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(normalizeType(v));
      });
  };
  var checkPattern = function (binding) {
      return function (scheme) {
          return function (m1) {
              return function (m2) {
                  var $508 = compareTVarMappings(m1)(m2);
                  if ($508) {
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Unit.unit);
                  };
                  if (!$508) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(schemeToType(scheme))(function (v) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.PatternMismatch(binding, v));
                      });
                  };
                  throw new Error("Failed pattern match at TypeChecker line 955, column 37 - line 959, column 46: " + [ $508.constructor.name ]);
              };
          };
      };
  };
  var subMaybeType = new Substitutable(function (s) {
      return function (t) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(apply(subType)(s))(t);
      };
  }, function (v) {
      if (v instanceof Data_Maybe.Just) {
          return ftv(subType)(v.value0);
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Set.empty;
      };
      throw new Error("Failed pattern match at TypeChecker line 139, column 3 - line 139, column 23: " + [ v.constructor.name ]);
  });
  var subMeta = new Substitutable(function (s) {
      return function (v) {
          var $514 = {};
          for (var $515 in v) {
              if (v.hasOwnProperty($515)) {
                  $514[$515] = v[$515];
              };
          };
          $514.mtype = apply(subMaybeType)(s)(v.mtype);
          return $514;
      };
  }, function (v) {
      return ftv(subMaybeType)(v.mtype);
  });
  var subOpTuple = new Substitutable(function (s) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, apply(subMeta)(s)(v.value1));
      };
  }, function (v) {
      return ftv(subMeta)(v.value1);
  });
  var subScheme = new Substitutable(function (s) {
      return function (v) {
          var s$prime = Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Map["delete"](Data_Ord.ordString))(s)(v.value0);
          return Forall.create(v.value0)(apply(subType)(s$prime)(v.value1));
      };
  }, function (v) {
      return Data_Set.difference(Data_Ord.ordString)(ftv(subType)(v.value1))(Data_Set.fromFoldable(Data_List_Types.foldableList)(Data_Ord.ordString)(v.value0));
  });
  var subTypeEnv = new Substitutable(function (s) {
      return function (v) {
          return TypeEnv.create(Data_Functor.map(Data_Map.functorMap)(apply(subScheme)(s))(v.value0));
      };
  }, function (v) {
      return ftv(listSub(subScheme))(Data_Tuple.snd(Data_List.unzip(Data_Map.toList(v.value0))));
  });
  var generalize = function (env) {
      return function (t) {
          var as = Data_Set.toUnfoldable(Data_List_Types.unfoldableList)(Data_Set.difference(Data_Ord.ordString)(ftv(subType)(t))(ftv(subTypeEnv)(env)));
          return new Forall(as, t);
      };
  };
  var closeOverType = function (t) {
      return generalize(emptyTypeEnv)(t);
  };
  var subTypedBinding = function (dictSubstitutable) {
      return new Substitutable(function (s) {
          return function (v) {
              if (v instanceof AST.Lit) {
                  return new AST.Lit(apply(dictSubstitutable)(s)(v.value0), v.value1);
              };
              if (v instanceof AST.ConsLit) {
                  return new AST.ConsLit(apply(dictSubstitutable)(s)(v.value0), apply(subTypedBinding(dictSubstitutable))(s)(v.value1), apply(subTypedBinding(dictSubstitutable))(s)(v.value2));
              };
              if (v instanceof AST.ListLit) {
                  return new AST.ListLit(apply(dictSubstitutable)(s)(v.value0), apply(listSub(subTypedBinding(dictSubstitutable)))(s)(v.value1));
              };
              if (v instanceof AST.NTupleLit) {
                  return new AST.NTupleLit(apply(dictSubstitutable)(s)(v.value0), apply(listSub(subTypedBinding(dictSubstitutable)))(s)(v.value1));
              };
              if (v instanceof AST.ConstrLit) {
                  return new AST.ConstrLit(apply(dictSubstitutable)(s)(v.value0), Data_Functor.map(AST.functorDataConstr)(apply(subTypedBinding(dictSubstitutable))(s))(v.value1));
              };
              throw new Error("Failed pattern match at TypeChecker line 183, column 3 - line 183, column 46: " + [ s.constructor.name, v.constructor.name ]);
          };
      }, function ($1235) {
          return ftv(dictSubstitutable)(AST.extractFromBinding($1235));
      });
  };
  var subTypeTree = new Substitutable(function (s) {
      return function (v) {
          if (v instanceof AST.Atom) {
              return new AST.Atom(apply(subMeta)(s)(v.value0), v.value1);
          };
          if (v instanceof AST.List) {
              return new AST.List(apply(subMeta)(s)(v.value0), apply(listSub(subTypeTree))(s)(v.value1));
          };
          if (v instanceof AST.NTuple) {
              return new AST.NTuple(apply(subMeta)(s)(v.value0), apply(listSub(subTypeTree))(s)(v.value1));
          };
          if (v instanceof AST.Binary) {
              return new AST.Binary(apply(subMeta)(s)(v.value0), apply(subOpTuple)(s)(v.value1), apply(subTypeTree)(s)(v.value2), apply(subTypeTree)(s)(v.value3));
          };
          if (v instanceof AST.Unary) {
              return new AST.Unary(apply(subMeta)(s)(v.value0), apply(subOpTuple)(s)(v.value1), apply(subTypeTree)(s)(v.value2));
          };
          if (v instanceof AST.SectL) {
              return new AST.SectL(apply(subMeta)(s)(v.value0), apply(subTypeTree)(s)(v.value1), apply(subOpTuple)(s)(v.value2));
          };
          if (v instanceof AST.SectR) {
              return new AST.SectR(apply(subMeta)(s)(v.value0), apply(subOpTuple)(s)(v.value1), apply(subTypeTree)(s)(v.value2));
          };
          if (v instanceof AST.PrefixOp) {
              return new AST.PrefixOp(apply(subMeta)(s)(v.value0), apply(subOpTuple)(s)(v.value1));
          };
          if (v instanceof AST.IfExpr) {
              return new AST.IfExpr(apply(subMeta)(s)(v.value0), apply(subTypeTree)(s)(v.value1), apply(subTypeTree)(s)(v.value2), apply(subTypeTree)(s)(v.value3));
          };
          if (v instanceof AST.ArithmSeq) {
              return new AST.ArithmSeq(apply(subMeta)(s)(v.value0), apply(subTypeTree)(s)(v.value1), Data_Functor.map(Data_Maybe.functorMaybe)(apply(subTypeTree)(s))(v.value2), Data_Functor.map(Data_Maybe.functorMaybe)(apply(subTypeTree)(s))(v.value3));
          };
          if (v instanceof AST.LetExpr) {
              return new AST.LetExpr(apply(subMeta)(s)(v.value0), Data_Functor.map(Data_List_Types.functorList)(function (v1) {
                  return new Data_Tuple.Tuple(apply(subTypedBinding(subMeta))(s)(v1.value0), apply(subTypeTree)(s)(v1.value1));
              })(v.value1), apply(subTypeTree)(s)(v.value2));
          };
          if (v instanceof AST.Lambda) {
              return new AST.Lambda(apply(subMeta)(s)(v.value0), apply(listSub(subTypedBinding(subMeta)))(s)(v.value1), apply(subTypeTree)(s)(v.value2));
          };
          if (v instanceof AST.App) {
              return new AST.App(apply(subMeta)(s)(v.value0), apply(subTypeTree)(s)(v.value1), apply(listSub(subTypeTree))(s)(v.value2));
          };
          if (v instanceof AST.ListComp) {
              return new AST.ListComp(apply(subMeta)(s)(v.value0), apply(subTypeTree)(s)(v.value1), apply(listSub(subQualTree(subTypedBinding(subMeta))(subTypeTree)(subMeta)))(s)(v.value2));
          };
          throw new Error("Failed pattern match at TypeChecker line 161, column 3 - line 161, column 42: " + [ s.constructor.name, v.constructor.name ]);
      };
  }, function (typeTree) {
      return ftv(subMeta)(AST.extractFromTree(typeTree));
  });
  var substitutableConstraint = new Substitutable(function (s) {
      return function (v) {
          if (v instanceof Constraint) {
              return new Constraint(apply(subType)(s)(v.value0), apply(subType)(s)(v.value1));
          };
          if (v instanceof ConstraintError) {
              return new ConstraintError(apply(subType)(s)(v.value0));
          };
          throw new Error("Failed pattern match at TypeChecker line 381, column 3 - line 381, column 68: " + [ s.constructor.name, v.constructor.name ]);
      };
  }, function (v) {
      if (v instanceof Constraint) {
          return Data_Set.union(Data_Ord.ordString)(ftv(subType)(v.value0))(ftv(subType)(v.value1));
      };
      if (v instanceof ConstraintError) {
          return Data_Set.empty;
      };
      throw new Error("Failed pattern match at TypeChecker line 383, column 3 - line 383, column 53: " + [ v.constructor.name ]);
  });
  var unifies = function (v) {
      return function (v1) {
          if (v instanceof AST.TypArr && v1 instanceof AST.TypArr) {
              return Control_Bind.bind(Data_Either.bindEither)(unifies(v.value0)(v1.value0))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(unifies(apply(subType)(v2)(v.value1))(apply(subType)(v2)(v1.value1)))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(compose(v3)(v2));
                  });
              });
          };
          if (v instanceof AST.TypVar) {
              return bindTVar(v.value0)(v1);
          };
          if (v1 instanceof AST.TypVar) {
              return bindTVar(v1.value0)(v);
          };
          if (v instanceof AST.TypCon && (v1 instanceof AST.TypCon && v.value0 === v1.value0)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(nullSubst);
          };
          if (Data_Eq.eq(AST.eqType)(v)(v1)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(nullSubst);
          };
          if (v instanceof AST.TList && v1 instanceof AST.TList) {
              return unifies(v.value0)(v1.value0);
          };
          if (v instanceof AST.TTuple && (v.value0 instanceof Data_List_Types.Cons && (v1 instanceof AST.TTuple && v1.value0 instanceof Data_List_Types.Cons))) {
              return Control_Bind.bind(Data_Either.bindEither)(unifies(new AST.TTuple(v.value0.value1))(new AST.TTuple(v1.value0.value1)))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(unifies(v.value0.value0)(v1.value0.value0))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(compose(v2)(v3));
                  });
              });
          };
          if (v instanceof AST.TTuple && (v.value0 instanceof Data_List_Types.Nil && (v1 instanceof AST.TTuple && v1.value0 instanceof Data_List_Types.Nil))) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(nullSubst);
          };
          if (v instanceof AST.TTypeCons && (v.value1 instanceof Data_List_Types.Cons && (v1 instanceof AST.TTypeCons && v1.value1 instanceof Data_List_Types.Cons))) {
              if (v.value0 === v1.value0) {
                  return Control_Bind.bind(Data_Either.bindEither)(unifies(new AST.TTypeCons(v.value0, v.value1.value1))(new AST.TTypeCons(v1.value0, v1.value1.value1)))(function (v2) {
                      return Control_Bind.bind(Data_Either.bindEither)(unifies(v.value1.value0)(v1.value1.value0))(function (v3) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(compose(v2)(v3));
                      });
                  });
              };
              if (Data_Boolean.otherwise) {
                  return Data_Either.Left.create(normalizeTypeError(new AST.UnificationFail(v, v1)));
              };
          };
          if (v instanceof AST.TTypeCons && (v.value1 instanceof Data_List_Types.Nil && (v1 instanceof AST.TTypeCons && v1.value1 instanceof Data_List_Types.Nil))) {
              if (v.value0 === v1.value0) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(nullSubst);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Either.Left.create(normalizeTypeError(new AST.UnificationFail(v, v1)));
              };
          };
          if (v instanceof AST.UnknownType) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(nullSubst);
          };
          if (v1 instanceof AST.UnknownType) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(nullSubst);
          };
          return Data_Either.Left.create(normalizeTypeError(new AST.UnificationFail(v, v1)));
      };
  };
  var appendConstraints = function (cs1) {
      return function (cs2) {
          return {
              unmapped: Data_Semigroup.append(Data_List_Types.semigroupList)(cs1.unmapped)(cs2.unmapped), 
              mapped: Data_Semigroup.append(Data_Map.semigroupMap(Data_Ord.ordInt))(cs1.mapped)(cs2.mapped)
          };
      };
  };
  var foldConstraints = Data_Foldable.foldr(Data_List_Types.foldableList)(appendConstraints)(emptyConstraints);
  var makeBindingEnvPartial = function (binding) {
      if (isTypedBinding(binding)) {
          if (binding instanceof AST.Lit && (binding.value0.mtype instanceof Data_Maybe.Just && binding.value1 instanceof AST.Name)) {
              var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(binding.value0.mtype.value0);
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(binding.value0.mtype.value0, new Data_List_Types.Cons(new Data_Tuple.Tuple(binding.value1.value0, new Forall(Data_List_Types.Nil.value, binding.value0.mtype.value0)), Data_List_Types.Nil.value), c));
          };
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnv(binding))(function (v) {
              var t = (function ($1236) {
                  return Data_Maybe.fromMaybe(AST.UnknownType.value)(AST.getMetaMType($1236));
              })(AST.extractFromBinding(binding));
              var c2 = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(t);
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(t, v.value1, appendConstraints(c2)(v.value2)));
          });
      };
      if (Data_Boolean.otherwise) {
          return makeBindingEnv(binding);
      };
      throw new Error("Failed pattern match at TypeChecker line 788, column 1 - line 802, column 39: " + [ binding.constructor.name ]);
  };
  var makeBindingEnv = function (binding) {
      var setListConstraints = function (v) {
          if (v instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(emptyConstraints);
          };
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(new AST.TList(v.value0));
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(c);
          };
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(setListConstraints(new Data_List_Types.Cons(v.value1.value0, v.value1.value1)))(function (v1) {
                  var c = appendConstraints(setConstraintFor$prime(AST.bindingIndex(binding))(v.value0)(v.value1.value0))(v1);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(c);
              });
          };
          throw new Error("Failed pattern match at TypeChecker line 808, column 1 - line 904, column 34: " + [ v.constructor.name ]);
      };
      var listType = function (v) {
          if (v instanceof Data_List_Types.Nil) {
              return Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(AST.TList.create)(fresh);
          };
          if (v instanceof Data_List_Types.Cons) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.TList(v.value0));
          };
          throw new Error("Failed pattern match at TypeChecker line 808, column 1 - line 904, column 34: " + [ v.constructor.name ]);
      };
      if (binding instanceof AST.Lit && binding.value1 instanceof AST.Bool) {
          var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(boolType);
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(boolType, Data_List_Types.Nil.value, c));
      };
      if (binding instanceof AST.Lit && binding.value1 instanceof AST.Char) {
          var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(charType);
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(charType, Data_List_Types.Nil.value, c));
      };
      if (binding instanceof AST.Lit && binding.value1 instanceof AST.AInt) {
          var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(intType);
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(intType, Data_List_Types.Nil.value, c));
      };
      if (binding instanceof AST.Lit && binding.value1 instanceof AST.Name) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v) {
              var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(v);
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v, new Data_List_Types.Cons(new Data_Tuple.Tuple(binding.value1.value0, new Forall(Data_List_Types.Nil.value, v)), Data_List_Types.Nil.value), c));
          });
      };
      if (binding instanceof AST.Lit && binding.value1 instanceof AST.Constr) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(lookupEnv(binding.value1.value0))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))((function () {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.UnknownDataConstructor(binding.value1.value0));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(v.value0);
                  };
                  throw new Error("Failed pattern match at TypeChecker line 829, column 10 - line 831, column 27: " + [ v.constructor.name ]);
              })())(function (v1) {
                  var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(v1);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v1, Data_List_Types.Nil.value, c));
              });
          });
      };
      if (binding instanceof AST.ConsLit) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial(binding.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial(binding.value2))(function (v1) {
                  var c3 = setTypeConstraintFor$prime(AST.bindingIndex(binding))(new AST.TList(v.value0))(v1.value0);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(new AST.TList(v.value0), Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(v1.value1), appendConstraints(v.value2)(appendConstraints(v1.value2)(c3))));
              });
          });
      };
      if (binding instanceof AST.ListLit) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(unzip3)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial)(binding.value1)))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(setListConstraints(v.value0))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(listType(v.value0))(function (v2) {
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v2, Data_List.concat(v.value1), appendConstraints(foldConstraints(v.value2))(v1)));
                  });
              });
          });
      };
      if (binding instanceof AST.NTupleLit) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(unzip3)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial)(binding.value1)))(function (v) {
              var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(new AST.TTuple(v.value0));
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(new AST.TTuple(v.value0), Data_List.concat(v.value1), appendConstraints(foldConstraints(v.value2))(c)));
          });
      };
      if (binding instanceof AST.ConstrLit) {
          if (binding.value1 instanceof AST.PrefixDataConstr) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))((function () {
                  var $712 = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqChar))(Data_String.charAt(0)(binding.value1.value0))(new Data_Maybe.Just(":"));
                  if ($712) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(AST.UnknownDataConstructor.create("(" + (binding.value1.value0 + ") has been safed as a prefix constructor.")));
                  };
                  if (!$712) {
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at TypeChecker line 854, column 7 - line 856, column 24: " + [ $712.constructor.name ]);
              })())(function () {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(lookupEnv(binding.value1.value0))(function (v) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))((function () {
                          if (v instanceof Data_Maybe.Nothing) {
                              return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.UnknownDataConstructor(binding.value1.value0));
                          };
                          if (v instanceof Data_Maybe.Just) {
                              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(v.value0);
                          };
                          throw new Error("Failed pattern match at TypeChecker line 859, column 18 - line 861, column 25: " + [ v.constructor.name ]);
                      })())(function (v1) {
                          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(unzip3)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial)(binding.value1.value2)))(function (v2) {
                              var cArgs = foldConstraints(v2.value2);
                              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v3) {
                                  var cConstr = setConstraintFor$prime(AST.bindingIndex(binding))(v1)(toArrowType(Data_Semigroup.append(Data_List_Types.semigroupList)(v2.value0)(new Data_List_Types.Cons(v3, Data_List_Types.Nil.value))));
                                  var cBinding = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(v3);
                                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v3, Data_List.concat(v2.value1), appendConstraints(cArgs)(appendConstraints(cConstr)(cBinding))));
                              });
                          });
                      });
                  });
              });
          };
          if (binding.value1 instanceof AST.InfixDataConstr) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(lookupEnv(binding.value1.value0))(function (v) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))((function () {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.UnknownDataConstructor(binding.value1.value0));
                      };
                      if (v instanceof Data_Maybe.Just && (v.value0 instanceof AST.TypArr && v.value0.value1 instanceof AST.TypArr)) {
                          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v.value0.value0, v.value0.value1.value0, v.value0.value1.value1));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(AST.UnknownError.create(AST.prettyPrintType(v.value0) + (" can not be the type of " + binding.value1.value0)));
                      };
                      throw new Error("Failed pattern match at TypeChecker line 875, column 25 - line 878, column 111: " + [ v.constructor.name ]);
                  })())(function (v1) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial(binding.value1.value3))(function (v2) {
                          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial(binding.value1.value4))(function (v3) {
                              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v4) {
                                  var cConstr = setConstraintFor$prime(AST.bindingIndex(binding))(new AST.TypArr(v1.value0, new AST.TypArr(v1.value1, v1.value2)))(new AST.TypArr(v2.value0, new AST.TypArr(v3.value0, v4)));
                                  var cBinding = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(v4);
                                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v4, Data_Semigroup.append(Data_List_Types.semigroupList)(v2.value1)(v3.value1), appendConstraints(v2.value2)(appendConstraints(v3.value2)(appendConstraints(cConstr)(cBinding)))));
                              });
                          });
                      });
                  });
              });
          };
          throw new Error("Failed pattern match at TypeChecker line 852, column 24 - line 887, column 76: " + [ binding.value1.constructor.name ]);
      };
      throw new Error("Failed pattern match at TypeChecker line 808, column 26 - line 887, column 76: " + [ binding.constructor.name ]);
  };
  var makeBindingEnvLambda = function (bindings) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(unzip3)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial)(bindings)))(function (v) {
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v.value0, Data_List.concat(v.value1), foldConstraints(v.value2)));
      });
  };
  var solver = function (stopOnError) {
      return function (v) {
          var solver$prime = function (uni) {
              return function (v1) {
                  return function (v2) {
                      if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(solveSingleConstraint(stopOnError)(uni)(v1.value0)(v2.value0))(function (v3) {
                              return solver$prime(v3)(v1.value1)(apply(listSub(substitutableConstraint))(v3.subst)(v2.value1));
                          });
                      };
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(uni);
                  };
              };
          };
          var solveSingleConstraint = function (stopOnError2) {
              return function (uni) {
                  return function (idx) {
                      return function (constraint) {
                          var unifier = function (s) {
                              return {
                                  subst: compose(s)(uni.subst), 
                                  constraints: uni.constraints
                              };
                          };
                          if (constraint instanceof ConstraintError) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(uni);
                          };
                          if (constraint instanceof Constraint) {
                              var $769 = unifies(constraint.value0)(constraint.value1);
                              if ($769 instanceof Data_Either.Left && $769.value0 instanceof AST.InfiniteType) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))($769.value0);
                              };
                              if ($769 instanceof Data_Either.Left) {
                                  if (stopOnError2) {
                                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))($769.value0);
                                  };
                                  if (!stopOnError2) {
                                      var $774 = findTVarForNode(v.constraints)(idx);
                                      if ($774 instanceof Data_Maybe.Nothing) {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(uni);
                                      };
                                      if ($774 instanceof Data_Maybe.Just) {
                                          var $775 = Data_Map.lookup(Data_Ord.ordString)($774.value0)(uni.subst);
                                          if ($775 instanceof Data_Maybe.Just && $775.value0 instanceof AST.UnknownType) {
                                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(uni);
                                          };
                                          var errors = appendConstraints(constraintError(idx)(new AST.TypVar($774.value0))($769.value0))(uni.constraints);
                                          var mapped$prime = Data_Map.insert(Data_Ord.ordInt)(idx)(new Constraint(new AST.TypVar($774.value0), AST.UnknownType.value))(v.constraints.mapped);
                                          var constraints$prime = {
                                              unmapped: v.constraints.unmapped, 
                                              mapped: mapped$prime
                                          };
                                          var subst$prime = Data_Map.alter(Data_Ord.ordString)(Data_Function["const"](new Data_Maybe.Just(AST.UnknownType.value)))($774.value0)(v.subst);
                                          var lists$prime = toConstraintAndIndexLists(appendConstraints(constraints$prime)(errors));
                                          return solver$prime({
                                              subst: subst$prime, 
                                              constraints: errors
                                          })(Data_Tuple.fst(lists$prime))(apply(listSub(substitutableConstraint))(subst$prime)(Data_Tuple.snd(lists$prime)));
                                      };
                                      throw new Error("Failed pattern match at TypeChecker line 1254, column 14 - line 1271, column 102: " + [ $774.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at TypeChecker line 1252, column 21 - line 1271, column 102: " + [ stopOnError2.constructor.name ]);
                              };
                              if ($769 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(unifier(compose($769.value0)(uni.subst)));
                              };
                              throw new Error("Failed pattern match at TypeChecker line 1250, column 25 - line 1272, column 70: " + [ $769.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at TypeChecker line 1248, column 58 - line 1272, column 70: " + [ constraint.constructor.name ]);
                      };
                  };
              };
          };
          var lists = toConstraintAndIndexLists(v.constraints);
          var indices = Data_Tuple.fst(lists);
          var constraintList = Data_Tuple.snd(lists);
          var accumulatorUnifier = {
              subst: v.subst, 
              constraints: emptyConstraints
          };
          return solver$prime(accumulatorUnifier)(indices)(apply(listSub(substitutableConstraint))(v.subst)(constraintList));
      };
  };
  var runSolve = function (stopOnError) {
      return function (constraints) {
          var $784 = Control_Monad_Except.runExcept(solver(stopOnError)(initialUnifier(constraints)));
          if ($784 instanceof Data_Either.Left) {
              return new Data_Either.Left($784.value0);
          };
          if ($784 instanceof Data_Either.Right) {
              return new Data_Either.Right({
                  subst: $784.value0.subst, 
                  constraints: appendConstraints($784.value0.constraints)(constraints)
              });
          };
          throw new Error("Failed pattern match at TypeChecker line 1166, column 3 - line 1171, column 65: " + [ $784.constructor.name ]);
      };
  };
  var solveConstraints = function (cs) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Control_Monad_Reader_Class.ask(Control_Monad_RWS_Trans.monadAskRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit)))(function (v) {
          var $788 = runSolve(v.stopOnError)(cs);
          if ($788 instanceof Data_Either.Left) {
              return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))($788.value0);
          };
          if ($788 instanceof Data_Either.Right) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))($788.value0);
          };
          throw new Error("Failed pattern match at TypeChecker line 1179, column 3 - line 1181, column 34: " + [ $788.constructor.name ]);
      });
  };
  var mapSchemeOnTVarMappingsPartial = function (binding) {
      return function (scheme) {
          if (isTypedBinding(binding)) {
              var getBindingType = function ($1237) {
                  return Data_Maybe.fromMaybe(AST.UnknownType.value)(AST.getMetaMType(AST.extractFromBinding($1237)));
              };
              var t = getBindingType(binding);
              return mapSchemeOnTVarMappings(binding)(new Forall(Data_List_Types.Nil.value, t));
          };
          if (Data_Boolean.otherwise) {
              return mapSchemeOnTVarMappings(binding)(scheme);
          };
          throw new Error("Failed pattern match at TypeChecker line 968, column 1 - line 975, column 55: " + [ binding.constructor.name, scheme.constructor.name ]);
      };
  };
  var mapSchemeOnTVarMappings = function (binding) {
      return function (v) {
          var toScheme = function (t) {
              return new Forall(v.value0, t);
          };
          var schemeType = function (v1) {
              return v1.value1;
          };
          var returnAs = function (mapping) {
              return function (constraints) {
                  return function (t) {
                      var c = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(t);
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(mapping, appendConstraints(constraints)(c)));
                  };
              };
          };
          var reportMismatch = Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(schemeToType(v))(function (v1) {
              return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.PatternMismatch(binding, v1));
          });
          var filteredScheme = function (v1) {
              return new Forall(commonFreeTVars(v1.value0)(v1.value1), v1.value1);
          };
          var expectTupleType = function (v1) {
              if (v1.value1 instanceof AST.TTuple) {
                  return Data_Maybe.Just.create(new AST.TTuple(v1.value1.value0));
              };
              return Data_Maybe.Nothing.value;
          };
          var expectListType = function (v1) {
              if (v1.value1 instanceof AST.TList) {
                  return Data_Maybe.Just.create(new AST.TList(v1.value1.value0));
              };
              return Data_Maybe.Nothing.value;
          };
          var expectConstrType = function (v1) {
              if (v1.value1 instanceof AST.TTypeCons) {
                  return Data_Maybe.Just.create(new AST.TTypeCons(v1.value1.value0, v1.value1.value1));
              };
              return Data_Maybe.Nothing.value;
          };
          if (binding instanceof AST.Lit && binding.value1 instanceof AST.Name) {
              var m = new Data_List_Types.Cons(new Data_Tuple.Tuple(binding.value1.value0, filteredScheme(v)), Data_List_Types.Nil.value);
              return returnAs(m)(emptyConstraints)(schemeType(v));
          };
          if (binding instanceof AST.ConsLit) {
              var $820 = expectListType(v);
              if ($820 instanceof Data_Maybe.Just && $820.value0 instanceof AST.TList) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(mapSchemeOnTVarMappingsPartial(binding.value1)(toScheme($820.value0.value0)))(function (v1) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(mapSchemeOnTVarMappingsPartial(binding.value2)(toScheme($820.value0)))(function (v2) {
                          return returnAs(Data_Semigroup.append(Data_List_Types.semigroupList)(v1.value0)(v2.value0))(appendConstraints(v1.value1)(v2.value1))($820.value0);
                      });
                  });
              };
              return reportMismatch;
          };
          if (binding instanceof AST.NTupleLit) {
              var $832 = expectTupleType(v);
              if ($832 instanceof Data_Maybe.Just && $832.value0 instanceof AST.TTuple) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_List.unzip)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(function (v1) {
                      return mapSchemeOnTVarMappingsPartial(v1.value0)(toScheme(v1.value1));
                  })(Data_List.zip(binding.value1)($832.value0.value0))))(function (v1) {
                      return returnAs(Data_Foldable.fold(Data_List_Types.foldableList)(Data_List_Types.monoidList)(v1.value0))(foldConstraints(v1.value1))($832.value0);
                  });
              };
              return reportMismatch;
          };
          if (binding instanceof AST.ListLit) {
              var $843 = expectListType(v);
              if ($843 instanceof Data_Maybe.Just && $843.value0 instanceof AST.TList) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_List.unzip)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(function (binding2) {
                      return mapSchemeOnTVarMappingsPartial(binding2)(toScheme($843.value0.value0));
                  })(binding.value1)))(function (v1) {
                      return returnAs(Data_Foldable.fold(Data_List_Types.foldableList)(Data_List_Types.monoidList)(v1.value0))(foldConstraints(v1.value1))($843.value0);
                  });
              };
              return reportMismatch;
          };
          if (binding instanceof AST.ConstrLit) {
              if (binding.value1 instanceof AST.PrefixDataConstr) {
                  var $852 = expectConstrType(v);
                  if ($852 instanceof Data_Maybe.Just && $852.value0 instanceof AST.TTypeCons) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(lookupEnv(binding.value1.value0))(function (v1) {
                          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))((function () {
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(v1.value0);
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.UnknownDataConstructor(binding.value1.value0));
                              };
                              throw new Error("Failed pattern match at TypeChecker line 1013, column 23 - line 1015, column 71: " + [ v1.constructor.name ]);
                          })())(function (v2) {
                              var ts$prime = fromArrowType(v2);
                              var c = setTypeConstraintFor$prime(AST.bindingIndex(binding))(last$prime(ts$prime))($852.value0);
                              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(solveConstraints(c))(function (v3) {
                                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_List.unzip)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(function (v4) {
                                      return mapSchemeOnTVarMappingsPartial(v4.value0)(toScheme(v4.value1));
                                  })(Data_List.zip(binding.value1.value2)(apply(listSub(subType))(v3.subst)(ts$prime)))))(function (v4) {
                                      return returnAs(Data_Foldable.fold(Data_List_Types.foldableList)(Data_List_Types.monoidList)(v4.value0))(appendConstraints(c)(foldConstraints(v4.value1)))($852.value0);
                                  });
                              });
                          });
                      });
                  };
                  return reportMismatch;
              };
              if (binding.value1 instanceof AST.InfixDataConstr) {
                  var $870 = expectConstrType(v);
                  if ($870 instanceof Data_Maybe.Just && $870.value0 instanceof AST.TTypeCons) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(lookupEnv(binding.value1.value0))(function (v1) {
                          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))((function () {
                              if (v1 instanceof Data_Maybe.Just && (v1.value0 instanceof AST.TypArr && v1.value0.value1 instanceof AST.TypArr)) {
                                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v1.value0.value0, v1.value0.value1.value0, v1.value0.value1.value1));
                              };
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(AST.UnknownError.create(AST.prettyPrintType(v1.value0) + (" can not be the type of " + binding.value1.value0)));
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.UnknownDataConstructor(binding.value1.value0));
                              };
                              throw new Error("Failed pattern match at TypeChecker line 1029, column 39 - line 1032, column 71: " + [ v1.constructor.name ]);
                          })())(function (v2) {
                              var c = setTypeConstraintFor$prime(AST.bindingIndex(binding))(v2.value2)($870.value0);
                              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(solveConstraints(c))(function (v3) {
                                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(mapSchemeOnTVarMappingsPartial(binding.value1.value3)(toScheme(apply(subType)(v3.subst)(v2.value0))))(function (v4) {
                                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(mapSchemeOnTVarMappingsPartial(binding.value1.value4)(toScheme(apply(subType)(v3.subst)(v2.value1))))(function (v5) {
                                          return returnAs(Data_Semigroup.append(Data_List_Types.semigroupList)(v4.value0)(v5.value0))(appendConstraints(c)(appendConstraints(v4.value1)(v5.value1)))($870.value0);
                                      });
                                  });
                              });
                          });
                      });
                  };
                  return reportMismatch;
              };
              throw new Error("Failed pattern match at TypeChecker line 1009, column 25 - line 1038, column 26: " + [ binding.value1.constructor.name ]);
          };
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(Data_List_Types.Nil.value, emptyConstraints));
      };
  };
  var tryInferRequireEnumType = function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferRequireEnumType(v.value0))(function (v2) {
                  var c2 = setSingleTypeConstraintFor(v.value0)(v2.value0);
                  var c3 = setConstraintFor(v.value0)(v1)(v2.value0);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(appendConstraints(v2.value1)(appendConstraints(c2)(c3)));
              });
          };
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(emptyConstraints);
      };
  };
  var makeBindingEnvQual = function (qual) {
      if (qual instanceof AST.Let) {
          return associate(qual.value1)(qual.value2);
      };
      if (qual instanceof AST.Gen) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial(qual.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(qual.value2))(function (v1) {
                  var c3 = setConstraintFor(qual.value2)(new AST.TList(v.value0))(v1.value0);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v.value1, appendConstraints(v.value2)(appendConstraints(v1.value1)(c3))));
              });
          });
      };
      if (qual instanceof AST.Guard) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(qual.value1))(function (v) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(Data_List_Types.Nil.value, v.value1));
          });
      };
      throw new Error("Failed pattern match at TypeChecker line 1099, column 27 - line 1111, column 23: " + [ qual.constructor.name ]);
  };
  var makeBindingEnvListComp = function (quals) {
      var f = function (v) {
          return function (ms) {
              return function (cs) {
                  if (v instanceof Data_List_Types.Cons) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvQual(v.value0))(function (v1) {
                          return withEnv(v1.value0)(f(v.value1)(Data_Semigroup.append(Data_List_Types.semigroupList)(ms)(v1.value0))(appendConstraints(cs)(v1.value1)));
                      });
                  };
                  if (v instanceof Data_List_Types.Nil) {
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(ms, cs));
                  };
                  throw new Error("Failed pattern match at TypeChecker line 1088, column 1 - line 1095, column 41: " + [ v.constructor.name, ms.constructor.name, cs.constructor.name ]);
              };
          };
      };
      return f(quals)(Data_List_Types.Nil.value)(emptyConstraints);
  };
  var makeBindingEnvLet = function (defs) {
      var bindingsAndExprs = Data_List.unzip(defs);
      var exprs = Data_Tuple.snd(bindingsAndExprs);
      var bindings = Data_Tuple.fst(bindingsAndExprs);
      return associateAll(bindings)(exprs)(new Data_Tuple.Tuple(Data_List_Types.Nil.value, emptyConstraints));
  };
  var inferRequireEnumType = function (expr) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(expr))(function (v) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(solveConstraints(v.value1))(function (v1) {
              var $937 = Data_Map.lookup(Data_Ord.ordInt)(AST.index(expr))(v.value1.mapped);
              if ($937 instanceof Data_Maybe.Just && $937.value0 instanceof Constraint) {
                  var exprType = apply(subType)(v1.subst)($937.value0.value0);
                  var $938 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isEnumType)(exprType);
                  if ($938) {
                      return returnWithTypeError(expr)(new AST.NoInstanceOfEnum(exprType));
                  };
                  if (!$938) {
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(exprType, v.value1));
                  };
                  throw new Error("Failed pattern match at TypeChecker line 1137, column 7 - line 1139, column 37: " + [ $938.constructor.name ]);
              };
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v.value0, v.value1));
          });
      });
  };
  var inferOp = function (v) {
      if (v.value0 instanceof AST.InfixFunc) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(new AST.Atom(AST.Meta((function () {
              var $945 = {};
              for (var $946 in v.value1) {
                  if (v.value1.hasOwnProperty($946)) {
                      $945[$946] = v.value1[$946];
                  };
              };
              $945.index = v.value1.index;
              return $945;
          })()), new AST.Name(v.value0.value0))))(function (v1) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v1.value0, v1.value1));
          });
      };
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(getOpType(v.value0))(function (v1) {
          var c = setSingleTypeConstraintFor$prime(AST.opIndex(v))(v1);
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v1, c));
      });
  };
  var infer$prime = function (ex) {
      if (ex instanceof AST.Atom && ex.value1 instanceof AST.Bool) {
          return returnWithConstraint(ex)(boolType);
      };
      if (ex instanceof AST.Atom && ex.value1 instanceof AST.Char) {
          return returnWithConstraint(ex)(charType);
      };
      if (ex instanceof AST.Atom && ex.value1 instanceof AST.AInt) {
          return returnWithConstraint(ex)(intType);
      };
      if (ex instanceof AST.Atom && ex.value1 instanceof AST.Constr) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(lookupEnv(ex.value1.value0))(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return returnWithTypeError(ex)(new AST.UnknownDataConstructor(ex.value1.value0));
              };
              if (v instanceof Data_Maybe.Just) {
                  return returnWithConstraint(ex)(v.value0);
              };
              throw new Error("Failed pattern match at TypeChecker line 606, column 5 - line 608, column 46: " + [ v.constructor.name ]);
          });
      };
      if (ex instanceof AST.Atom && ex.value1 instanceof AST.Name) {
          if (ex.value1.value0 === "mod") {
              return returnWithConstraint(ex)(intToIntToIntType);
          };
          if (ex.value1.value0 === "div") {
              return returnWithConstraint(ex)(intToIntToIntType);
          };
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(lookupEnv(ex.value1.value0))(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return returnWithTypeError(ex)(new AST.UnboundVariable(ex.value1.value0));
              };
              if (v instanceof Data_Maybe.Just) {
                  return returnWithConstraint(ex)(v.value0);
              };
              throw new Error("Failed pattern match at TypeChecker line 616, column 7 - line 620, column 44: " + [ v.constructor.name ]);
          });
      };
      if (ex instanceof AST.Lambda) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvLambda(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(withEnv(v.value1)(infer(ex.value2)))(function (v1) {
                  var lambdaType = toArrowType(Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0)(new Data_List_Types.Cons(v1.value0, Data_List_Types.Nil.value)));
                  var c3 = setSingleTypeConstraintFor(ex)(lambdaType);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(lambdaType, appendConstraints(v.value2)(appendConstraints(v1.value1)(c3))));
              });
          });
      };
      if (ex instanceof AST.App) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_List.unzip)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer)(ex.value2)))(function (v1) {
                  var c2 = foldConstraints(v1.value1);
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v2) {
                      var c3 = setConstraintFor(ex)(v.value0)(toArrowType(Data_Semigroup.append(Data_List_Types.semigroupList)(v1.value0)(new Data_List_Types.Cons(v2, Data_List_Types.Nil.value))));
                      var c4 = setSingleTypeConstraintFor(ex)(v2);
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v2, appendConstraints(v.value1)(appendConstraints(c2)(appendConstraints(c3)(c4)))));
                  });
              });
          });
      };
      if (ex instanceof AST.LetExpr) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvLet(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(withEnv(v.value0)(infer(ex.value2)))(function (v1) {
                  var c3 = setSingleTypeConstraintFor(ex)(v1.value0);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v1.value0, appendConstraints(v.value1)(appendConstraints(v1.value1)(c3))));
              });
          });
      };
      if (ex instanceof AST.IfExpr) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value2))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value3))(function (v2) {
                      var c4 = setConstraintFor(ex.value1)(v.value0)(boolType);
                      var c5 = setTypeConstraintFor(ex)(v1.value0)(v2.value0);
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v1.value0, appendConstraints(v.value1)(appendConstraints(v1.value1)(appendConstraints(v2.value1)(appendConstraints(c4)(c5))))));
                  });
              });
          });
      };
      if (ex instanceof AST.Binary) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferOp(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value2))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value3))(function (v2) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v3) {
                          var c4 = setConstraintFor(ex)(v.value0)(new AST.TypArr(v1.value0, new AST.TypArr(v2.value0, v3)));
                          var c5 = setSingleTypeConstraintFor(ex)(v3);
                          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v3, appendConstraints(v.value1)(appendConstraints(v1.value1)(appendConstraints(v2.value1)(appendConstraints(c4)(c5))))));
                      });
                  });
              });
          });
      };
      if (ex instanceof AST.Unary) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferOp(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value2))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v2) {
                      var c3 = setConstraintFor(ex)(v.value0)(new AST.TypArr(v1.value0, v2));
                      var c4 = setSingleTypeConstraintFor(ex)(v2);
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v2, appendConstraints(v.value1)(appendConstraints(v1.value1)(appendConstraints(c3)(c4)))));
                  });
              });
          });
      };
      if (ex instanceof AST.SectL) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferOp(ex.value2))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value1))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v2) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v3) {
                          var c3 = setConstraintFor(ex)(v.value0)(new AST.TypArr(v1.value0, new AST.TypArr(v2, v3)));
                          var c4 = setSingleTypeConstraintFor(ex)(new AST.TypArr(v2, v3));
                          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(new AST.TypArr(v2, v3), appendConstraints(v.value1)(appendConstraints(v1.value1)(appendConstraints(c3)(c4)))));
                      });
                  });
              });
          });
      };
      if (ex instanceof AST.SectR) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferOp(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value2))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v2) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v3) {
                          var c3 = setSingleTypeConstraintFor(ex)(new AST.TypArr(v2, v3));
                          var c4 = setConstraintFor(ex)(v.value0)(new AST.TypArr(v2, new AST.TypArr(v1.value0, v3)));
                          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(new AST.TypArr(v2, v3), appendConstraints(v.value1)(appendConstraints(v1.value1)(appendConstraints(c3)(c4)))));
                      });
                  });
              });
          });
      };
      if (ex instanceof AST.PrefixOp) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferOp(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
                  var c2 = setSingleTypeConstraintFor(ex)(v.value0);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v.value0, appendConstraints(v.value1)(c2)));
              });
          });
      };
      if (ex instanceof AST.List && ex.value1 instanceof Data_List_Types.Nil) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
                  var listType = new AST.TList(v1);
                  var c = setTypeConstraintFor(ex)(v)(listType);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(listType, c));
              });
          });
      };
      if (ex instanceof AST.List && (ex.value1 instanceof Data_List_Types.Cons && ex.value1.value1 instanceof Data_List_Types.Nil)) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value1.value0))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
                  var listType = new AST.TList(v.value0);
                  var c2 = setTypeConstraintFor(ex)(v1)(listType);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(listType, appendConstraints(v.value1)(c2)));
              });
          });
      };
      if (ex instanceof AST.List && ex.value1 instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(ex.value1.value0))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_List.unzip)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer)(ex.value1.value1)))(function (v1) {
                  var c2 = foldConstraints(Data_Functor.map(Data_List_Types.functorList)(setConstraintFor(ex)(v.value0))(v1.value0));
                  var c3 = foldConstraints(v1.value1);
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v2) {
                      var listType = new AST.TList(v.value0);
                      var c4 = setTypeConstraintFor(ex)(v2)(listType);
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(listType, appendConstraints(v.value1)(appendConstraints(c2)(appendConstraints(c3)(c4)))));
                  });
              });
          });
      };
      if (ex instanceof AST.NTuple) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(Data_List.unzip)(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer)(ex.value1)))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
                  var tupleType = new AST.TTuple(v.value0);
                  var c = setTypeConstraintFor(ex)(v1)(tupleType);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(tupleType, appendConstraints(foldConstraints(v.value1))(c)));
              });
          });
      };
      if (ex instanceof AST.ArithmSeq) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferRequireEnumType(ex.value1))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(tryInferRequireEnumType(ex.value2)(v.value0))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(tryInferRequireEnumType(ex.value3)(v.value0))(function (v2) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v3) {
                          var c4 = setTypeConstraintFor(ex)(v3)(new AST.TList(v.value0));
                          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v3, appendConstraints(v.value1)(appendConstraints(v1)(appendConstraints(v2)(c4)))));
                      });
                  });
              });
          });
      };
      if (ex instanceof AST.ListComp) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvListComp(ex.value2))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(withEnv(v.value0)(infer(ex.value1)))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v2) {
                      var c4 = setTypeConstraintFor(ex)(v2)(new AST.TList(v1.value0));
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v2, appendConstraints(v.value1)(appendConstraints(v1.value1)(c4))));
                  });
              });
          });
      };
      throw new Error("Failed pattern match at TypeChecker line 600, column 13 - line 774, column 39: " + [ ex.constructor.name ]);
  };
  var infer = function (expr) {
      if (isTypedExpr(expr)) {
          var getType = function ($1238) {
              return Data_Maybe.fromMaybe(AST.UnknownType.value)(AST.getMetaMType(AST.extractFromTree($1238)));
          };
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer$prime(expr))(function (v) {
              var t = getType(expr);
              var idx = AST.index(expr);
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v2) {
                      var newConstraints = new Data_List_Types.Cons(new Data_Tuple.Tuple(idx, new Constraint(v1, t)), new Data_List_Types.Cons(new Data_Tuple.Tuple(idx, new Constraint(v2, v.value0)), new Data_List_Types.Cons(new Data_Tuple.Tuple(idx, new Constraint(v1, v2)), Data_List_Types.Nil.value)));
                      return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(t, {
                          mapped: v.value1.mapped, 
                          unmapped: Data_Semigroup.append(Data_List_Types.semigroupList)(newConstraints)(v.value1.unmapped)
                      }));
                  });
              });
          });
      };
      if (Data_Boolean.otherwise) {
          return infer$prime(expr);
      };
      throw new Error("Failed pattern match at TypeChecker line 579, column 1 - line 595, column 28: " + [ expr.constructor.name ]);
  };
  var associateAll = function (v) {
      return function (v1) {
          return function (v2) {
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(associate(v.value0)(v1.value0))(function (v3) {
                      return withEnv(v3.value0)(associateAll(v.value1)(v1.value1)(new Data_Tuple.Tuple(Data_Semigroup.append(Data_List_Types.semigroupList)(v2.value0)(v3.value0), appendConstraints(v2.value1)(v3.value1))));
                  });
              };
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(v2);
          };
      };
  };
  var associate = function (binding) {
      return function (expr) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(makeBindingEnvPartial(binding))(function (v) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(expr))(function (v1) {
                  return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(Control_Monad_Reader_Class.ask(Control_Monad_RWS_Trans.monadAskRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit)))(function (v2) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(solveConstraints(v1.value1))(function (v3) {
                          var scheme = generalize(apply(subTypeEnv)(v3.subst)(v2.env))(apply(subType)(v3.subst)(v1.value0));
                          var c2 = setSingleTypeConstraintFor$prime(AST.bindingIndex(binding))(v1.value0);
                          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(mapSchemeOnTVarMappingsPartial(binding)(scheme))(function (v4) {
                              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(checkPattern(binding)(scheme)(v.value1)(v4.value0))(function () {
                                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v4.value0, appendConstraints(v3.constraints)(appendConstraints(v1.value1)(appendConstraints(c2)(v4.value1)))));
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var inferDefinition = function (v) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(fresh)(function (v1) {
          var m = new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0, new Forall(Data_List_Types.Nil.value, v1)), Data_List_Types.Nil.value);
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(withEnv(m)(infer(new AST.Lambda(AST.Meta((function () {
              var $1156 = {};
              for (var $1157 in AST["emptyMeta'"]) {
                  if ((AST["emptyMeta'"]).hasOwnProperty($1157)) {
                      $1156[$1157] = AST["emptyMeta'"][$1157];
                  };
              };
              $1156.index = -1;
              return $1156;
          })()), v.value1, v.value2))))(function (v2) {
              var c2 = setConstraintFor(v.value2)(v1)(v2.value0);
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Triple(v1, m, appendConstraints(v2.value1)(c2)));
          });
      });
  };
  var inferDefinitionGroup = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Control_Monad_Error_Class.throwError(Control_Monad_RWS_Trans.monadErrorRWST(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new AST.UnknownError("Can't infer type of empty definition group"));
      };
      if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferDefinition(v.value0))(function (v1) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v1.value0, v1.value2));
          });
      };
      if (v instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferDefinition(v.value0))(function (v1) {
              return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(withEnv(v1.value1)(inferDefinitionGroup(v.value1)))(function (v2) {
                  var c3 = setConstraintFor$prime(AST.definitionIndex(v.value0))(v1.value0)(v2.value0);
                  return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(new Data_Tuple.Tuple(v1.value0, appendConstraints(v1.value2)(appendConstraints(v2.value1)(c3))));
              });
          });
      };
      throw new Error("Failed pattern match at TypeChecker line 1360, column 1 - line 1361, column 1: " + [ v.constructor.name ]);
  };
  var schemeOfIndexedDefinitionGroup = function (group) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(inferDefinitionGroup(group))(function (v) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(solveConstraints(v.value1))(function (v1) {
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(closeOverType(apply(subType)(v1.subst)(v.value0)));
          });
      });
  };
  var tryInferEnvironment = function (defs) {
      var indexedGroups = makeIndexedDefinitionGroups(defs);
      var getMappingFromGroup = function (v) {
          return function (v1) {
              var $1187 = Data_Map.lookup(Data_Ord.ordString)(v1.value0)(v.value0);
              if ($1187 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0, $1187.value0));
              };
              if ($1187 instanceof Data_Maybe.Nothing) {
                  var $1189 = runInferWith(v)(true)(schemeOfIndexedDefinitionGroup(v1.value1));
                  if ($1189 instanceof Data_Either.Left) {
                      return new Data_Either.Left($1189.value0);
                  };
                  if ($1189 instanceof Data_Either.Right) {
                      return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0, $1189.value0));
                  };
                  throw new Error("Failed pattern match at TypeChecker line 1334, column 16 - line 1336, column 48: " + [ $1189.constructor.name ]);
              };
              throw new Error("Failed pattern match at TypeChecker line 1330, column 63 - line 1336, column 48: " + [ $1187.constructor.name ]);
          };
      };
      var accumulateMappings = function (__copy_env) {
          return function (__copy_v) {
              var env = __copy_env;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return new Data_Either.Right(env);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var $1197 = getMappingFromGroup(env)(v.value0);
                      if ($1197 instanceof Data_Either.Left && $1197.value0 instanceof AST.UnboundVariable) {
                          var $1198 = Data_Map.lookup(Data_Ord.ordString)($1197.value0.value0)(indexedGroups);
                          if ($1198 instanceof Data_Maybe.Just) {
                              var __tco_env = env;
                              var __tco_v = new Data_List_Types.Cons(new Data_Tuple.Tuple($1197.value0.value0, $1198.value0), new Data_List_Types.Cons(v.value0, v.value1));
                              env = __tco_env;
                              v = __tco_v;
                              continue tco;
                          };
                          if ($1198 instanceof Data_Maybe.Nothing) {
                              return Data_Either.Left.create(new AST.UnboundVariable($1197.value0.value0));
                          };
                          throw new Error("Failed pattern match at TypeChecker line 1324, column 36 - line 1326, column 45: " + [ $1198.constructor.name ]);
                      };
                      if ($1197 instanceof Data_Either.Left) {
                          return new Data_Either.Left($1197.value0);
                      };
                      if ($1197 instanceof Data_Either.Right) {
                          var __tco_env = extend(env)(new Data_Tuple.Tuple($1197.value0.value0, $1197.value0.value1));
                          var __tco_v = v.value1;
                          env = __tco_env;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at TypeChecker line 1318, column 43 - line 1328, column 94: " + [ $1197.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at TypeChecker line 1313, column 1 - line 1336, column 48: " + [ env.constructor.name, v.constructor.name ]);
              };
          };
      };
      return accumulateMappings(emptyTypeEnv)(Data_Map.toList(indexedGroups));
  };
  var inferExpr = function (expr) {
      var indexedTree = AST.makeIndexedTree(expr);
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(infer(indexedTree))(function (v) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(solveConstraints(v.value1))(function (v1) {
              var expr$prime = assignTypes(v1)(indexedTree);
              return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(normalizeTypeTree(apply(subTypeTree)(v1.subst)(expr$prime)));
          });
      });
  };
  exports["Constraint"] = Constraint;
  exports["ConstraintError"] = ConstraintError;
  exports["Forall"] = Forall;
  exports["Triple"] = Triple;
  exports["TypeEnv"] = TypeEnv;
  exports["Unique"] = Unique;
  exports["Substitutable"] = Substitutable;
  exports["appendConstraints"] = appendConstraints;
  exports["apply"] = apply;
  exports["assignTypes"] = assignTypes;
  exports["associate"] = associate;
  exports["associateAll"] = associateAll;
  exports["bindTVar"] = bindTVar;
  exports["boolType"] = boolType;
  exports["buildDefinitionGroups"] = buildDefinitionGroups;
  exports["charType"] = charType;
  exports["checkPattern"] = checkPattern;
  exports["closeOverType"] = closeOverType;
  exports["commonFreeTVars"] = commonFreeTVars;
  exports["compareTVarMappings"] = compareTVarMappings;
  exports["compose"] = compose;
  exports["constraintError"] = constraintError;
  exports["constraintSingleMapped"] = constraintSingleMapped;
  exports["constraintSingleUnmapped"] = constraintSingleUnmapped;
  exports["emptyConstraints"] = emptyConstraints;
  exports["emptyNormalizationState"] = emptyNormalizationState;
  exports["emptyTypeEnv"] = emptyTypeEnv;
  exports["extend"] = extend;
  exports["extendMultiple"] = extendMultiple;
  exports["findTVarForNode"] = findTVarForNode;
  exports["foldConstraints"] = foldConstraints;
  exports["fresh"] = fresh;
  exports["freshTVar"] = freshTVar;
  exports["fromArrowType"] = fromArrowType;
  exports["ftv"] = ftv;
  exports["generalize"] = generalize;
  exports["getNthName"] = getNthName;
  exports["getOpType"] = getOpType;
  exports["indexList"] = indexList;
  exports["infer"] = infer;
  exports["inferDefinition"] = inferDefinition;
  exports["inferDefinitionGroup"] = inferDefinitionGroup;
  exports["inferExpr"] = inferExpr;
  exports["inferOp"] = inferOp;
  exports["inferRequireEnumType"] = inferRequireEnumType;
  exports["initUnique"] = initUnique;
  exports["initialUnifier"] = initialUnifier;
  exports["instantiate"] = instantiate;
  exports["intToIntToIntType"] = intToIntToIntType;
  exports["intToIntType"] = intToIntType;
  exports["intType"] = intType;
  exports["isEnumType"] = isEnumType;
  exports["isTypedBinding"] = isTypedBinding;
  exports["isTypedExpr"] = isTypedExpr;
  exports["lookupEnv"] = lookupEnv;
  exports["makeBindingEnv"] = makeBindingEnv;
  exports["makeBindingEnvLambda"] = makeBindingEnvLambda;
  exports["makeBindingEnvLet"] = makeBindingEnvLet;
  exports["makeBindingEnvListComp"] = makeBindingEnvListComp;
  exports["makeBindingEnvPartial"] = makeBindingEnvPartial;
  exports["makeBindingEnvQual"] = makeBindingEnvQual;
  exports["makeIndexedDefinitionGroup"] = makeIndexedDefinitionGroup;
  exports["makeIndexedDefinitionGroups"] = makeIndexedDefinitionGroups;
  exports["mapSchemeOnTVarMappings"] = mapSchemeOnTVarMappings;
  exports["mapSchemeOnTVarMappingsPartial"] = mapSchemeOnTVarMappingsPartial;
  exports["normalizeType"] = normalizeType;
  exports["normalizeTypeError"] = normalizeTypeError;
  exports["normalizeTypeTree"] = normalizeTypeTree;
  exports["nullSubst"] = nullSubst;
  exports["occursCheck"] = occursCheck;
  exports["removeMultiple"] = removeMultiple;
  exports["returnWithConstraint"] = returnWithConstraint;
  exports["returnWithTypeError"] = returnWithTypeError;
  exports["runInferWith"] = runInferWith;
  exports["runSolve"] = runSolve;
  exports["schemeOfIndexedDefinitionGroup"] = schemeOfIndexedDefinitionGroup;
  exports["schemeToType"] = schemeToType;
  exports["setConstraintFor"] = setConstraintFor;
  exports["setSingleTypeConstraintFor"] = setSingleTypeConstraintFor;
  exports["setTypeConstraintFor"] = setTypeConstraintFor;
  exports["solveConstraints"] = solveConstraints;
  exports["solver"] = solver;
  exports["toArrowType"] = toArrowType;
  exports["toConstraintAndIndexLists"] = toConstraintAndIndexLists;
  exports["tryInferEnvironment"] = tryInferEnvironment;
  exports["tryInferRequireEnumType"] = tryInferRequireEnumType;
  exports["unifies"] = unifies;
  exports["unzip3"] = unzip3;
  exports["withEnv"] = withEnv;
  exports["subScheme"] = subScheme;
  exports["subType"] = subType;
  exports["subMaybeType"] = subMaybeType;
  exports["listSub"] = listSub;
  exports["subTypeEnv"] = subTypeEnv;
  exports["subQualTree"] = subQualTree;
  exports["subTypeTree"] = subTypeTree;
  exports["subOpTuple"] = subOpTuple;
  exports["subTypedBinding"] = subTypedBinding;
  exports["subMeta"] = subMeta;
  exports["substitutableConstraint"] = substitutableConstraint;
})(PS["TypeChecker"] = PS["TypeChecker"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var AST = PS["AST"];
  var Parser = PS["Parser"];
  var Evaluator = PS["Evaluator"];
  var Web = PS["Web"];
  var TypeChecker = PS["TypeChecker"];
  var JSHelpers = PS["JSHelpers"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Array = PS["Data.Array"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var Control_Alternative = PS["Control.Alternative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Unit = PS["Data.Unit"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Data_Eq = PS["Data.Eq"];        
  var stringToEnv = function (str) {
      var $27 = Parser.parseDefs(str);
      if ($27 instanceof Data_Either.Left) {
          return Data_StrMap.empty;
      };
      if ($27 instanceof Data_Either.Right) {
          return Evaluator.defsToEnv($27.value0.value0);
      };
      throw new Error("Failed pattern match at Main line 275, column 19 - line 277, column 46: " + [ $27.constructor.name ]);
  };
  var prelude = "data Maybe a = Nothing | Just a\n" + ("data List a = Nil | Cons a (List a)\n" + ("data IList a = INil | a :: (IList a)\n" + ("and (True:xs)  = and xs\n" + ("and (False:xs) = False\n" + ("and []         = True\n" + ("\n" + ("or (False:xs) = or xs\n" + ("or (True:xs)  = True\n" + ("or []         = False\n" + ("\n" + ("all p = and . map p\n" + ("any p = or . map p\n" + ("\n" + ("head (x:xs) = x\n" + ("tail (x:xs) = xs\n" + ("\n" + ("take 0 xs     = []\n" + ("take n (x:xs) = x : take (n - 1) xs\n" + ("\n" + ("drop 0 xs     = xs\n" + ("drop n (x:xs) = drop (n - 1) xs\n" + ("\n" + ("elem e []     = False\n" + ("elem e (x:xs) = if e == x then True else elem e xs\n" + ("\n" + ("max a b = if a >= b then a else b\n" + ("min a b = if b >= a then a else b\n" + ("\n" + ("maximum (x:xs) = foldr max x xs\n" + ("minimum (x:xs) = foldr min x xs\n" + ("\n" + ("length []     = 0\n" + ("length (x:xs) = 1 + length xs\n" + ("\n" + ("zip (x:xs) (y:ys) = (x, y) : zip xs ys\n" + ("zip []      _     = []\n" + ("zip _       []    = []\n" + ("\n" + ("zipWith f (x:xs) (y:ys) = f x y : zipWith f xs ys\n" + ("zipWith _ []     _      = []\n" + ("zipWith _ _      []     = []\n" + ("\n" + ("unzip []          = ([], [])\n" + ("unzip ((a, b):xs) = (\\(as, bs) -> (a:as, b:bs)) $ unzip xs\n" + ("\n" + ("fst (x,_) = x\n" + ("snd (_,x) = x\n" + ("\n" + ("curry f a b = f (a, b)\n" + ("uncurry f (a, b) = f a b\n" + ("\n" + ("repeat x = x : repeat x\n" + ("\n" + ("replicate 0 _ = []\n" + ("replicate n x = x : replicate (n - 1) x\n" + ("\n" + ("enumFromTo a b = if a <= b then a : enumFromTo (a + 1) b else []\n" + ("\n" + ("sum (x:xs) = x + sum xs\n" + ("sum [] = 0\n" + ("\n" + ("product (x:xs) = x * product xs\n" + ("product [] = 1\n" + ("\n" + ("reverse []     = []\n" + ("reverse (x:xs) = reverse xs ++ [x]\n" + ("\n" + ("concat = foldr (++) []\n" + ("\n" + ("map f []     = []\n" + ("map f (x:xs) = f x : map f xs\n" + ("\n" + ("not True  = False\n" + ("not False = True\n" + ("\n" + ("filter p (x:xs) = if p x then x : filter p xs else filter p xs\n" + ("filter p []     = []\n" + ("\n" + ("foldr f ini []     = ini\n" + ("foldr f ini (x:xs) = f x (foldr f ini xs)\n" + ("\n" + ("foldl f acc []     = acc\n" + ("foldl f acc (x:xs) = foldl f (f acc x) xs\n" + ("\n" + ("scanl f b []     = [b]\n" + ("scanl f b (x:xs) = b : scanl f (f b x) xs\n" + ("\n" + ("iterate f x = x : iterate f (f x)\n" + ("\n" + ("id x = x\n" + ("\n" + ("const x _ = x\n" + ("\n" + ("flip f x y = f y x\n" + ("\n" + ("even n = (n `mod` 2) == 0\n" + ("odd n = (n `mod` 2) == 1\n" + ("\n" + "fix f = f (fix f)\n"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var preludeEnv = stringToEnv(prelude);
  var maybeToList = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_List_Types.Cons(v.value0, Data_List_Types.Nil.value);
      };
      throw new Error("Failed pattern match at Main line 135, column 1 - line 135, column 27: " + [ v.constructor.name ]);
  };
  var main = Control_Monad_Eff_Console.log("hello");
  var exprToJQuery = function (callback) {
      return function ($152) {
          return Web.divToJQuery(true)(callback)(Data_Tuple.uncurry(Web.exprToDiv)($152));
      };
  };
  var eval1 = function (nextIdx) {
      return function (env) {
          return function (expr) {
              var $34 = Evaluator.runEvalM(nextIdx)(Evaluator.eval1(env)(expr));
              if ($34 instanceof Data_Either.Left) {
                  return Data_Either.Left.create(Data_Show.show(Evaluator.showEvalError)($34.value0));
              };
              if ($34 instanceof Data_Either.Right) {
                  return new Data_Either.Right($34.value0);
              };
              throw new Error("Failed pattern match at Main line 99, column 26 - line 101, column 47: " + [ $34.constructor.name ]);
          };
      };
  };
  var eval1$prime = function (nextIdx) {
      return function (env) {
          return function (expr) {
              var $37 = eval1(nextIdx)(env)(expr);
              if ($37 instanceof Data_Either.Left) {
                  return new Data_Tuple.Tuple(expr, nextIdx);
              };
              if ($37 instanceof Data_Either.Right) {
                  return $37.value0;
              };
              throw new Error("Failed pattern match at Main line 104, column 27 - line 106, column 41: " + [ $37.constructor.name ]);
          };
      };
  };
  var lmom = function (env) {
      return function (expr) {
          var lmom$prime = function (env1) {
              return function (v) {
                  if (v instanceof AST.Gen) {
                      return lmom(env1)(v.value2);
                  };
                  if (v instanceof AST.Let) {
                      return lmom(env1)(v.value2);
                  };
                  if (v instanceof AST.Guard) {
                      return lmom(env1)(v.value1);
                  };
                  throw new Error("Failed pattern match at Main line 130, column 3 - line 130, column 37: " + [ env1.constructor.name, v.constructor.name ]);
              };
          };
          var $50 = eval1(0)(env)(expr);
          if ($50 instanceof Data_Either.Right) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(AST.index(expr));
          };
          if ($50 instanceof Data_Either.Left) {
              if (expr instanceof AST.Atom) {
                  return Data_Maybe.Nothing.value;
              };
              if (expr instanceof AST.List) {
                  return Data_Foldable.foldr(Data_List_Types.foldableList)(Control_Alt.alt(Data_Maybe.altMaybe))(Data_Maybe.Nothing.value)(Data_Functor.map(Data_List_Types.functorList)(lmom(env))(expr.value1));
              };
              if (expr instanceof AST.NTuple) {
                  return Data_Foldable.foldr(Data_List_Types.foldableList)(Control_Alt.alt(Data_Maybe.altMaybe))(Data_Maybe.Nothing.value)(Data_Functor.map(Data_List_Types.functorList)(lmom(env))(expr.value1));
              };
              if (expr instanceof AST.Binary) {
                  return Control_Alt.alt(Data_Maybe.altMaybe)(lmom(env)(expr.value2))(lmom(env)(expr.value3));
              };
              if (expr instanceof AST.Unary) {
                  return lmom(env)(expr.value2);
              };
              if (expr instanceof AST.SectL) {
                  return lmom(env)(expr.value1);
              };
              if (expr instanceof AST.SectR) {
                  return lmom(env)(expr.value2);
              };
              if (expr instanceof AST.PrefixOp) {
                  return Data_Maybe.Nothing.value;
              };
              if (expr instanceof AST.IfExpr) {
                  return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(lmom(env)(expr.value1))(lmom(env)(expr.value2)))(lmom(env)(expr.value3));
              };
              if (expr instanceof AST.ArithmSeq) {
                  return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(lmom(env)(expr.value1))(Control_Bind.bind(Data_Maybe.bindMaybe)(expr.value2)(lmom(env))))(Control_Bind.bind(Data_Maybe.bindMaybe)(expr.value3)(lmom(env)));
              };
              if (expr instanceof AST.LetExpr) {
                  return Control_Alt.alt(Data_Maybe.altMaybe)(Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
                      return function (i) {
                          return Control_Alt.alt(Data_Maybe.altMaybe)(lmom(env)(v.value1))(i);
                      };
                  })(Data_Maybe.Nothing.value)(expr.value1))(lmom(env)(expr.value2));
              };
              if (expr instanceof AST.Lambda) {
                  return lmom(env)(expr.value2);
              };
              if (expr instanceof AST.App) {
                  return Control_Alt.alt(Data_Maybe.altMaybe)(lmom(env)(expr.value1))(Data_Foldable.foldr(Data_List_Types.foldableList)(Control_Alt.alt(Data_Maybe.altMaybe))(Data_Maybe.Nothing.value)(Data_Functor.map(Data_List_Types.functorList)(lmom(env))(expr.value2)));
              };
              if (expr instanceof AST.ListComp) {
                  return Control_Alt.alt(Data_Maybe.altMaybe)(lmom(env)(expr.value1))(Data_Foldable.foldr(Data_List_Types.foldableList)(Control_Alt.alt(Data_Maybe.altMaybe))(Data_Maybe.Nothing.value)(Data_Functor.map(Data_List_Types.functorList)(lmom$prime(env))(expr.value2)));
              };
              throw new Error("Failed pattern match at Main line 113, column 14 - line 127, column 79: " + [ expr.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main line 111, column 17 - line 127, column 79: " + [ $50.constructor.name ]);
      };
  };
  var doWithJust = function (mMaybe) {
      return function (f) {
          return function __do() {
              var v = mMaybe();
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Unit.unit;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0)();
              };
              throw new Error("Failed pattern match at Main line 206, column 3 - line 208, column 19: " + [ v.constructor.name ]);
          };
      };
  };
  var clearInfo = Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#info"))(Control_Monad_Eff_JQuery.clear));
  var showError = function (origin) {
      return function (msg) {
          return function __do() {
              var v = (function __do() {
                  var v = Control_Monad_Eff_JQuery.create("<p></p>")();
                  Control_Monad_Eff_JQuery.addClass("info")(v)();
                  Control_Monad_Eff_JQuery.setText("Error in " + (origin + (" => " + msg)))(v)();
                  return v;
              })();
              clearInfo();
              var v1 = Control_Monad_Eff_JQuery.select("#info")();
              return Control_Monad_Eff_JQuery.append(v)(v1)();
          };
      };
  };
  var parseExpr = function (input) {
      var $104 = Parser.parseExpr(input);
      if ($104 instanceof Data_Either.Left) {
          return function __do() {
              showError("Parser")(Data_Show.show(Text_Parsing_Parser.showParseError)($104.value0))();
              return Data_Maybe.Nothing.value;
          };
      };
      if ($104 instanceof Data_Either.Right) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Data_Maybe.Just(new Data_Tuple.Tuple($104.value0.value0, $104.value0.value1)));
      };
      throw new Error("Failed pattern match at Main line 92, column 19 - line 96, column 65: " + [ $104.constructor.name ]);
  };
  var typeCheckExpression = function (dictPartial) {
      return function (typedEnv) {
          return function (expr) {
              var $109 = TypeChecker.runInferWith(typedEnv)(false)(TypeChecker.inferExpr(expr));
              if ($109 instanceof Data_Either.Left) {
                  return function __do() {
                      showError("Expression")(AST.prettyPrintTypeError($109.value0))();
                      return Data_Maybe.Nothing.value;
                  };
              };
              if ($109 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Data_Maybe.Just($109.value0));
              };
              throw new Error("Failed pattern match at Main line 223, column 3 - line 228, column 28: " + [ $109.constructor.name ]);
          };
      };
  };
  var buildTypeEnvironment = function (dictPartial) {
      return function (env) {
          var defs = Evaluator.envToDefs(env);
          var $112 = TypeChecker.tryInferEnvironment(defs);
          if ($112 instanceof Data_Either.Left) {
              return Data_Maybe.Nothing.value;
          };
          if ($112 instanceof Data_Either.Right) {
              return new Data_Maybe.Just($112.value0);
          };
          throw new Error("Failed pattern match at Main line 214, column 6 - line 216, column 36: " + [ $112.constructor.name ]);
      };
  };
  var preludeTyped = function (dictPartial) {
      var $115 = buildTypeEnvironment(dictPartial)(preludeEnv);
      if ($115 instanceof Data_Maybe.Just) {
          return $115.value0;
      };
      if ($115 instanceof Data_Maybe.Nothing) {
          return TypeChecker.emptyTypeEnv;
      };
      throw new Error("Failed pattern match at Main line 280, column 16 - line 282, column 38: " + [ $115.constructor.name ]);
  };
  var showExprIn = function (expr) {
      return function (nextIdx) {
          return function (env) {
              return function (history) {
                  return function (container) {
                      return function (histContainer) {
                          var tree = Data_Tuple.snd(expr);
                          var highlight = Data_Tuple.fst(expr);
                          return buildDivTreeFromExpression(new Data_Tuple.Tuple(highlight, tree))(nextIdx)(env)(history)(container)(histContainer);
                      };
                  };
              };
          };
      };
  };
  var makeCallback = function (nextIdx) {
      return function (env) {
          return function (history) {
              return function (container) {
                  return function (histContainer) {
                      return function (currHighlight) {
                          return function (expr) {
                              return function (hole) {
                                  return function (event) {
                                      return function (jq) {
                                          return function __do() {
                                              Control_Monad_Eff_JQuery.stopImmediatePropagation(event)();
                                              var evalFunc = (function () {
                                                  var $117 = JSHelpers.ctrlKeyPressed(event);
                                                  if ($117) {
                                                      return Evaluator["eval"](nextIdx);
                                                  };
                                                  if (!$117) {
                                                      return eval1$prime(nextIdx);
                                                  };
                                                  throw new Error("Failed pattern match at Main line 147, column 19 - line 147, column 85: " + [ $117.constructor.name ]);
                                              })();
                                              var evaluated = evalFunc(env)(expr);
                                              var nextIdx$prime = Data_Tuple.snd(evaluated);
                                              var evalExpr = Data_Tuple.fst(evaluated);
                                              (function () {
                                                  var $118 = JSHelpers.getType(event);
                                                  if ($118 === "click") {
                                                      var $119 = Data_Eq.notEq(AST.eqTree(AST.eqAtom)(AST.eqBinding(AST.eqMeta))(Data_Tuple.eqTuple(AST.eqOp)(AST.eqMeta))(AST.eqMeta))(evalExpr)(expr);
                                                      if ($119) {
                                                          return showExprIn(new Data_Tuple.Tuple(new Data_List_Types.Cons(new Data_Tuple.Tuple("evaluated", AST.index(evalExpr)), maybeToList(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create("nexteval"))(lmom(env)(hole(evalExpr))))), hole(evalExpr)))(nextIdx$prime)(env)(Data_Array.cons(new Data_Tuple.Tuple(new Data_List_Types.Cons(new Data_Tuple.Tuple("clicked", AST.index(expr)), currHighlight), hole(expr)))(history))(container)(histContainer);
                                                      };
                                                      if (!$119) {
                                                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                                      };
                                                      throw new Error("Failed pattern match at Main line 152, column 20 - line 167, column 34: " + [ $119.constructor.name ]);
                                                  };
                                                  if ($118 === "mouseover") {
                                                      return function __do() {
                                                          Control_Monad_Eff_Console.log(Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))(expr))();
                                                          Control_Monad_Eff_Console.log(Data_Show.show(Data_List_Types.showList(Data_Tuple.showTuple(Data_Show.showString)(Data_Show.showInt)))(currHighlight))();
                                                          var $120 = eval1(nextIdx)(env)(expr);
                                                          if ($120 instanceof Data_Either.Right) {
                                                              Control_Monad_Eff_Console.log(Data_Show.show(AST.showTree(AST.showAtom)(AST.showBinding(AST.showMeta))(Data_Tuple.showTuple(AST.showOp)(AST.showMeta))(AST.showMeta))($120.value0.value0))();
                                                              return Control_Monad_Eff_JQuery.addClass("highlight")(jq)();
                                                          };
                                                          if ($120 instanceof Data_Either.Left) {
                                                              return Control_Monad_Eff_Console.log($120.value0)();
                                                          };
                                                          throw new Error("Failed pattern match at Main line 171, column 22 - line 175, column 45: " + [ $120.constructor.name ]);
                                                      };
                                                  };
                                                  if ($118 === "mouseout") {
                                                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_JQuery.removeClass("highlight")(jq));
                                                  };
                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                              })()();
                                              return Data_Unit.unit;
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var buildDivTreeFromExpression = function (typedExpr) {
      return function (nextIdx) {
          return function (env) {
              return function (history) {
                  return function (container) {
                      return function (histContainer) {
                          return function __do() {
                              var v = exprToJQuery(makeCallback(nextIdx)(env)(history)(container)(histContainer)(Data_Tuple.fst(typedExpr)))(typedExpr)();
                              Control_Monad_Eff_JQuery.clear(container)();
                              Control_Monad_Eff_JQuery.append(v)(container)();
                              (function () {
                                  if (histContainer instanceof Data_Maybe.Nothing) {
                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                  };
                                  if (histContainer instanceof Data_Maybe.Just) {
                                      return function __do() {
                                          Control_Monad_Eff_JQuery.clear(histContainer.value0)();
                                          Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(history)(function (typedExpr1) {
                                              return function __do() {
                                                  var v1 = exprToJQuery(function (v1) {
                                                      return function (v2) {
                                                          return function (v3) {
                                                              return function (v4) {
                                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                                              };
                                                          };
                                                      };
                                                  })(typedExpr1)();
                                                  var v2 = Control_Monad_Eff_JQuery.create("<div></div>")();
                                                  Control_Monad_Eff_JQuery.addClass("history-element")(v2)();
                                                  Control_Monad_Eff_JQuery.append(v1)(v2)();
                                                  return Control_Monad_Eff_JQuery.append(v2)(histContainer.value0)();
                                              };
                                          })();
                                          return Data_Unit.unit;
                                      };
                                  };
                                  throw new Error("Failed pattern match at Main line 244, column 5 - line 254, column 18: " + [ histContainer.constructor.name ]);
                              })()();
                              return Data_Unit.unit;
                          };
                      };
                  };
              };
          };
      };
  };
  var makeCE = function (input) {
      return function (selector) {
          return function __do() {
              clearInfo();
              var v = Control_Monad_Eff_JQuery.select(selector)();
              return doWithJust(parseExpr(input))(function (v1) {
                  return showExprIn(new Data_Tuple.Tuple(maybeToList(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create("nexteval"))(lmom(preludeEnv)(v1.value0))), v1.value0))(v1.value1)(preludeEnv)([  ])(v)(Data_Maybe.Nothing.value);
              })();
          };
      };
  };
  var makeCEwithDefs = function (input) {
      return function (defs) {
          return function (selector) {
              return function __do() {
                  clearInfo();
                  var v = Control_Monad_Eff_JQuery.select(selector)();
                  return doWithJust(parseExpr(input))(function (v1) {
                      var env = stringToEnv(defs);
                      return showExprIn(new Data_Tuple.Tuple(maybeToList(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create("nexteval"))(lmom(env)(v1.value0))), v1.value0))(v1.value1)(env)([  ])(v)(Data_Maybe.Nothing.value);
                  })();
              };
          };
      };
  };
  var makeCEwithDefsAndHistory = function (input) {
      return function (defs) {
          return function (selector) {
              return function (histSelector) {
                  return function __do() {
                      clearInfo();
                      var v = Control_Monad_Eff_JQuery.select(selector)();
                      var v1 = Control_Monad_Eff_JQuery.select(histSelector)();
                      return doWithJust(parseExpr(input))(function (v2) {
                          var env = stringToEnv(defs);
                          return showExprIn(new Data_Tuple.Tuple(maybeToList(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create("nexteval"))(lmom(env)(v2.value0))), v2.value0))(v2.value1)(env)([  ])(v)(new Data_Maybe.Just(v1));
                      })();
                  };
              };
          };
      };
  };
  var makeCEwithHistory = function (input) {
      return function (selector) {
          return function (histSelector) {
              return function __do() {
                  clearInfo();
                  var v = Control_Monad_Eff_JQuery.select(selector)();
                  var v1 = Control_Monad_Eff_JQuery.select(histSelector)();
                  return doWithJust(parseExpr(input))(function (v2) {
                      return showExprIn(new Data_Tuple.Tuple(maybeToList(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create("nexteval"))(lmom(preludeEnv)(v2.value0))), v2.value0))(v2.value1)(preludeEnv)([  ])(v)(new Data_Maybe.Just(v1));
                  })();
              };
          };
      };
  };
  exports["buildDivTreeFromExpression"] = buildDivTreeFromExpression;
  exports["buildTypeEnvironment"] = buildTypeEnvironment;
  exports["clearInfo"] = clearInfo;
  exports["doWithJust"] = doWithJust;
  exports["eval1"] = eval1;
  exports["eval1'"] = eval1$prime;
  exports["exprToJQuery"] = exprToJQuery;
  exports["lmom"] = lmom;
  exports["main"] = main;
  exports["makeCE"] = makeCE;
  exports["makeCEwithDefs"] = makeCEwithDefs;
  exports["makeCEwithDefsAndHistory"] = makeCEwithDefsAndHistory;
  exports["makeCEwithHistory"] = makeCEwithHistory;
  exports["makeCallback"] = makeCallback;
  exports["maybeToList"] = maybeToList;
  exports["parseExpr"] = parseExpr;
  exports["prelude"] = prelude;
  exports["preludeEnv"] = preludeEnv;
  exports["preludeTyped"] = preludeTyped;
  exports["showError"] = showError;
  exports["showExprIn"] = showExprIn;
  exports["stringToEnv"] = stringToEnv;
  exports["typeCheckExpression"] = typeCheckExpression;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
