// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;            

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\a": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  }; 
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);  
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });                 
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var $times = function (dictSemiring) {
      return mul(dictSemiring);
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (dictEq) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v) {
                  return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(f(v));
              });
          };
      };
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  }; 
  var add = function (dict) {
      return dict.add;
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["compare"] = compare;
  exports["/="] = $div$eq;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["*"] = $times;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["liftM1"] = liftM1;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semiringInt"] = semiringInt;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["ordInt"] = ordInt;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showString"] = showString;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };                                         
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (dictAlt) {
      return alt(dictAlt);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];     
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;;
 
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];     
  var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
  };
  exports["Alternative"] = Alternative;;
 
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["defer"] = defer;;
 
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$times = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
          };
      };
  };
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;
  exports["<*"] = $less$times;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictBooleanAlgebra);
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;;
 
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["*"](dictSemiring))(Prelude.one(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($164) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($165) {
                      return Data_Monoid_Disj.Disj(p($165));
                  })($164));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($166) {
              return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($166));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($167) {
                  return !elem(dictFoldable)(dictEq)(x)($167);
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["notElem"] = notElem;
  exports["elem"] = elem;
  exports["product"] = product;
  exports["any"] = any;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.ST

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        /* jshint boss: true */
        return ref.value = a;
      };
    };
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["writeSTRef"] = $foreign.writeSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["newSTRef"] = $foreign.newSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  exports["pushSTArray"] = pushSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["runSTArray"] = $foreign.runSTArray;;
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];     
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function (f) {
      return function (b) {
          return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Control_Monad_ST.newSTRef(b)();
              (function () {
                  while (!(function __do() {
                      var v2 = Control_Monad_ST.readSTRef(v1)();
                      var $12 = f(v2);
                      if ($12 instanceof Data_Maybe.Nothing) {
                          return true;
                      };
                      if ($12 instanceof Data_Maybe.Just) {
                          Data_Array_ST.pushSTArray(v)($12.value0.value0)();
                          Control_Monad_ST.writeSTRef(v1)($12.value0.value1)();
                          return false;
                      };
                      throw new Error("Failed pattern match at Data.Unfoldable line 29, column 1 - line 49, column 1: " + [ $12.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return v;
          }));
      };
  });
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;;
 
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var updateAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Cons) {
                  return new Data_Maybe.Just(new Cons(v1, v2.value1));
              };
              if (v2 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v2.value0))(updateAt(v - 1)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 270, column 1 - line 271, column 1: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 252, column 1: " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var showList = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          if (v instanceof Cons) {
              return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(showList(dictShow))(v.value1) + ")")));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      });
  };
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (v instanceof Nil) {
                                  return acc;
                              };
                              if (v1 instanceof Nil) {
                                  return acc;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_acc = new Cons(f(v.value0)(v1.value0), acc);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 654, column 1 - line 655, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var replicate = function (n) {
      return function (value) {
          var go = function (__copy_n1) {
              return function (__copy_rest) {
                  var n1 = __copy_n1;
                  var rest = __copy_rest;
                  tco: while (true) {
                      if (n1 <= 0) {
                          return rest;
                      };
                      if (Prelude.otherwise) {
                          var __tco_n1 = n1 - 1;
                          var __tco_rest = new Cons(value, rest);
                          n1 = __tco_n1;
                          rest = __tco_rest;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 148, column 1 - line 149, column 1: " + [ n1.constructor.name, rest.constructor.name ]);
                  };
              };
          };
          return go(n)(Nil.value);
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $209 = start > end;
                  if ($209) {
                      return 1;
                  };
                  if (!$209) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ $209.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())(Nil.value));
          };
      };
  };
  var index = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v instanceof Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Cons && v1 === 0) {
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Cons) {
                  var __tco_v = v.value1;
                  var __tco_v1 = v1 - 1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var $bang$bang = index;
  var head = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 236, column 1 - line 237, column 1: " + [ v.constructor.name ]);
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($365) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($365));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Nil) {
              return Prelude.pure(dictApplicative)(Nil.value);
          };
          if (v instanceof Cons) {
              return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return Prelude.pure(dictApplicative)(Nil.value);
              };
              if (v1 instanceof Cons) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v(v1.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(v)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Cons) {
                      if (fn(v1.value0)) {
                          return new Data_Maybe.Just(v);
                      };
                      if (Prelude.otherwise) {
                          var __tco_v = v + 1 | 0;
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                  };
                  if (v1 instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 301, column 1 - line 302, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(0);
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Prelude.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 391, column 1 - line 392, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var intersectBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v2 instanceof Nil) {
                  return Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(v(x))(v2);
              })(v1);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude["=="](dictEq));
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Cons) {
              return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(deleteAt(v - 1)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var concatMap = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return Prelude["<>"](semigroupList)(v(v1.value0))(concatMap(v)(v1.value1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };                                                       
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(v1))(Prelude["<*>"](applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var concat = function (v) {
      return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["zipWithA"] = zipWithA;
  exports["zipWith"] = zipWith;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["drop"] = drop;
  exports["filter"] = filter;
  exports["concatMap"] = concatMap;
  exports["concat"] = concat;
  exports["reverse"] = reverse;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["findIndex"] = findIndex;
  exports["elemIndex"] = elemIndex;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["head"] = head;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["many"] = many;
  exports["some"] = some;
  exports["replicate"] = replicate;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["bindList"] = bindList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];     
  var Composition = (function () {
      function Composition() {

      };
      Composition.value = new Composition();
      return Composition;
  })();
  var Power = (function () {
      function Power() {

      };
      Power.value = new Power();
      return Power;
  })();
  var Mul = (function () {
      function Mul() {

      };
      Mul.value = new Mul();
      return Mul;
  })();
  var Div = (function () {
      function Div() {

      };
      Div.value = new Div();
      return Div;
  })();
  var Mod = (function () {
      function Mod() {

      };
      Mod.value = new Mod();
      return Mod;
  })();
  var Add = (function () {
      function Add() {

      };
      Add.value = new Add();
      return Add;
  })();
  var Sub = (function () {
      function Sub() {

      };
      Sub.value = new Sub();
      return Sub;
  })();
  var Colon = (function () {
      function Colon() {

      };
      Colon.value = new Colon();
      return Colon;
  })();
  var Append = (function () {
      function Append() {

      };
      Append.value = new Append();
      return Append;
  })();
  var Equ = (function () {
      function Equ() {

      };
      Equ.value = new Equ();
      return Equ;
  })();
  var Neq = (function () {
      function Neq() {

      };
      Neq.value = new Neq();
      return Neq;
  })();
  var Lt = (function () {
      function Lt() {

      };
      Lt.value = new Lt();
      return Lt;
  })();
  var Leq = (function () {
      function Leq() {

      };
      Leq.value = new Leq();
      return Leq;
  })();
  var Gt = (function () {
      function Gt() {

      };
      Gt.value = new Gt();
      return Gt;
  })();
  var Geq = (function () {
      function Geq() {

      };
      Geq.value = new Geq();
      return Geq;
  })();
  var And = (function () {
      function And() {

      };
      And.value = new And();
      return And;
  })();
  var Or = (function () {
      function Or() {

      };
      Or.value = new Or();
      return Or;
  })();
  var Dollar = (function () {
      function Dollar() {

      };
      Dollar.value = new Dollar();
      return Dollar;
  })();
  var AInt = (function () {
      function AInt(value0) {
          this.value0 = value0;
      };
      AInt.create = function (value0) {
          return new AInt(value0);
      };
      return AInt;
  })();
  var Bool = (function () {
      function Bool(value0) {
          this.value0 = value0;
      };
      Bool.create = function (value0) {
          return new Bool(value0);
      };
      return Bool;
  })();
  var Char = (function () {
      function Char(value0) {
          this.value0 = value0;
      };
      Char.create = function (value0) {
          return new Char(value0);
      };
      return Char;
  })();
  var Name = (function () {
      function Name(value0) {
          this.value0 = value0;
      };
      Name.create = function (value0) {
          return new Name(value0);
      };
      return Name;
  })();
  var Lit = (function () {
      function Lit(value0) {
          this.value0 = value0;
      };
      Lit.create = function (value0) {
          return new Lit(value0);
      };
      return Lit;
  })();
  var ConsLit = (function () {
      function ConsLit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ConsLit.create = function (value0) {
          return function (value1) {
              return new ConsLit(value0, value1);
          };
      };
      return ConsLit;
  })();
  var ListLit = (function () {
      function ListLit(value0) {
          this.value0 = value0;
      };
      ListLit.create = function (value0) {
          return new ListLit(value0);
      };
      return ListLit;
  })();
  var NTupleLit = (function () {
      function NTupleLit(value0) {
          this.value0 = value0;
      };
      NTupleLit.create = function (value0) {
          return new NTupleLit(value0);
      };
      return NTupleLit;
  })();
  var Atom = (function () {
      function Atom(value0) {
          this.value0 = value0;
      };
      Atom.create = function (value0) {
          return new Atom(value0);
      };
      return Atom;
  })();
  var List = (function () {
      function List(value0) {
          this.value0 = value0;
      };
      List.create = function (value0) {
          return new List(value0);
      };
      return List;
  })();
  var NTuple = (function () {
      function NTuple(value0) {
          this.value0 = value0;
      };
      NTuple.create = function (value0) {
          return new NTuple(value0);
      };
      return NTuple;
  })();
  var Binary = (function () {
      function Binary(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Binary.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Binary(value0, value1, value2);
              };
          };
      };
      return Binary;
  })();
  var Unary = (function () {
      function Unary(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unary.create = function (value0) {
          return function (value1) {
              return new Unary(value0, value1);
          };
      };
      return Unary;
  })();
  var SectL = (function () {
      function SectL(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SectL.create = function (value0) {
          return function (value1) {
              return new SectL(value0, value1);
          };
      };
      return SectL;
  })();
  var SectR = (function () {
      function SectR(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SectR.create = function (value0) {
          return function (value1) {
              return new SectR(value0, value1);
          };
      };
      return SectR;
  })();
  var PrefixOp = (function () {
      function PrefixOp(value0) {
          this.value0 = value0;
      };
      PrefixOp.create = function (value0) {
          return new PrefixOp(value0);
      };
      return PrefixOp;
  })();
  var IfExpr = (function () {
      function IfExpr(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      IfExpr.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new IfExpr(value0, value1, value2);
              };
          };
      };
      return IfExpr;
  })();
  var LetExpr = (function () {
      function LetExpr(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LetExpr.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LetExpr(value0, value1, value2);
              };
          };
      };
      return LetExpr;
  })();
  var Lambda = (function () {
      function Lambda(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lambda.create = function (value0) {
          return function (value1) {
              return new Lambda(value0, value1);
          };
      };
      return Lambda;
  })();
  var App = (function () {
      function App(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      App.create = function (value0) {
          return function (value1) {
              return new App(value0, value1);
          };
      };
      return App;
  })();
  var Def = (function () {
      function Def(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Def.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Def(value0, value1, value2);
              };
          };
      };
      return Def;
  })();
  var showOp = new Prelude.Show(function (op) {
      if (op instanceof Composition) {
          return "Composition";
      };
      if (op instanceof Power) {
          return "Power";
      };
      if (op instanceof Mul) {
          return "Mul";
      };
      if (op instanceof Div) {
          return "Div";
      };
      if (op instanceof Mod) {
          return "Mod";
      };
      if (op instanceof Add) {
          return "Add";
      };
      if (op instanceof Sub) {
          return "Sub";
      };
      if (op instanceof Colon) {
          return "Colon";
      };
      if (op instanceof Append) {
          return "Append";
      };
      if (op instanceof Equ) {
          return "Equ";
      };
      if (op instanceof Neq) {
          return "Neq";
      };
      if (op instanceof Lt) {
          return "Lt";
      };
      if (op instanceof Leq) {
          return "Leq";
      };
      if (op instanceof Gt) {
          return "Gt";
      };
      if (op instanceof Geq) {
          return "Geq";
      };
      if (op instanceof And) {
          return "And";
      };
      if (op instanceof Or) {
          return "Or";
      };
      if (op instanceof Dollar) {
          return "Dollar";
      };
      throw new Error("Failed pattern match at AST line 110, column 1 - line 131, column 1: " + [ op.constructor.name ]);
  });
  var showAtom = new Prelude.Show(function (atom) {
      if (atom instanceof AInt) {
          return "AInt " + Prelude.show(Prelude.showInt)(atom.value0);
      };
      if (atom instanceof Bool) {
          return "Bool " + Prelude.show(Prelude.showBoolean)(atom.value0);
      };
      if (atom instanceof Char) {
          return "Char " + Prelude.show(Prelude.showString)(atom.value0);
      };
      if (atom instanceof Name) {
          return "Name " + Prelude.show(Prelude.showString)(atom.value0);
      };
      throw new Error("Failed pattern match at AST line 152, column 1 - line 159, column 1: " + [ atom.constructor.name ]);
  });
  var showBinding = new Prelude.Show(function (binding) {
      if (binding instanceof Lit) {
          return "Lit (" + (Prelude.show(showAtom)(binding.value0) + ")");
      };
      if (binding instanceof ConsLit) {
          return "ConsLit (" + (Prelude.show(showBinding)(binding.value0) + (") (" + (Prelude.show(showBinding)(binding.value1) + ")")));
      };
      if (binding instanceof ListLit) {
          return "ListLit (" + (Prelude.show(Data_List.showList(showBinding))(binding.value0) + ")");
      };
      if (binding instanceof NTupleLit) {
          return "NTupleLit (" + (Prelude.show(Data_List.showList(showBinding))(binding.value0) + ")");
      };
      throw new Error("Failed pattern match: " + [ binding.constructor.name ]);
  });
  var showExpr = new Prelude.Show(function (expr) {
      if (expr instanceof Atom) {
          return "Atom (" + (Prelude.show(showAtom)(expr.value0) + ")");
      };
      if (expr instanceof List) {
          return "List (" + (Prelude.show(Data_List.showList(showExpr))(expr.value0) + ")");
      };
      if (expr instanceof NTuple) {
          return "NTuple (" + (Prelude.show(Data_List.showList(showExpr))(expr.value0) + ")");
      };
      if (expr instanceof Binary) {
          return "Binary " + (Prelude.show(showOp)(expr.value0) + (" (" + (Prelude.show(showExpr)(expr.value1) + (") (" + (Prelude.show(showExpr)(expr.value2) + ")")))));
      };
      if (expr instanceof Unary) {
          return "Unary " + (Prelude.show(showOp)(expr.value0) + (" (" + (Prelude.show(showExpr)(expr.value1) + ")")));
      };
      if (expr instanceof SectL) {
          return "SectL (" + (Prelude.show(showExpr)(expr.value0) + (") " + Prelude.show(showOp)(expr.value1)));
      };
      if (expr instanceof SectR) {
          return "SectR " + (Prelude.show(showOp)(expr.value0) + (" (" + (Prelude.show(showExpr)(expr.value1) + ")")));
      };
      if (expr instanceof PrefixOp) {
          return "PrefixOp " + Prelude.show(showOp)(expr.value0);
      };
      if (expr instanceof IfExpr) {
          return "IfExpr (" + (Prelude.show(showExpr)(expr.value0) + (") (" + (Prelude.show(showExpr)(expr.value1) + (") (" + (Prelude.show(showExpr)(expr.value2) + ")")))));
      };
      if (expr instanceof LetExpr) {
          return "LetExpr (" + (Prelude.show(showBinding)(expr.value0) + (") (" + (Prelude.show(showExpr)(expr.value1) + (") (" + (Prelude.show(showExpr)(expr.value2) + ")")))));
      };
      if (expr instanceof Lambda) {
          return "Lambda (" + (Prelude.show(Data_List.showList(showBinding))(expr.value0) + (") (" + (Prelude.show(showExpr)(expr.value1) + ")")));
      };
      if (expr instanceof App) {
          return "App (" + (Prelude.show(showExpr)(expr.value0) + (") (" + (Prelude.show(Data_List.showList(showExpr))(expr.value1) + ")")));
      };
      throw new Error("Failed pattern match: " + [ expr.constructor.name ]);
  });
  var pPrintOp = function (op) {
      if (op instanceof Composition) {
          return ".";
      };
      if (op instanceof Power) {
          return "^";
      };
      if (op instanceof Mul) {
          return "*";
      };
      if (op instanceof Div) {
          return "`div`";
      };
      if (op instanceof Mod) {
          return "`mod`";
      };
      if (op instanceof Add) {
          return "+";
      };
      if (op instanceof Sub) {
          return "-";
      };
      if (op instanceof Colon) {
          return ":";
      };
      if (op instanceof Append) {
          return "++";
      };
      if (op instanceof Equ) {
          return "==";
      };
      if (op instanceof Neq) {
          return "/=";
      };
      if (op instanceof Lt) {
          return "<";
      };
      if (op instanceof Leq) {
          return "<=";
      };
      if (op instanceof Gt) {
          return ">";
      };
      if (op instanceof Geq) {
          return ">=";
      };
      if (op instanceof And) {
          return "&&";
      };
      if (op instanceof Or) {
          return "||";
      };
      if (op instanceof Dollar) {
          return "$";
      };
      throw new Error("Failed pattern match at AST line 131, column 1 - line 132, column 1: " + [ op.constructor.name ]);
  }; 
  var eqAtom = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof AInt && v1 instanceof AInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Bool && v1 instanceof Bool) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Char && v1 instanceof Char) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Name && v1 instanceof Name) {
              return v.value0 === v1.value0;
          };
          return false;
      };
  });
  exports["Def"] = Def;
  exports["Lit"] = Lit;
  exports["ConsLit"] = ConsLit;
  exports["ListLit"] = ListLit;
  exports["NTupleLit"] = NTupleLit;
  exports["Atom"] = Atom;
  exports["List"] = List;
  exports["NTuple"] = NTuple;
  exports["Binary"] = Binary;
  exports["Unary"] = Unary;
  exports["SectL"] = SectL;
  exports["SectR"] = SectR;
  exports["PrefixOp"] = PrefixOp;
  exports["IfExpr"] = IfExpr;
  exports["LetExpr"] = LetExpr;
  exports["Lambda"] = Lambda;
  exports["App"] = App;
  exports["AInt"] = AInt;
  exports["Bool"] = Bool;
  exports["Char"] = Char;
  exports["Name"] = Name;
  exports["Composition"] = Composition;
  exports["Power"] = Power;
  exports["Mul"] = Mul;
  exports["Div"] = Div;
  exports["Mod"] = Mod;
  exports["Add"] = Add;
  exports["Sub"] = Sub;
  exports["Colon"] = Colon;
  exports["Append"] = Append;
  exports["Equ"] = Equ;
  exports["Neq"] = Neq;
  exports["Lt"] = Lt;
  exports["Leq"] = Leq;
  exports["Gt"] = Gt;
  exports["Geq"] = Geq;
  exports["And"] = And;
  exports["Or"] = Or;
  exports["Dollar"] = Dollar;
  exports["pPrintOp"] = pPrintOp;
  exports["eqAtom"] = eqAtom;
  exports["showOp"] = showOp;
  exports["showAtom"] = showAtom;
  exports["showExpr"] = showExpr;
  exports["showBinding"] = showBinding;;
 
})(PS["AST"] = PS["AST"] || {});
(function(exports) {
  /* global exports, ace */
  "use strict";

  // module Ace

  exports.ace = ace;

  exports.editImpl = function(el, self) {
      return function() {
          return self.edit(el);
      };
  };
 
})(PS["Ace"] = PS["Ace"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  exports["runFn4"] = $foreign.runFn4;;
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Ace"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Ace_Types = PS["Ace.Types"];
  var edit = function (el) {
      return function (self) {
          return $foreign.editImpl(el, self);
      };
  };
  exports["edit"] = edit;
  exports["ace"] = $foreign.ace;;
 
})(PS["Ace"] = PS["Ace"] || {});
(function(exports) {
  /* global exports, ace */
  "use strict";

  exports.addMarkerImpl = function(range, clazz, type, inFront, self) {
      return function() {
          return self.addMarker(range, clazz, type, inFront);
      };
  };

  function create(text, mode) {
      return function() {
          var EditSession = ace.require('ace/edit_session').EditSession;
          return new EditSession(text, mode);
      };
  } 
 
})(PS["Ace.EditSession"] = PS["Ace.EditSession"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Ace.EditSession"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Ace_Types = PS["Ace.Types"];
  var addMarker = function (range) {
      return function (clazz) {
          return function (_type) {
              return function (inFront) {
                  return function (self) {
                      return $foreign.addMarkerImpl(range, clazz, _type, inFront, self);
                  };
              };
          };
      };
  };
  exports["addMarker"] = addMarker;;
 
})(PS["Ace.EditSession"] = PS["Ace.EditSession"] || {});
(function(exports) {
  /* global exports, Editor */
  "use strict";

  // module Ace.Editor

  function effize(method) {
      return function() {
          var me = arguments[arguments.length - 1],
              args = Array.prototype.slice.call(arguments, 0, -1);
          return function() {
              return me[method].apply(me, args);
          };
      };
  }

  function effGet(field) {
      return function(self) {
          return function() {
              return self[field];
          };
      };
  }

  function effSet(field) {
      return function(val, self) {
          return function() {
              self[field] = val;
          };
      };
  }                                             
  exports.getSession = effize("getSession");
  exports.getValue = effize("getValue");
 
})(PS["Ace.Editor"] = PS["Ace.Editor"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Ace.Editor"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Ace_Types = PS["Ace.Types"];
  exports["getValue"] = $foreign.getValue;
  exports["getSession"] = $foreign.getSession;;
 
})(PS["Ace.Editor"] = PS["Ace.Editor"] || {});
(function(exports) {
  /* global exports, ace */
  "use strict";

  // module Ace.Range

  function effize(method) {
      return function() {
          var me = arguments[arguments.length - 1],
              args = Array.prototype.slice.call(arguments, 0, -1);
          return function() {
              return me[method].apply(me, args);
          };
      };
  }

  function effGet(field) {
      return function(self) {
          return function() {
              return self[field];
          };
      };
  } 

  exports.createImpl = function(startRow, startColumn, endRow, endColumn) {
      return function() {
          var Range = ace.require('ace/range').Range;
          return new Range(startRow, startColumn, endRow, endColumn);
      };
  };
 
})(PS["Ace.Range"] = PS["Ace.Range"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Ace.Range"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Ace_Types = PS["Ace.Types"];
  var create = function (startRow) {
      return function (startColumn) {
          return function (endRow) {
              return function (endColumn) {
                  return $foreign.createImpl(startRow, startColumn, endRow, endColumn);
              };
          };
      };
  };
  exports["create"] = create;;
 
})(PS["Ace.Range"] = PS["Ace.Range"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $greater$eq$greater = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return Prelude[">>="](dictBind)(f(a))(g);
              };
          };
      };
  };
  var $eq$less$less = function (dictBind) {
      return function (f) {
          return function (m) {
              return Prelude[">>="](dictBind)(m)(f);
          };
      };
  };
  exports[">=>"] = $greater$eq$greater;
  exports["=<<"] = $eq$less$less;;
 
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Prelude.id(Prelude.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;;
 
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var print = function (dictShow) {
      return function ($1) {
          return $foreign.log(Prelude.show(dictShow)($1));
      };
  };
  exports["print"] = print;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.JQuery

  exports.ready = function(func) {
      return function() {
          jQuery(document).ready(func);
      };
  };

  exports.select = function(selector) {
      return function() {
          return jQuery(selector);
      };
  };

  exports.find = function(selector) {
      return function(ob) {
          return function() {
              return ob.find(selector);
          };
      };
  };

  exports.create = function(html) {
      return function() {
          return jQuery(html);
      };
  };

  exports.setAttr = function(attr) {
      return function(val) {
          return function(ob) {
              return function() {
                  return ob.attr(attr, val);
              };
          };
      };
  };

  exports.attr = function(attrs) {
      return function(ob) {
          return function() {
              return ob.attr(attrs);
          };
      };
  };

  exports.toggleClass = function(cls) {
      return function(ob) {
          return function() {
              return ob.toggleClass(cls);
          };
      };
  };

  exports.setClass = function(cls) {
      return function(flag) {
          return function(ob) {
              return function() {
                  return ob.toggleClass(cls, flag);
              };
          };
      };
  };

  exports.setProp = function(p) {
      return function(val) {
          return function(ob) {
              return function() {
                  return ob.prop(p, val);
              };
          };
      };
  };

  exports.getProp = function(p) {
      return function(ob) {
          return function() {
              return ob.prop(p);
          };
      };
  };

  exports.append = function(ob1) {
      return function(ob) {
          return function() {
              return ob.append(ob1);
          };
      };
  };

  exports.body = function() {
      return jQuery(document.body);
  };

  exports.clear = function(ob) {
      return function() {
          return ob.empty();
      };
  };

  exports.setText = function(text) {
      return function(ob) {
          return function() {
              return ob.text(text);
          };
      };
  };

  exports.getValue = function(ob) {
      return function() {
          return ob.val();
      };
  };

  exports.on = function(evt) {
      return function(act) {
          return function(ob) {
              return function() {
                  return ob.on(evt, function(e) {
                      act(e)(jQuery(this))();
                  });
              };
          };
      };
  };

  exports.stopImmediatePropagation = function(e) {
      return function() {
          e.stopImmediatePropagation();
      };
  };
 
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeFromForeign = function (value) {
    return value;
  };
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Prelude.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"](functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.floor = Math.floor;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var floor = function ($2) {
      return unsafeClamp($$Math.floor($2));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substr(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toString"] = $foreign.toString;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];                                          
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromChar = Data_Char.toString;                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["fromChar"] = fromChar;
  exports["charAt"] = charAt;
  exports["joinWith"] = $foreign.joinWith;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["split"] = $foreign.split;
  exports["drop"] = $foreign.drop;
  exports["length"] = $foreign.length;
  exports["fromCharArray"] = $foreign.fromCharArray;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_String = PS["Data.String"];
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;;
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.JQuery"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var Data_Foreign = PS["Data.Foreign"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var removeClass = function (cls) {
      return $foreign.setClass(cls)(false);
  };                                      
  var addClass = function (cls) {
      return $foreign.setClass(cls)(true);
  };
  exports["removeClass"] = removeClass;
  exports["addClass"] = addClass;
  exports["stopImmediatePropagation"] = $foreign.stopImmediatePropagation;
  exports["on"] = $foreign.on;
  exports["getValue"] = $foreign.getValue;
  exports["setText"] = $foreign.setText;
  exports["body"] = $foreign.body;
  exports["clear"] = $foreign.clear;
  exports["append"] = $foreign.append;
  exports["getProp"] = $foreign.getProp;
  exports["setProp"] = $foreign.setProp;
  exports["setAttr"] = $foreign.setAttr;
  exports["create"] = $foreign.create;
  exports["find"] = $foreign.find;
  exports["select"] = $foreign.select;
  exports["ready"] = $foreign.ready;;
 
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];     
  var MonadError = function (__superclass_Prelude$dotMonad_0, catchError, throwError) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                          
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports["MonadError"] = MonadError;
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;;
 
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];     
  var MonadState = function (__superclass_Prelude$dotMonad_0, state) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Prelude.unit, f(s));
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["modify"] = modify;
  exports["get"] = get;
  exports["state"] = state;;
 
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;;
 
})(PS["Control.Monad.Trans"] = PS["Control.Monad.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (m) {
          return f(runExceptT(m));
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return mapExceptT(Prelude["<$>"](dictFunctor)(Prelude["<$>"](Data_Either.functorEither)(f)));
      });
  };
  var applyExceptT = function (dictApply) {
      return new Prelude.Apply(function () {
          return functorExceptT(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              var f$prime = Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["<*>"](Data_Either.applyEither))(v);
              var x$prime = Prelude["<*>"](dictApply)(f$prime)(v1);
              return x$prime;
          };
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyExceptT((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]());
      }, function (m) {
          return function (k) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(function ($68) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Left.create($68));
              })(function ($69) {
                  return runExceptT(k($69));
              }));
          };
      });
  };
  var applicativeExceptT = function (dictApplicative) {
      return new Prelude.Applicative(function () {
          return applyExceptT(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function ($70) {
          return ExceptT(Prelude.pure(dictApplicative)(Data_Either.Right.create($70)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeExceptT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadExceptT(dictMonad);
      }, function (m) {
          return function (handler) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(function ($72) {
                  return runExceptT(handler($72));
              })(function ($73) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Right.create($73));
              }));
          };
      }, function ($74) {
          return ExceptT(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Left.create($74)));
      });
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
          }, function (m) {
              return function (n) {
                  return ExceptT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(function (v) {
                      if (v instanceof Data_Either.Right) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v.value0));
                      };
                      if (v instanceof Data_Either.Left) {
                          return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(n))(function (v1) {
                              if (v1 instanceof Data_Either.Right) {
                                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v1.value0));
                              };
                              if (v1 instanceof Data_Either.Left) {
                                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Left(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 76, column 1 - line 87, column 1: " + [ v1.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 76, column 1 - line 87, column 1: " + [ v.constructor.name ]);
                  }));
              };
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;;
 
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var monadTransStateT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var execStateT = function (dictApply) {
      return function (m) {
          return function (s) {
              return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runStateT(m)(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var functorStateT = function (dictMonad) {
      return new Prelude.Functor(Prelude.liftM1(monadStateT(dictMonad)));
  };
  var bindStateT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(v(s))(function (v1) {
                      return runStateT(f(v1.value0))(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorStateT(dictMonad);
      }, Prelude.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return StateT(function (s) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(a, s));
          });
      });
  };
  var monadEffState = function (dictMonad) {
      return function (dictMonadEff) {
          return new Control_Monad_Eff_Class.MonadEff(function () {
              return monadStateT(dictMonad);
          }, function ($62) {
              return Control_Monad_Trans.lift(monadTransStateT)(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($62));
          });
      };
  };
  var monadErrorStateT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadStateT(dictMonadError["__superclass_Prelude.Monad_0"]());
      }, function (m) {
          return function (h) {
              return StateT(function (s) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(runStateT(m)(s))(function (e) {
                      return runStateT(h(e))(s);
                  });
              });
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransStateT)(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($63) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(f($63));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["execStateT"] = execStateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadEffState"] = monadEffState;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadStateStateT"] = monadStateStateT;;
 
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var $colon = $foreign.cons;
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())($colon)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())([  ]));
          };
      };
  };
  exports["many"] = many;
  exports["some"] = some;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Identity = function (x) {
      return x;
  };
  var runIdentity = function (v) {
      return v;
  };
  var functorIdentity = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Prelude.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Prelude.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Prelude.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Prelude.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;;
 
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect (f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports._collect = _collect;
 
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (m) {
    return function (k) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
 
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["delete"] = $foreign["delete"];
  exports["poke"] = $foreign.poke;;
 
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];     
  var values = function ($38) {
      return Data_List.toList(Data_Foldable.foldableArray)($foreign._collect(function (v) {
          return function (v1) {
              return v1;
          };
      })($38));
  };
  var toList = function ($39) {
      return Data_List.toList(Data_Foldable.foldableArray)($foreign._collect(Data_Tuple.Tuple.create)($39));
  };
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              f(v)();
              return v;
          });
      };
  };                                                                                 
  var lookup = Data_Function.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_StrMap_ST.poke(s)(k)(v);
          });
      };
  };
  var $$delete = function (k) {
      return mutate(function (s) {
          return Data_StrMap_ST["delete"](s)(k);
      });
  };
  exports["thawST"] = thawST;
  exports["values"] = values;
  exports["delete"] = $$delete;
  exports["toList"] = toList;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["empty"] = $foreign.empty;;
 
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0.value0)(v.value0.value1)(v.value1);
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c);
          };
      };
  };
  exports["uncurry3"] = uncurry3;
  exports["tuple3"] = tuple3;;
 
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var AST = PS["AST"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];     
  var Nth = (function () {
      function Nth(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Nth.create = function (value0) {
          return function (value1) {
              return new Nth(value0, value1);
          };
      };
      return Nth;
  })();
  var Fst = (function () {
      function Fst(value0) {
          this.value0 = value0;
      };
      Fst.create = function (value0) {
          return new Fst(value0);
      };
      return Fst;
  })();
  var Snd = (function () {
      function Snd(value0) {
          this.value0 = value0;
      };
      Snd.create = function (value0) {
          return new Snd(value0);
      };
      return Snd;
  })();
  var Thrd = (function () {
      function Thrd(value0) {
          this.value0 = value0;
      };
      Thrd.create = function (value0) {
          return new Thrd(value0);
      };
      return Thrd;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var MatchingError = (function () {
      function MatchingError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MatchingError.create = function (value0) {
          return function (value1) {
              return new MatchingError(value0, value1);
          };
      };
      return MatchingError;
  })();
  var StrictnessError = (function () {
      function StrictnessError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StrictnessError.create = function (value0) {
          return function (value1) {
              return new StrictnessError(value0, value1);
          };
      };
      return StrictnessError;
  })();
  var TooFewArguments = (function () {
      function TooFewArguments(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TooFewArguments.create = function (value0) {
          return function (value1) {
              return new TooFewArguments(value0, value1);
          };
      };
      return TooFewArguments;
  })();
  var PathError = (function () {
      function PathError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PathError.create = function (value0) {
          return function (value1) {
              return new PathError(value0, value1);
          };
      };
      return PathError;
  })();
  var IndexError = (function () {
      function IndexError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      IndexError.create = function (value0) {
          return function (value1) {
              return new IndexError(value0, value1);
          };
      };
      return IndexError;
  })();
  var DivByZero = (function () {
      function DivByZero() {

      };
      DivByZero.value = new DivByZero();
      return DivByZero;
  })();
  var $$EvalError = (function () {
      function EvalError(value0) {
          this.value0 = value0;
      };
      EvalError.create = function (value0) {
          return new EvalError(value0);
      };
      return EvalError;
  })();
  var BinaryOpError = (function () {
      function BinaryOpError(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinaryOpError.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinaryOpError(value0, value1, value2);
              };
          };
      };
      return BinaryOpError;
  })();
  var UnaryOpError = (function () {
      function UnaryOpError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnaryOpError.create = function (value0) {
          return function (value1) {
              return new UnaryOpError(value0, value1);
          };
      };
      return UnaryOpError;
  })();
  var NameCaptureError = (function () {
      function NameCaptureError(value0) {
          this.value0 = value0;
      };
      NameCaptureError.create = function (value0) {
          return new NameCaptureError(value0);
      };
      return NameCaptureError;
  })();
  var UnknownFunction = (function () {
      function UnknownFunction(value0) {
          this.value0 = value0;
      };
      UnknownFunction.create = function (value0) {
          return new UnknownFunction(value0);
      };
      return UnknownFunction;
  })();
  var NoMatchingFunction = (function () {
      function NoMatchingFunction(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NoMatchingFunction.create = function (value0) {
          return function (value1) {
              return new NoMatchingFunction(value0, value1);
          };
      };
      return NoMatchingFunction;
  })();
  var CannotEvaluate = (function () {
      function CannotEvaluate(value0) {
          this.value0 = value0;
      };
      CannotEvaluate.create = function (value0) {
          return new CannotEvaluate(value0);
      };
      return CannotEvaluate;
  })();
  var NoError = (function () {
      function NoError() {

      };
      NoError.value = new NoError();
      return NoError;
  })();
  var MoreErrors = (function () {
      function MoreErrors(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MoreErrors.create = function (value0) {
          return function (value1) {
              return new MoreErrors(value0, value1);
          };
      };
      return MoreErrors;
  })();
  var wrapLambda = function (binds) {
      return function (args) {
          return function (body) {
              var $26 = Prelude.compare(Prelude.ordInt)(Data_List.length(binds))(Data_List.length(args));
              if ($26 instanceof Prelude.EQ) {
                  return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(body);
              };
              if ($26 instanceof Prelude.GT) {
                  return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(new AST.Lambda(Data_List.drop(Data_List.length(args))(binds), body));
              };
              if ($26 instanceof Prelude.LT) {
                  return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(new AST.App(body, Data_List.drop(Data_List.length(binds))(args)));
              };
              throw new Error("Failed pattern match at Evaluator line 191, column 1 - line 192, column 1: " + [ $26.constructor.name ]);
          };
      };
  };
  var whnf = function (v) {
      if (v instanceof AST.Atom && v.value0 instanceof AST.Name) {
          return false;
      };
      if (v instanceof AST.Atom) {
          return true;
      };
      if (v instanceof AST.List) {
          return true;
      };
      if (v instanceof AST.NTuple) {
          return true;
      };
      return false;
  };
  var unary = function (v) {
      return function (v1) {
          if (v instanceof AST.Sub && (v1 instanceof AST.Atom && v1.value0 instanceof AST.AInt)) {
              return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(AST.Atom.create(new AST.AInt(-v1.value0.value0)));
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new UnaryOpError(v, v1));
      };
  };
  var showPath = new Prelude.Show(function (p) {
      if (p instanceof Nth) {
          return "(Nth " + (Prelude.show(Prelude.showInt)(p.value0) + (" " + (Prelude.show(showPath)(p.value1) + ")")));
      };
      if (p instanceof Fst) {
          return "(Fst " + (Prelude.show(showPath)(p.value0) + ")");
      };
      if (p instanceof Snd) {
          return "(Snd " + (Prelude.show(showPath)(p.value0) + ")");
      };
      if (p instanceof Thrd) {
          return "(Thrd " + (Prelude.show(showPath)(p.value0) + ")");
      };
      if (p instanceof End) {
          return "End";
      };
      throw new Error("Failed pattern match: " + [ p.constructor.name ]);
  });
  var showMatchingError = new Prelude.Show(function (v) {
      if (v instanceof MatchingError) {
          return "MatchingError " + (Prelude.show(AST.showBinding)(v.value0) + (" " + Prelude.show(AST.showExpr)(v.value1)));
      };
      if (v instanceof StrictnessError) {
          return "StrictnessError " + (Prelude.show(AST.showBinding)(v.value0) + (" " + Prelude.show(AST.showExpr)(v.value1)));
      };
      if (v instanceof TooFewArguments) {
          return "TooFewArguments " + (Prelude.show(Data_List.showList(AST.showBinding))(v.value0) + (" " + Prelude.show(Data_List.showList(AST.showExpr))(v.value1)));
      };
      throw new Error("Failed pattern match at Evaluator line 61, column 1 - line 66, column 1: " + [ v.constructor.name ]);
  });
  var showEvalError = new Prelude.Show(function (v) {
      if (v instanceof PathError) {
          return "PathError " + (Prelude.show(showPath)(v.value0) + (" " + Prelude.show(AST.showExpr)(v.value1)));
      };
      if (v instanceof IndexError) {
          return "IndexError " + (Prelude.show(Prelude.showInt)(v.value0) + (" " + Prelude.show(Prelude.showInt)(v.value1)));
      };
      if (v instanceof DivByZero) {
          return "DivByZero";
      };
      if (v instanceof $$EvalError) {
          return "EvalError " + Prelude.show(AST.showExpr)(v.value0);
      };
      if (v instanceof BinaryOpError) {
          return "BinaryOpError " + (Prelude.show(AST.showOp)(v.value0) + (" (" + (Prelude.show(AST.showExpr)(v.value1) + (") (" + (Prelude.show(AST.showExpr)(v.value2) + ")")))));
      };
      if (v instanceof UnaryOpError) {
          return "UnaryOpError " + (Prelude.show(AST.showOp)(v.value0) + (" " + Prelude.show(AST.showExpr)(v.value1)));
      };
      if (v instanceof NameCaptureError) {
          return "NameCaptureError " + Prelude.show(Data_List.showList(Prelude.showString))(v.value0);
      };
      if (v instanceof UnknownFunction) {
          return "UnknownFunction " + Prelude.show(Prelude.showString)(v.value0);
      };
      if (v instanceof NoMatchingFunction) {
          return "NoMatchingFunction " + (Prelude.show(Prelude.showString)(v.value0) + (" " + Prelude.show(Data_List.showList(showMatchingError))(v.value1)));
      };
      if (v instanceof CannotEvaluate) {
          return "CannotEvaluate " + Prelude.show(AST.showExpr)(v.value0);
      };
      if (v instanceof NoError) {
          return "NoError";
      };
      if (v instanceof MoreErrors) {
          return "(MoreErrors " + (Prelude.show(showEvalError)(v.value0) + (" " + (Prelude.show(showEvalError)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  });
  var semigroupEvalError = new Prelude.Semigroup(function (e1) {
      return function (e2) {
          return new MoreErrors(e1, e2);
      };
  });
  var runMatcherM = function ($365) {
      return Data_Identity.runIdentity(Control_Monad_Except_Trans.runExceptT($365));
  };
  var runEvalM = function ($366) {
      return Data_Identity.runIdentity(Control_Monad_Except_Trans.runExceptT($366));
  };                
  var mapIndex = function (i) {
      return function (f) {
          return function (as) {
              var $68 = Data_List["!!"](as)(i);
              if ($68 instanceof Data_Maybe.Nothing) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new IndexError(i, Data_List.length(as)));
              };
              if ($68 instanceof Data_Maybe.Just) {
                  return Prelude.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(f($68.value0))(function (v) {
                      var $70 = Data_List.updateAt(i)(v)(as);
                      if ($70 instanceof Data_Maybe.Nothing) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new IndexError(i, Data_List.length(as)));
                      };
                      if ($70 instanceof Data_Maybe.Just) {
                          return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))($70.value0);
                      };
                      throw new Error("Failed pattern match at Evaluator line 116, column 1 - line 117, column 1: " + [ $70.constructor.name ]);
                  });
              };
              throw new Error("Failed pattern match at Evaluator line 116, column 1 - line 117, column 1: " + [ $68.constructor.name ]);
          };
      };
  };
  var mapWithPath = function (p) {
      return function (f) {
          var go = function (v) {
              return function (e) {
                  if (v instanceof End) {
                      return f(e);
                  };
                  if (v instanceof Fst) {
                      if (e instanceof AST.Binary) {
                          return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.Binary.create(e.value0))(go(v.value0)(e.value1)))(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value2));
                      };
                      if (e instanceof AST.Unary) {
                          return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.Unary.create(e.value0))(go(v.value0)(e.value1));
                      };
                      if (e instanceof AST.SectL) {
                          return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.SectL.create)(go(v.value0)(e.value0)))(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value1));
                      };
                      if (e instanceof AST.IfExpr) {
                          return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.IfExpr.create)(go(v.value0)(e.value0)))(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value1)))(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value2));
                      };
                      if (e instanceof AST.Lambda) {
                          return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.Lambda.create(e.value0))(go(v.value0)(e.value1));
                      };
                      if (e instanceof AST.App) {
                          return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.App.create)(go(v.value0)(e.value0)))(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value1));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new PathError(new Fst(v.value0), e));
                  };
                  if (v instanceof Snd) {
                      if (e instanceof AST.Binary) {
                          return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.Binary.create(e.value0)(e.value1))(go(v.value0)(e.value2));
                      };
                      if (e instanceof AST.SectR) {
                          return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.SectR.create(e.value0))(go(v.value0)(e.value1));
                      };
                      if (e instanceof AST.IfExpr) {
                          return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.IfExpr.create)(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value0)))(go(v.value0)(e.value1)))(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value2));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new PathError(new Snd(v.value0), e));
                  };
                  if (v instanceof Thrd) {
                      if (e instanceof AST.IfExpr) {
                          return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.IfExpr.create)(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value0)))(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(e.value1)))(go(v.value0)(e.value2));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new PathError(new Thrd(v.value0), e));
                  };
                  if (v instanceof Nth) {
                      if (e instanceof AST.List) {
                          return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.List.create)(mapIndex(v.value0)(go(v.value1))(e.value0));
                      };
                      if (e instanceof AST.NTuple) {
                          return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.NTuple.create)(mapIndex(v.value0)(go(v.value1))(e.value0));
                      };
                      if (e instanceof AST.App) {
                          return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.App.create(e.value0))(mapIndex(v.value0)(go(v.value1))(e.value1));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new PathError(new Nth(v.value0, v.value1), e));
                  };
                  throw new Error("Failed pattern match at Evaluator line 90, column 1 - line 91, column 1: " + [ v.constructor.name, e.constructor.name ]);
              };
          };
          return go(p);
      };
  };
  var insertDef = function (env) {
      return function (v) {
          var $115 = Data_StrMap.lookup(v.value0)(env);
          if ($115 instanceof Data_Maybe.Nothing) {
              return Data_StrMap.insert(v.value0)(Data_List.singleton(new Data_Tuple.Tuple(v.value1, v.value2)))(env);
          };
          if ($115 instanceof Data_Maybe.Just) {
              return Data_StrMap.insert(v.value0)(Prelude["++"](Data_List.semigroupList)($115.value0)(Data_List.singleton(new Data_Tuple.Tuple(v.value1, v.value2))))(env);
          };
          throw new Error("Failed pattern match at Evaluator line 134, column 1 - line 135, column 1: " + [ $115.constructor.name ]);
      };
  };
  var freeVariables = function (v) {
      return Data_List.Nil.value;
  };
  var defsToEnv = Data_Foldable.foldl(Data_List.foldableList)(insertDef)(Data_StrMap.empty);
  var checkStrictness = function (bs) {
      return function (es) {
          if (whnf(es)) {
              return new MatchingError(bs, es);
          };
          if (Prelude.otherwise) {
              return new StrictnessError(bs, es);
          };
          throw new Error("Failed pattern match at Evaluator line 258, column 1 - line 259, column 1: " + [ bs.constructor.name, es.constructor.name ]);
      };
  };
  var match$prime = function (v) {
      return function (v1) {
          if (v instanceof AST.Lit && v.value0 instanceof AST.Name) {
              return Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_StrMap.insert(v.value0.value0)(v1));
          };
          if (v instanceof AST.Lit && v1 instanceof AST.Atom) {
              var $126 = Prelude["=="](AST.eqAtom)(v.value0)(v1.value0);
              if ($126) {
                  return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Prelude.unit);
              };
              if (!$126) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new MatchingError(new AST.Lit(v.value0), new AST.Atom(v1.value0)));
              };
              throw new Error("Failed pattern match: " + [ $126.constructor.name ]);
          };
          if (v instanceof AST.Lit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(checkStrictness(new AST.Lit(v.value0))(v1));
          };
          if (v instanceof AST.ConsLit && (v1 instanceof AST.Binary && v1.value0 instanceof AST.Colon)) {
              return Control_Apply["*>"](Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(match$prime(v.value0)(v1.value1))(match$prime(v.value1)(v1.value2));
          };
          if (v instanceof AST.ConsLit && (v1 instanceof AST.List && v1.value0 instanceof Data_List.Cons)) {
              return match$prime(new AST.ConsLit(v.value0, v.value1))(new AST.Binary(AST.Colon.value, v1.value0.value0, new AST.List(v1.value0.value1)));
          };
          if (v instanceof AST.ConsLit && (v1 instanceof AST.List && v1.value0 instanceof Data_List.Nil)) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new MatchingError(new AST.ConsLit(v.value0, v.value1), new AST.List(Data_List.Nil.value)));
          };
          if (v instanceof AST.ConsLit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(checkStrictness(new AST.ConsLit(v.value0, v.value1))(v1));
          };
          if (v instanceof AST.ListLit && (v.value0 instanceof Data_List.Cons && (v1 instanceof AST.Binary && v1.value0 instanceof AST.Colon))) {
              return Control_Apply["*>"](Control_Monad_State_Trans.applyStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(match$prime(v.value0.value0)(v1.value1))(match$prime(new AST.ListLit(v.value0.value1))(v1.value2));
          };
          if (v instanceof AST.ListLit && v1 instanceof AST.List) {
              var $151 = Data_List.length(v.value0) === Data_List.length(v1.value0);
              if ($151) {
                  return Prelude["void"](Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(match$prime)(v.value0)(v1.value0));
              };
              if (!$151) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new MatchingError(new AST.ListLit(v.value0), new AST.List(v1.value0)));
              };
              throw new Error("Failed pattern match: " + [ $151.constructor.name ]);
          };
          if (v instanceof AST.ListLit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(checkStrictness(new AST.ListLit(v.value0))(v1));
          };
          if (v instanceof AST.NTupleLit && v1 instanceof AST.NTuple) {
              var $155 = Data_List.length(v.value0) === Data_List.length(v1.value0);
              if ($155) {
                  return Prelude["void"](Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Data_List.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(match$prime)(v.value0)(v1.value0));
              };
              if (!$155) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(new MatchingError(new AST.NTupleLit(v.value0), new AST.NTuple(v1.value0)));
              };
              throw new Error("Failed pattern match: " + [ $155.constructor.name ]);
          };
          if (v instanceof AST.NTupleLit) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity)))(checkStrictness(new AST.NTupleLit(v.value0))(v1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var matchls$prime = function (bs) {
      return function (es) {
          return Control_Monad_State_Trans.execStateT(Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Data_List.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(match$prime)(bs)(es))(Data_StrMap.empty);
      };
  };
  var boundNames = (function () {
      var go = function (v) {
          if (v instanceof AST.Lit && v.value0 instanceof AST.Name) {
              return Data_List.singleton(v.value0.value0);
          };
          if (v instanceof AST.ConsLit) {
              return Prelude["++"](Data_List.semigroupList)(go(v.value0))(go(v.value1));
          };
          if (v instanceof AST.ListLit) {
              return Data_Foldable.foldMap(Data_List.foldableList)(Data_List.monoidList)(go)(v.value0);
          };
          if (v instanceof AST.NTupleLit) {
              return Data_Foldable.foldMap(Data_List.foldableList)(Data_List.monoidList)(go)(v.value0);
          };
          return Data_List.Nil.value;
      };
      return go;
  })();
  var boundNames$prime = Data_List.concatMap(boundNames);
  var binary = (function () {
      var retA = function ($367) {
          return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(AST.Atom.create($367));
      };
      var go = function (v) {
          return function (v1) {
              return function (v2) {
                  if (v instanceof AST.Power && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.AInt.create(Data_Foldable.product(Data_List.foldableList)(Prelude.semiringInt)(Data_List.replicate(v2.value0.value0)(v1.value0.value0))));
                  };
                  if (v instanceof AST.Mul && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.AInt.create(v1.value0.value0 * v2.value0.value0 | 0));
                  };
                  if (v instanceof AST.Div && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && (v2.value0 instanceof AST.AInt && v2.value0.value0 === 0))))) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(DivByZero.value);
                  };
                  if (v instanceof AST.Div && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.AInt.create(v1.value0.value0 / v2.value0.value0 | 0));
                  };
                  if (v instanceof AST.Mod && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && (v2.value0 instanceof AST.AInt && v2.value0.value0 === 0))))) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(DivByZero.value);
                  };
                  if (v instanceof AST.Mod && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.AInt.create(v1.value0.value0 % v2.value0.value0));
                  };
                  if (v instanceof AST.Add && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.AInt.create(v1.value0.value0 + v2.value0.value0 | 0));
                  };
                  if (v instanceof AST.Sub && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.AInt.create(v1.value0.value0 - v2.value0.value0));
                  };
                  if (v instanceof AST.Colon && v2 instanceof AST.List) {
                      return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(AST.List.create(Data_List[":"](v1)(v2.value0)));
                  };
                  if (v instanceof AST.Append && (v1 instanceof AST.List && v2 instanceof AST.List)) {
                      return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(AST.List.create(Prelude["++"](Data_List.semigroupList)(v1.value0)(v2.value0)));
                  };
                  if (v instanceof AST.Equ && (v1 instanceof AST.Atom && v2 instanceof AST.Atom)) {
                      return retA(AST.Bool.create(Prelude["=="](AST.eqAtom)(v1.value0)(v2.value0)));
                  };
                  if (v instanceof AST.Neq && (v1 instanceof AST.Atom && v2 instanceof AST.Atom)) {
                      return retA(AST.Bool.create(Prelude["/="](AST.eqAtom)(v1.value0)(v2.value0)));
                  };
                  if (v instanceof AST.Leq && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.Bool.create(v1.value0.value0 <= v2.value0.value0));
                  };
                  if (v instanceof AST.Lt && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.Bool.create(v1.value0.value0 < v2.value0.value0));
                  };
                  if (v instanceof AST.Geq && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.Bool.create(v1.value0.value0 >= v2.value0.value0));
                  };
                  if (v instanceof AST.Gt && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.AInt && (v2 instanceof AST.Atom && v2.value0 instanceof AST.AInt)))) {
                      return retA(AST.Bool.create(v1.value0.value0 > v2.value0.value0));
                  };
                  if (v instanceof AST.And && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.Bool && v1.value0.value0))) {
                      return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(v2);
                  };
                  if (v instanceof AST.And && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.Bool && !v1.value0.value0))) {
                      return retA(AST.Bool.create(false));
                  };
                  if (v instanceof AST.Or && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.Bool && v1.value0.value0))) {
                      return retA(AST.Bool.create(true));
                  };
                  if (v instanceof AST.Or && (v1 instanceof AST.Atom && (v1.value0 instanceof AST.Bool && !v1.value0.value0))) {
                      return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(v2);
                  };
                  if (v instanceof AST.Dollar) {
                      return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(new AST.App(v1, Data_List.singleton(v2)));
                  };
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new BinaryOpError(v, v1, v2));
              };
          };
      };
      return go;
  })();
  var avoidCapture = function (subs) {
      return function (binds) {
          var $232 = Data_List.intersect(Prelude.eqString)(Data_List.concatMap(freeVariables)(Data_StrMap.values(subs)))(boundNames$prime(binds));
          if ($232 instanceof Data_List.Nil) {
              return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(Prelude.unit);
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new NameCaptureError($232));
      };
  };
  var replace$prime = function (subs) {
      var go = function (expr) {
          if (expr instanceof AST.Atom && expr.value0 instanceof AST.Name) {
              var $234 = Data_StrMap.lookup(expr.value0.value0)(subs);
              if ($234 instanceof Data_Maybe.Just) {
                  return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))($234.value0);
              };
              if ($234 instanceof Data_Maybe.Nothing) {
                  return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr);
              };
              throw new Error("Failed pattern match: " + [ $234.constructor.name ]);
          };
          if (expr instanceof AST.List) {
              return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.List.create)(Data_Traversable.traverse(Data_List.traversableList)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(go)(expr.value0));
          };
          if (expr instanceof AST.NTuple) {
              return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.NTuple.create)(Data_Traversable.traverse(Data_List.traversableList)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(go)(expr.value0));
          };
          if (expr instanceof AST.Binary) {
              return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.Binary.create)(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr.value0)))(go(expr.value1)))(go(expr.value2));
          };
          if (expr instanceof AST.Unary) {
              return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.Unary.create)(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr.value0)))(go(expr.value1));
          };
          if (expr instanceof AST.SectL) {
              return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.SectL.create)(go(expr.value0)))(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr.value1));
          };
          if (expr instanceof AST.SectR) {
              return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.SectR.create)(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr.value0)))(go(expr.value1));
          };
          if (expr instanceof AST.IfExpr) {
              return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.IfExpr.create)(go(expr.value0)))(go(expr.value1)))(go(expr.value2));
          };
          if (expr instanceof AST.Lambda) {
              return Control_Apply["*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(avoidCapture(subs)(expr.value0))(Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.Lambda.create)(Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr.value0)))(replace$prime(Data_Foldable.foldr(Data_List.foldableList)(Data_StrMap["delete"])(subs)(boundNames$prime(expr.value0)))(expr.value1)));
          };
          if (expr instanceof AST.App) {
              return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(AST.App.create)(go(expr.value0)))(Data_Traversable.traverse(Data_List.traversableList)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(go)(expr.value1));
          };
          return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr);
      };
      return go;
  };
  var tryAll = function (__copy_v) {
      return function (__copy_v1) {
          return function (__copy_name) {
              return function (__copy_errs) {
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  var name = __copy_name;
                  var errs = __copy_errs;
                  tco: while (true) {
                      if (v instanceof Data_List.Nil) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new NoMatchingFunction(name, errs));
                      };
                      if (v instanceof Data_List.Cons && Data_List.length(v1) < Data_List.length(v.value0.value0)) {
                          var __tco_v = v.value1;
                          var __tco_v1 = v1;
                          var __tco_name = name;
                          var __tco_errs = Prelude["++"](Data_List.semigroupList)(errs)(Data_List.singleton(new TooFewArguments(v.value0.value0, v1)));
                          v = __tco_v;
                          v1 = __tco_v1;
                          name = __tco_name;
                          errs = __tco_errs;
                          continue tco;
                      };
                      if (v instanceof Data_List.Cons) {
                          var $264 = runMatcherM(matchls$prime(v.value0.value0)(v1));
                          if ($264 instanceof Data_Either.Right) {
                              return Prelude[">>="](Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(replace$prime($264.value0)(v.value0.value1))(wrapLambda(v.value0.value0)(v1));
                          };
                          if ($264 instanceof Data_Either.Left && $264.value0 instanceof StrictnessError) {
                              return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new NoMatchingFunction(name, Prelude["++"](Data_List.semigroupList)(errs)(Data_List.singleton($264.value0))));
                          };
                          if ($264 instanceof Data_Either.Left) {
                              var __tco_v = v.value1;
                              var __tco_v1 = v1;
                              var __tco_name = name;
                              var __tco_errs = Prelude["++"](Data_List.semigroupList)(errs)(Data_List.singleton($264.value0));
                              v = __tco_v;
                              v1 = __tco_v1;
                              name = __tco_name;
                              errs = __tco_errs;
                              continue tco;
                          };
                          throw new Error("Failed pattern match: " + [ $264.constructor.name ]);
                      };
                      throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name, name.constructor.name, errs.constructor.name ]);
                  };
              };
          };
      };
  };
  var apply = function (env) {
      return function (name) {
          return function (args) {
              var $274 = Data_StrMap.lookup(name)(env);
              if ($274 instanceof Data_Maybe.Nothing) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new UnknownFunction(name));
              };
              if ($274 instanceof Data_Maybe.Just) {
                  return tryAll($274.value0)(args)(name)(Data_List.Nil.value);
              };
              throw new Error("Failed pattern match at Evaluator line 238, column 1 - line 239, column 1: " + [ $274.constructor.name ]);
          };
      };
  };
  var eval1 = function (env) {
      return function (expr) {
          if (expr instanceof AST.Binary) {
              return binary(expr.value0)(expr.value1)(expr.value2);
          };
          if (expr instanceof AST.Unary) {
              return unary(expr.value0)(expr.value1);
          };
          if (expr instanceof AST.Atom && expr.value0 instanceof AST.Name) {
              return apply(env)(expr.value0.value0)(Data_List.Nil.value);
          };
          if (expr instanceof AST.IfExpr && (expr.value0 instanceof AST.Atom && (expr.value0.value0 instanceof AST.Bool && expr.value0.value0.value0))) {
              return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr.value1);
          };
          if (expr instanceof AST.IfExpr && (expr.value0 instanceof AST.Atom && (expr.value0.value0 instanceof AST.Bool && !expr.value0.value0.value0))) {
              return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(expr.value2);
          };
          if (expr instanceof AST.App && (expr.value0 instanceof AST.Binary && (expr.value0.value0 instanceof AST.Composition && (expr.value1 instanceof Data_List.Cons && expr.value1.value1 instanceof Data_List.Nil)))) {
              return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(new AST.App(expr.value0.value1, Data_List.singleton(new AST.App(expr.value0.value2, new Data_List.Cons(expr.value1.value0, Data_List.Nil.value)))));
          };
          if (expr instanceof AST.App && expr.value0 instanceof AST.Lambda) {
              return tryAll(Data_List.singleton(new Data_Tuple.Tuple(expr.value0.value0, expr.value0.value1)))(expr.value1)("lambda")(Data_List.Nil.value);
          };
          if (expr instanceof AST.App && (expr.value0 instanceof AST.SectL && (expr.value1 instanceof Data_List.Cons && expr.value1.value1 instanceof Data_List.Nil))) {
              return Control_Alt["<|>"](Control_Monad_Except_Trans.altExceptT(semigroupEvalError)(Data_Identity.monadIdentity))(binary(expr.value0.value1)(expr.value0.value0)(expr.value1.value0))(Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(new AST.Binary(expr.value0.value1, expr.value0.value0, expr.value1.value0)));
          };
          if (expr instanceof AST.App && (expr.value0 instanceof AST.SectR && (expr.value1 instanceof Data_List.Cons && expr.value1.value1 instanceof Data_List.Nil))) {
              return Control_Alt["<|>"](Control_Monad_Except_Trans.altExceptT(semigroupEvalError)(Data_Identity.monadIdentity))(binary(expr.value0.value0)(expr.value1.value0)(expr.value0.value1))(Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(new AST.Binary(expr.value0.value0, expr.value1.value0, expr.value0.value1)));
          };
          if (expr instanceof AST.App && (expr.value0 instanceof AST.PrefixOp && (expr.value1 instanceof Data_List.Cons && (expr.value1.value1 instanceof Data_List.Cons && expr.value1.value1.value1 instanceof Data_List.Nil)))) {
              return Control_Alt["<|>"](Control_Monad_Except_Trans.altExceptT(semigroupEvalError)(Data_Identity.monadIdentity))(binary(expr.value0.value0)(expr.value1.value0)(expr.value1.value1.value0))(Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(new AST.Binary(expr.value0.value0, expr.value1.value0, expr.value1.value1.value0)));
          };
          if (expr instanceof AST.App && (expr.value0 instanceof AST.Atom && expr.value0.value0 instanceof AST.Name)) {
              return apply(env)(expr.value0.value0.value0)(expr.value1);
          };
          if (expr instanceof AST.App && expr.value0 instanceof AST.App) {
              return Prelude["return"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(new AST.App(expr.value0.value0, Prelude["++"](Data_List.semigroupList)(expr.value0.value1)(expr.value1)));
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(new CannotEvaluate(expr));
      };
  };
  var evalPath1 = function (env) {
      return function (path) {
          return function (expr) {
              return runEvalM(mapWithPath(path)(eval1(env))(expr));
          };
      };
  };
  exports["Nth"] = Nth;
  exports["Fst"] = Fst;
  exports["Snd"] = Snd;
  exports["Thrd"] = Thrd;
  exports["End"] = End;
  exports["MatchingError"] = MatchingError;
  exports["StrictnessError"] = StrictnessError;
  exports["TooFewArguments"] = TooFewArguments;
  exports["PathError"] = PathError;
  exports["IndexError"] = IndexError;
  exports["DivByZero"] = DivByZero;
  exports["BinaryOpError"] = BinaryOpError;
  exports["UnaryOpError"] = UnaryOpError;
  exports["NameCaptureError"] = NameCaptureError;
  exports["UnknownFunction"] = UnknownFunction;
  exports["NoMatchingFunction"] = NoMatchingFunction;
  exports["CannotEvaluate"] = CannotEvaluate;
  exports["NoError"] = NoError;
  exports["MoreErrors"] = MoreErrors;
  exports["boundNames"] = boundNames;
  exports["freeVariables"] = freeVariables;
  exports["avoidCapture"] = avoidCapture;
  exports["checkStrictness"] = checkStrictness;
  exports["whnf"] = whnf;
  exports["tryAll"] = tryAll;
  exports["apply"] = apply;
  exports["unary"] = unary;
  exports["binary"] = binary;
  exports["wrapLambda"] = wrapLambda;
  exports["eval1"] = eval1;
  exports["insertDef"] = insertDef;
  exports["defsToEnv"] = defsToEnv;
  exports["evalPath1"] = evalPath1;
  exports["mapIndex"] = mapIndex;
  exports["mapWithPath"] = mapWithPath;
  exports["runMatcherM"] = runMatcherM;
  exports["runEvalM"] = runEvalM;
  exports["semigroupEvalError"] = semigroupEvalError;
  exports["showEvalError"] = showEvalError;
  exports["showMatchingError"] = showMatchingError;
  exports["showPath"] = showPath;;
 
})(PS["Evaluator"] = PS["Evaluator"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };                                              
 
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Global"];
  exports["readInt"] = $foreign.readInt;;
 
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module JSHelpers

  exports.jqMap = function(func) {
      return function(ob) {
          return function() {
              ob.map( function(i, e) { return func(jQuery(e))(); } );
          };
      };
  };

  exports.isEnterKey = function(event) {
      return event.which == 13;
  };
})(PS["JSHelpers"] = PS["JSHelpers"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["JSHelpers"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  exports["isEnterKey"] = $foreign.isEnterKey;
  exports["jqMap"] = $foreign.jqMap;;
 
})(PS["JSHelpers"] = PS["JSHelpers"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];     
  var Position = (function () {
      function Position(value0) {
          this.value0 = value0;
      };
      Position.create = function (value0) {
          return new Position(value0);
      };
      return Position;
  })();
  var updatePosString = function (pos) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\n") {
                      return new Position({
                          line: v.value0.line + 1 | 0, 
                          column: 1
                      });
                  };
                  if (c === "\r") {
                      return new Position({
                          line: v.value0.line + 1 | 0, 
                          column: 1
                      });
                  };
                  if (c === "\t") {
                      return new Position({
                          line: v.value0.line, 
                          column: (v.value0.column + 8 | 0) - (v.value0.column - 1) % 8
                      });
                  };
                  return new Position({
                      line: v.value0.line, 
                      column: v.value0.column + 1 | 0
                  });
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos)(Data_String.split("")(str));
      };
  };
  var showPosition = new Prelude.Show(function (v) {
      return "Position { line: " + (Prelude.show(Prelude.showInt)(v.value0.line) + (", column: " + (Prelude.show(Prelude.showInt)(v.value0.column) + " }")));
  });
  var initialPos = new Position({
      line: 1, 
      column: 1
  });
  exports["Position"] = Position;
  exports["updatePosString"] = updatePosString;
  exports["initialPos"] = initialPos;
  exports["showPosition"] = showPosition;;
 
})(PS["Text.Parsing.Parser.Pos"] = PS["Text.Parsing.Parser.Pos"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];     
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var PState = (function () {
      function PState(value0) {
          this.value0 = value0;
      };
      PState.create = function (value0) {
          return new PState(value0);
      };
      return PState;
  })();
  var ParserT = function (x) {
      return x;
  };
  var unParserT = function (v) {
      return v;
  };
  var showParseError = new Prelude.Show(function (v) {
      return "ParseError { message: " + (v.value0.message + (", position: " + (Prelude.show(Text_Parsing_Parser_Pos.showPosition)(v.value0.position) + " }")));
  });
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(v.result);
              });
          };
      };
  };
  var runParser = function (s) {
      return function ($54) {
          return Data_Identity.runIdentity(runParserT(Data_Identity.monadIdentity)(new PState({
              input: s, 
              position: Text_Parsing_Parser_Pos.initialPos
          }))($54));
      };
  };
  var parseFailed = function (s) {
      return function (pos) {
          return function (message) {
              return {
                  input: s, 
                  consumed: false, 
                  result: new Data_Either.Left(new ParseError({
                      message: message, 
                      position: pos
                  })), 
                  position: pos
              };
          };
      };
  }; 
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return ParserT(function (s) {
          return unParserT(f(Prelude.unit))(s);
      });
  });
  var functorParserT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (p) {
              var f$prime = function (o) {
                  return {
                      input: o.input, 
                      result: Prelude["<$>"](Data_Either.functorEither)(f)(o.result), 
                      consumed: o.consumed, 
                      position: o.position
                  };
              };
              return ParserT(function (s) {
                  return Prelude["<$>"](dictFunctor)(f$prime)(unParserT(p)(s));
              });
          };
      });
  };
  var fail = function (dictMonad) {
      return function (message) {
          return ParserT(function (v) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(parseFailed(v.value0.input)(v.value0.position)(message));
          });
      };
  };
  var monadParserT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return bindParserT(dictMonad);
      });
  };
  var bindParserT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyParserT(dictMonad);
      }, function (p) {
          return function (f) {
              var updateConsumedFlag = function (c) {
                  return function (o) {
                      return {
                          input: o.input, 
                          consumed: c || o.consumed, 
                          result: o.result, 
                          position: o.position
                      };
                  };
              };
              return ParserT(function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (o) {
                      if (o.result instanceof Data_Either.Left) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())({
                              input: o.input, 
                              result: new Data_Either.Left(o.result.value0), 
                              consumed: o.consumed, 
                              position: o.position
                          });
                      };
                      if (o.result instanceof Data_Either.Right) {
                          return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(updateConsumedFlag(o.consumed))(unParserT(f(o.result.value0))(new PState({
                              input: o.input, 
                              position: o.position
                          })));
                      };
                      throw new Error("Failed pattern match: " + [ o.result.constructor.name ]);
                  });
              });
          };
      });
  };
  var applyParserT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorParserT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, Prelude.ap(monadParserT(dictMonad)));
  };
  var applicativeParserT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyParserT(dictMonad);
      }, function (a) {
          return ParserT(function (v) {
              return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())({
                  input: v.value0.input, 
                  result: new Data_Either.Right(a), 
                  consumed: false, 
                  position: v.value0.position
              });
          });
      });
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, function (p1) {
          return function (p2) {
              return ParserT(function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p1)(s))(function (o) {
                      if (o.result instanceof Data_Either.Left && !o.consumed) {
                          return unParserT(p2)(s);
                      };
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(o);
                  });
              });
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return plusParserT(dictMonad);
      }, function () {
          return applicativeParserT(dictMonad);
      });
  };
  exports["ParserT"] = ParserT;
  exports["PState"] = PState;
  exports["ParseError"] = ParseError;
  exports["parseFailed"] = parseFailed;
  exports["fail"] = fail;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["unParserT"] = unParserT;
  exports["showParseError"] = showParseError;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadParserT"] = monadParserT;
  exports["lazyParserT"] = lazyParserT;;
 
})(PS["Text.Parsing.Parser"] = PS["Text.Parsing.Parser"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_List = PS["Data.List"];
  var Data_String = PS["Data.String"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var DOM = PS["DOM"];
  var AST = PS["AST"];
  var Evaluator = PS["Evaluator"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var toStr = function (v) {
      if (v instanceof Data_List.Nil) {
          return Data_Maybe.Nothing.value;
      };
      var extract = function (v1) {
          if (v1 instanceof AST.Atom && v1.value0 instanceof AST.Char) {
              return new Data_Maybe.Just(v1.value0.value0);
          };
          return Data_Maybe.Nothing.value;
      };
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function ($125) {
          return Data_String.joinWith("")(Data_List.fromList(Data_Unfoldable.unfoldableArray)($125));
      })(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_List.traversableList)(v)(extract));
  };
  var pathPropName = "clickyEvaluation_path";
  var makeDiv = function (text) {
      return function (classes) {
          return function __do() {
              var v = Control_Monad_Eff_JQuery.create("<div></div>")();
              Control_Monad_Eff_JQuery.setText(text)(v)();
              Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(classes)(Prelude.flip(Control_Monad_Eff_JQuery.addClass)(v))();
              return v;
          };
      };
  };
  var section = function (j1) {
      return function (j2) {
          return function __do() {
              var v = makeDiv("")(Data_List.singleton("section"))();
              var v1 = makeDiv("(")(Data_List.singleton("brace"))();
              Control_Monad_Eff_JQuery.append(v1)(v)();
              Control_Monad_Eff_JQuery.append(j1)(v)();
              Control_Monad_Eff_JQuery.append(j2)(v)();
              var v2 = makeDiv(")")(Data_List.singleton("brace"))();
              Control_Monad_Eff_JQuery.append(v2)(v)();
              return v;
          };
      };
  };
  var string = function (str) {
      return makeDiv("\"" + (str + "\""))(Data_List.toList(Data_Foldable.foldableArray)([ "list", "string" ]));
  };
  var lambda = function (jBinds) {
      return function (jBody) {
          return function __do() {
              var v = makeDiv("")(Data_List.singleton("lambda"))();
              var v1 = makeDiv("(")(Data_List.singleton("brace"))();
              Control_Monad_Eff_JQuery.append(v1)(v)();
              var v2 = makeDiv("\\")(Data_List.singleton("backslash"))();
              Control_Monad_Eff_JQuery.append(v2)(v)();
              Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(jBinds)(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              var v3 = makeDiv("->")(Data_List.singleton("arrow"))();
              Control_Monad_Eff_JQuery.append(v3)(v)();
              Control_Monad_Eff_JQuery.append(jBody)(v)();
              var v4 = makeDiv(")")(Data_List.singleton("brace"))();
              Control_Monad_Eff_JQuery.append(v4)(v)();
              return v;
          };
      };
  };
  var interleaveM_ = function (dictMonad) {
      return function (f) {
          return function (sep) {
              var go = function (v) {
                  if (v instanceof Data_List.Nil) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
                  };
                  if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
                      return Prelude["void"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f(v.value0));
                  };
                  if (v instanceof Data_List.Cons) {
                      return Control_Apply["*>"]((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())(Control_Apply["*>"]((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())(f(v.value0))(sep))(go(v.value1));
                  };
                  throw new Error("Failed pattern match at Web line 147, column 1 - line 148, column 1: " + [ v.constructor.name ]);
              };
              return go;
          };
      };
  };
  var list = function (js) {
      return function __do() {
          var v = makeDiv("")(Data_List.singleton("list"))();
          var v1 = makeDiv("[")(Data_List.singleton("brace"))();
          Control_Monad_Eff_JQuery.append(v1)(v)();
          interleaveM_(Control_Monad_Eff.monadEff)(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))(Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(",")(Data_List.singleton("comma")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v)))(js)();
          var v2 = makeDiv("]")(Data_List.singleton("brace"))();
          Control_Monad_Eff_JQuery.append(v2)(v)();
          return v;
      };
  };
  var tuple = function (js) {
      return function __do() {
          var v = makeDiv("")(Data_List.singleton("tuple"))();
          var v1 = makeDiv("(")(Data_List.singleton("brace"))();
          Control_Monad_Eff_JQuery.append(v1)(v)();
          interleaveM_(Control_Monad_Eff.monadEff)(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))(Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(",")(Data_List.singleton("comma")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v)))(js)();
          var v2 = makeDiv(")")(Data_List.singleton("brace"))();
          Control_Monad_Eff_JQuery.append(v2)(v)();
          return v;
      };
  };
  var ifexpr = function (cond) {
      return function (thenExpr) {
          return function (elseExpr) {
              return function __do() {
                  var v = makeDiv("")(Data_List.singleton("if"))();
                  Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("if")(Data_List.singleton("keyword")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
                  Control_Monad_Eff_JQuery.append(cond)(v)();
                  Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("then")(Data_List.singleton("keyword")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
                  Control_Monad_Eff_JQuery.append(thenExpr)(v)();
                  Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("else")(Data_List.singleton("keyword")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
                  Control_Monad_Eff_JQuery.append(elseExpr)(v)();
                  return v;
              };
          };
      };
  };
  var getPath = function (j) {
      return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Foreign.unsafeFromForeign)(Control_Monad_Eff_JQuery.getProp(pathPropName)(j));
  };
  var binary = function (op) {
      return function (j1) {
          return function (j2) {
              return function __do() {
                  var v = makeDiv("")(Data_List.singleton("binary"))();
                  Control_Monad_Eff_JQuery.append(j1)(v)();
                  var v1 = makeDiv(AST.pPrintOp(op))(Data_List.singleton("op"))();
                  Control_Monad_Eff_JQuery.append(v1)(v)();
                  Control_Monad_Eff_JQuery.append(j2)(v)();
                  return v;
              };
          };
      };
  };
  var atom = function (v) {
      if (v instanceof AST.AInt) {
          return makeDiv(Prelude.show(Prelude.showInt)(v.value0))(Data_List.toList(Data_Foldable.foldableArray)([ "atom", "num" ]));
      };
      if (v instanceof AST.Bool && v.value0) {
          return makeDiv("True")(Data_List.toList(Data_Foldable.foldableArray)([ "atom", "bool" ]));
      };
      if (v instanceof AST.Bool && !v.value0) {
          return makeDiv("False")(Data_List.toList(Data_Foldable.foldableArray)([ "atom", "bool" ]));
      };
      if (v instanceof AST.Char) {
          return makeDiv("'" + (v.value0 + "'"))(Data_List.toList(Data_Foldable.foldableArray)([ "atom", "char" ]));
      };
      if (v instanceof AST.Name) {
          return makeDiv(v.value0)(Data_List.toList(Data_Foldable.foldableArray)([ "atom", "name" ]));
      };
      throw new Error("Failed pattern match at Web line 70, column 1 - line 71, column 1: " + [ v.constructor.name ]);
  };
  var binding = function (b) {
      if (b instanceof AST.Lit) {
          return atom(b.value0);
      };
      if (b instanceof AST.ConsLit) {
          return function __do() {
              var v = makeDiv("")(Data_List.Nil.value)();
              Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("(")(Data_List.singleton("brace")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              Prelude[">>="](Control_Monad_Eff.bindEff)(binding(b.value0))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(":")(Data_List.singleton("colon")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              Prelude[">>="](Control_Monad_Eff.bindEff)(binding(b.value1))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              return Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(")")(Data_List.singleton("brace")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
          };
      };
      if (b instanceof AST.ListLit) {
          return function __do() {
              var v = makeDiv("")(Data_List.Nil.value)();
              Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("[")(Data_List.singleton("brace")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(b.value0)(function (b1) {
                  return function __do() {
                      Prelude[">>="](Control_Monad_Eff.bindEff)(binding(b1))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
                      return Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(",")(Data_List.singleton("comma")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
                  };
              })();
              return Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("]")(Data_List.singleton("brace")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
          };
      };
      if (b instanceof AST.NTupleLit) {
          return function __do() {
              var v = makeDiv("")(Data_List.Nil.value)();
              Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("(")(Data_List.singleton("brace")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              interleaveM_(Control_Monad_Eff.monadEff)(Control_Bind[">=>"](Control_Monad_Eff.bindEff)(binding)(Prelude.flip(Control_Monad_Eff_JQuery.append)(v)))(Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(",")(Data_List.singleton("comma")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v)))(b.value0)();
              Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(")")(Data_List.singleton("brace")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              return v;
          };
      };
      throw new Error("Failed pattern match: " + [ b.constructor.name ]);
  };
  var app = function (jFunc) {
      return function (jArgs) {
          return function __do() {
              var v = makeDiv("")(Data_List.singleton("app"))();
              Control_Monad_Eff_JQuery.addClass("func")(jFunc)();
              Control_Monad_Eff_JQuery.append(jFunc)(v)();
              Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(jArgs)(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))();
              return v;
          };
      };
  };
  var exprToJQuery = function (expr) {
      var go = function (p) {
          return function (e) {
              return Control_Bind["=<<"](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.setProp(pathPropName)(p(Evaluator.End.value)))((function () {
                  if (e instanceof AST.Atom) {
                      return atom(e.value0);
                  };
                  if (e instanceof AST.Binary) {
                      return function __do() {
                          var v = go(function ($126) {
                              return p(Evaluator.Fst.create($126));
                          })(e.value1)();
                          var v1 = go(function ($127) {
                              return p(Evaluator.Snd.create($127));
                          })(e.value2)();
                          return binary(e.value0)(v)(v1)();
                      };
                  };
                  if (e instanceof AST.List) {
                      var $96 = toStr(e.value0);
                      if ($96 instanceof Data_Maybe.Just) {
                          return string($96.value0);
                      };
                      if ($96 instanceof Data_Maybe.Nothing) {
                          return function __do() {
                              var v = Data_List.zipWithA(Control_Monad_Eff.applicativeEff)(function (i) {
                                  return function (e1) {
                                      return go(function ($128) {
                                          return p(Evaluator.Nth.create(i)($128));
                                      })(e1);
                                  };
                              })(Data_List[".."](0)(Data_List.length(e.value0) - 1))(e.value0)();
                              return list(v)();
                          };
                      };
                      throw new Error("Failed pattern match at Web line 29, column 1 - line 30, column 1: " + [ $96.constructor.name ]);
                  };
                  if (e instanceof AST.NTuple) {
                      return function __do() {
                          var v = Data_List.zipWithA(Control_Monad_Eff.applicativeEff)(function (i) {
                              return function (e1) {
                                  return go(function ($129) {
                                      return p(Evaluator.Nth.create(i)($129));
                                  })(e1);
                              };
                          })(Data_List[".."](0)(Data_List.length(e.value0) - 1))(e.value0)();
                          return tuple(v)();
                      };
                  };
                  if (e instanceof AST.SectL) {
                      return function __do() {
                          var v = go(function ($130) {
                              return p(Evaluator.Fst.create($130));
                          })(e.value0)();
                          var v1 = makeDiv(AST.pPrintOp(e.value1))(Data_List.singleton("op"))();
                          return section(v)(v1)();
                      };
                  };
                  if (e instanceof AST.SectR) {
                      return function __do() {
                          var v = makeDiv(AST.pPrintOp(e.value0))(Data_List.singleton("op"))();
                          var v1 = go(function ($131) {
                              return p(Evaluator.Snd.create($131));
                          })(e.value1)();
                          return section(v)(v1)();
                      };
                  };
                  if (e instanceof AST.PrefixOp) {
                      return makeDiv("(" + (AST.pPrintOp(e.value0) + ")"))(Data_List.toList(Data_Foldable.foldableArray)([ "prefix", "op" ]));
                  };
                  if (e instanceof AST.IfExpr) {
                      return function __do() {
                          var v = go(function ($132) {
                              return p(Evaluator.Fst.create($132));
                          })(e.value0)();
                          var v1 = go(function ($133) {
                              return p(Evaluator.Snd.create($133));
                          })(e.value1)();
                          var v2 = go(function ($134) {
                              return p(Evaluator.Thrd.create($134));
                          })(e.value2)();
                          return ifexpr(v)(v1)(v2)();
                      };
                  };
                  if (e instanceof AST.Lambda) {
                      return function __do() {
                          var v = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(e.value0)(binding)();
                          var v1 = go(function ($135) {
                              return p(Evaluator.Fst.create($135));
                          })(e.value1)();
                          return lambda(v)(v1)();
                      };
                  };
                  if (e instanceof AST.App) {
                      return function __do() {
                          var v = go(function ($136) {
                              return p(Evaluator.Fst.create($136));
                          })(e.value0)();
                          var v1 = Data_List.zipWithA(Control_Monad_Eff.applicativeEff)(function (i) {
                              return function (e1) {
                                  return go(function ($137) {
                                      return p(Evaluator.Nth.create(i)($137));
                                  })(e1);
                              };
                          })(Data_List[".."](0)(Data_List.length(e.value1) - 1))(e.value1)();
                          return app(v)(v1)();
                      };
                  };
                  throw new Error("Failed pattern match at Web line 29, column 1 - line 30, column 1: " + [ e.constructor.name ]);
              })());
          };
      };
      return go(Prelude.id(Prelude.categoryFn))(expr);
  };
  exports["getPath"] = getPath;
  exports["exprToJQuery"] = exprToJQuery;;
 
})(PS["Web"] = PS["Web"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Apply = PS["Control.Apply"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];     
  var $less$qmark$greater = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var $$try = function (dictFunctor) {
      return function (p) {
          var try$prime = function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v2.result instanceof Data_Either.Left) {
                          return {
                              input: v, 
                              result: v2.result, 
                              consumed: false, 
                              position: v1
                          };
                      };
                      return v2;
                  };
              };
          };
          return Text_Parsing_Parser.ParserT(function (v) {
              return Prelude["<$>"](dictFunctor)(try$prime(v.value0.input)(v.value0.position))(Text_Parsing_Parser.unParserT(p)(new Text_Parsing_Parser.PState({
                  input: v.value0.input, 
                  position: v.value0.position
              })));
          });
      };
  };
  var sepEndBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sepEndBy(dictMonad)(p)(sep))(function (v1) {
                          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List[":"](v)(v1));
                      });
                  }))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.singleton(v)));
              });
          };
      };
  };
  var sepEndBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(sepEndBy1(dictMonad)(p)(sep))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.Nil.value));
          };
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function () {
                      return p;
                  })))(function (v1) {
                      return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List[":"](v)(v1));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.Nil.value));
          };
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(p)(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var optionMaybe = function (dictMonad) {
      return function (p) {
          return option(dictMonad)(Data_Maybe.Nothing.value)(Prelude["<$>"](Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Data_Maybe.Just.create)(p));
      };
  };
  var lookAhead = function (dictMonad) {
      return function (v) {
          return function (v1) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(v(new Text_Parsing_Parser.PState({
                  input: v1.value0.input, 
                  position: v1.value0.position
              })))(function (v2) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                      var $74 = {};
                      for (var $75 in v2) {
                          if (v2.hasOwnProperty($75)) {
                              $74[$75] = v2[$75];
                          };
                      };
                      $74.input = v1.value0.input;
                      $74.consumed = false;
                      $74.position = v1.value0.position;
                      return $74;
                  })());
              });
          };
      };
  };
  var choice = function (dictFoldable) {
      return function (dictMonad) {
          return Data_Foldable.foldl(dictFoldable)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
      };
  };
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(open)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(close)(function () {
                              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                          });
                      });
                  });
              };
          };
      };
  };
  exports["lookAhead"] = lookAhead;
  exports["choice"] = choice;
  exports["sepEndBy1"] = sepEndBy1;
  exports["sepEndBy"] = sepEndBy;
  exports["sepBy1"] = sepBy1;
  exports["sepBy"] = sepBy;
  exports["try"] = $$try;
  exports["optionMaybe"] = optionMaybe;
  exports["option"] = option;
  exports["between"] = between;
  exports["<?>"] = $less$qmark$greater;;
 
})(PS["Text.Parsing.Parser.Combinators"] = PS["Text.Parsing.Parser.Combinators"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Control_Alt = PS["Control.Alt"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];     
  var AssocNone = (function () {
      function AssocNone() {

      };
      AssocNone.value = new AssocNone();
      return AssocNone;
  })();
  var AssocLeft = (function () {
      function AssocLeft() {

      };
      AssocLeft.value = new AssocLeft();
      return AssocLeft;
  })();
  var AssocRight = (function () {
      function AssocRight() {

      };
      AssocRight.value = new AssocRight();
      return AssocRight;
  })();
  var Infix = (function () {
      function Infix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Infix.create = function (value0) {
          return function (value1) {
              return new Infix(value0, value1);
          };
      };
      return Infix;
  })();
  var Prefix = (function () {
      function Prefix(value0) {
          this.value0 = value0;
      };
      Prefix.create = function (value0) {
          return new Prefix(value0);
      };
      return Prefix;
  })();
  var Postfix = (function () {
      function Postfix(value0) {
          this.value0 = value0;
      };
      Postfix.create = function (value0) {
          return new Postfix(value0);
      };
      return Postfix;
  })();
  var termP = function (dictMonad) {
      return function (prefixP) {
          return function (term) {
              return function (postfixP) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(prefixP)(function (v) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(term)(function (v1) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(postfixP)(function (v2) {
                              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v2(v(v1)));
                          });
                      });
                  });
              };
          };
      };
  };
  var splitOp = function (v) {
      return function (accum) {
          if (v instanceof Infix && v.value1 instanceof AssocNone) {
              var $25 = {};
              for (var $26 in accum) {
                  if (accum.hasOwnProperty($26)) {
                      $25[$26] = accum[$26];
                  };
              };
              $25.nassoc = Data_List[":"](v.value0)(accum.nassoc);
              return $25;
          };
          if (v instanceof Infix && v.value1 instanceof AssocLeft) {
              var $29 = {};
              for (var $30 in accum) {
                  if (accum.hasOwnProperty($30)) {
                      $29[$30] = accum[$30];
                  };
              };
              $29.lassoc = Data_List[":"](v.value0)(accum.lassoc);
              return $29;
          };
          if (v instanceof Infix && v.value1 instanceof AssocRight) {
              var $33 = {};
              for (var $34 in accum) {
                  if (accum.hasOwnProperty($34)) {
                      $33[$34] = accum[$34];
                  };
              };
              $33.rassoc = Data_List[":"](v.value0)(accum.rassoc);
              return $33;
          };
          if (v instanceof Prefix) {
              var $37 = {};
              for (var $38 in accum) {
                  if (accum.hasOwnProperty($38)) {
                      $37[$38] = accum[$38];
                  };
              };
              $37.prefix = Data_List[":"](v.value0)(accum.prefix);
              return $37;
          };
          if (v instanceof Postfix) {
              var $40 = {};
              for (var $41 in accum) {
                  if (accum.hasOwnProperty($41)) {
                      $40[$41] = accum[$41];
                  };
              };
              $40.postfix = Data_List[":"](v.value0)(accum.postfix);
              return $40;
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Expr line 71, column 1 - line 72, column 1: " + [ v.constructor.name, accum.constructor.name ]);
      };
  };
  var rassocP1 = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var rassocP = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(rassocOp)(function (v) {
                              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return rassocP1(dictMonad)(v1)(rassocOp)(prefixP)(term)(postfixP);
                              }))(function (v1) {
                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v(x)(v1));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var nassocP = function (dictMonad) {
      return function (x) {
          return function (nassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nassocOp)(function (v) {
                              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v(x)(v1));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var lassocP1 = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var lassocP = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lassocOp)(function (v) {
                              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v1) {
                                  return lassocP1(dictMonad)(v(x)(v1))(lassocOp)(prefixP)(term)(postfixP);
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var makeParser = function (dictMonad) {
      return function (term) {
          return function (ops) {
              var accum = Data_Foldable.foldr(Data_Foldable.foldableArray)(splitOp)({
                  rassoc: Data_List.Nil.value, 
                  lassoc: Data_List.Nil.value, 
                  nassoc: Data_List.Nil.value, 
                  prefix: Data_List.Nil.value, 
                  postfix: Data_List.Nil.value
              })(ops);
              var lassocOp = Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.lassoc);
              var nassocOp = Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.nassoc);
              var postfixOp = Text_Parsing_Parser_Combinators["<?>"](dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.postfix))("");
              var postfixP = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(postfixOp)(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Prelude.id(Prelude.categoryFn)));
              var prefixOp = Text_Parsing_Parser_Combinators["<?>"](dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.prefix))("");
              var prefixP = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(prefixOp)(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Prelude.id(Prelude.categoryFn)));
              var rassocOp = Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(dictMonad)(accum.rassoc);
              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (v) {
                  return Text_Parsing_Parser_Combinators["<?>"](dictMonad)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(v)(rassocOp)(prefixP)(term)(postfixP))(lassocP(dictMonad)(v)(lassocOp)(prefixP)(term)(postfixP)))(nassocP(dictMonad)(v)(nassocOp)(prefixP)(term)(postfixP)))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v)))("operator");
              });
          };
      };
  };
  var buildExprParser = function (dictMonad) {
      return function (operators) {
          return function (simpleExpr) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(makeParser(dictMonad))(simpleExpr)(operators);
          };
      };
  };
  exports["Infix"] = Infix;
  exports["Prefix"] = Prefix;
  exports["Postfix"] = Postfix;
  exports["AssocNone"] = AssocNone;
  exports["AssocLeft"] = AssocLeft;
  exports["AssocRight"] = AssocRight;
  exports["buildExprParser"] = buildExprParser;;
 
})(PS["Text.Parsing.Parser.Expr"] = PS["Text.Parsing.Parser.Expr"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Char = PS["Data.Char"];
  var Data_Array = PS["Data.Array"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];     
  var string = function (dictMonad) {
      return function (str) {
          return Text_Parsing_Parser.ParserT(function (v) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                  var $16 = Data_String.indexOf(str)(v.value0.input);
                  if ($16 instanceof Data_Maybe.Just && $16.value0 === 0) {
                      return {
                          consumed: true, 
                          input: Data_String.drop(Data_String.length(str))(v.value0.input), 
                          result: new Data_Either.Right(str), 
                          position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(str)
                      };
                  };
                  return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected " + str);
              })());
          });
      };
  };
  var anyChar = function (dictMonad) {
      return Text_Parsing_Parser.ParserT(function (v) {
          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
              var $27 = Data_String.charAt(0)(v.value0.input);
              if ($27 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Unexpected EOF");
              };
              if ($27 instanceof Data_Maybe.Just) {
                  return {
                      consumed: true, 
                      input: Data_String.drop(1)(v.value0.input), 
                      result: new Data_Either.Right($27.value0), 
                      position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(Data_Char.toString($27.value0))
                  };
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 33, column 1 - line 34, column 1: " + [ $27.constructor.name ]);
          })());
      });
  };
  var satisfy = function (dictMonad) {
      return function (f) {
          return Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictMonad))(function (v) {
              var $33 = f(v);
              if ($33) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
              };
              if (!$33) {
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String.fromChar(v) + "' did not satisfy predicate"));
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 40, column 1 - line 41, column 1: " + [ $33.constructor.name ]);
          }));
      };
  };
  var $$char = function (dictMonad) {
      return function (c) {
          return satisfy(dictMonad)(function (v) {
              return v === c;
          });
      };
  };
  var noneOf = function (dictMonad) {
      return function (ss) {
          return satisfy(dictMonad)(Prelude.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Prelude.eqChar))(ss));
      };
  };
  var oneOf = function (dictMonad) {
      return function (ss) {
          return satisfy(dictMonad)(Prelude.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Prelude.eqChar))(ss));
      };
  };
  var whiteSpace = function (dictMonad) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(satisfy(dictMonad)(function (c) {
          return c === "\n" || (c === "\r" || (c === " " || c === "\t"));
      })))(function (v) {
          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String.fromCharArray(v));
      });
  };
  exports["noneOf"] = noneOf;
  exports["oneOf"] = oneOf;
  exports["whiteSpace"] = whiteSpace;
  exports["char"] = $$char;
  exports["satisfy"] = satisfy;
  exports["anyChar"] = anyChar;
  exports["string"] = string;;
 
})(PS["Text.Parsing.Parser.String"] = PS["Text.Parsing.Parser.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Global = PS["Global"];
  var Data_String = PS["Data.String"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Either = PS["Data.Either"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Expr = PS["Text.Parsing.Parser.Expr"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var AST = PS["AST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var upperCaseLetter = Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)(Data_String.toCharArray("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
  var reservedWords = Data_List.toList(Data_Foldable.foldableArray)([ "if", "then", "else", "let", "in" ]);
  var notFollowedBy = function (p) {
      return Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(p))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Negated parser succeeded")))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Prelude.unit)));
  };
  var lowerCaseLetter = Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)(Data_String.toCharArray("_abcdefghijklmnopqrstuvwxyz"));
  var infixOperators = [ [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("."))(AST.Composition.value)(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("^"))(AST.Power.value)(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("*"))(AST.Mul.value)(Text_Parsing_Parser_Expr.AssocLeft.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("`div`"))(AST.Div.value)(Text_Parsing_Parser_Expr.AssocLeft.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("`mod`"))(AST.Mod.value)(Text_Parsing_Parser_Expr.AssocLeft.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("+"))(notFollowedBy(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("+")))))(AST.Add.value)(Text_Parsing_Parser_Expr.AssocLeft.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("-"))(AST.Sub.value)(Text_Parsing_Parser_Expr.AssocLeft.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(":"))(AST.Colon.value)(Text_Parsing_Parser_Expr.AssocRight.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("++"))(AST.Append.value)(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("=="))(AST.Equ.value)(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("/="))(AST.Neq.value)(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("<"))(notFollowedBy(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("=")))))(AST.Lt.value)(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(">"))(notFollowedBy(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("=")))))(AST.Gt.value)(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("<="))(AST.Leq.value)(Text_Parsing_Parser_Expr.AssocNone.value), Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(">="))(AST.Geq.value)(Text_Parsing_Parser_Expr.AssocNone.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("&&"))(AST.And.value)(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("||"))(AST.Or.value)(Text_Parsing_Parser_Expr.AssocRight.value) ], [ Data_Tuple_Nested.tuple3(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("$"))(AST.Dollar.value)(Text_Parsing_Parser_Expr.AssocRight.value) ] ];
  var opParser = Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(Data_Identity.monadIdentity)(Prelude["<$>"](Data_List.functorList)(Data_Tuple_Nested.uncurry3(function (p) {
      return function (op) {
          return function (v) {
              return Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(p)(Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(op));
          };
      };
  }))(Data_List.concat(Prelude["<$>"](Data_List.functorList)(Data_List.toList(Data_Foldable.foldableArray))(Data_List.toList(Data_Foldable.foldableArray)(infixOperators)))));
  var eatSpaces = Prelude["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)([ " ", "\t" ])));
  var list = function (expr) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("["))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(expr)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(",")))(eatSpaces))))(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("]"))(function () {
                          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.List(v));
                      });
                  });
              });
          });
      });
  };
  var listLit = function (bnd) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("["))(eatSpaces))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(bnd)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(",")))(eatSpaces))))(function (v) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("]")))(function () {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.ListLit(v));
              });
          });
      });
  };
  var spaced = function (p) {
      return Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(eatSpaces)(eatSpaces)(p));
  };
  var ifThenElse = function (expr) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("if"))(Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)([ " ", "\t", "\n", "(" ]))))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(spaced(expr))(function (v) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("then"))(function () {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(spaced(expr))(function (v1) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("else"))(function () {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(spaced(expr))(function (v2) {
                              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.IfExpr(v, v1, v2));
                          });
                      });
                  });
              });
          });
      });
  };
  var operatorTable = Prelude["<$>"](Prelude.functorArray)(Prelude["<$>"](Prelude.functorArray)(Data_Tuple_Nested.uncurry3(function (p) {
      return function (op) {
          return function (assoc) {
              return new Text_Parsing_Parser_Expr.Infix(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(spaced(p))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(AST.Binary.create(op))), assoc);
          };
      };
  })))(infixOperators);
  var tupleLit = function (bnd) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("("))(eatSpaces))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(bnd)(function (v) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(",")))(eatSpaces))(function () {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(bnd)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(",")))(eatSpaces))))(function (v1) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(")")))(function () {
                          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.NTupleLit(new Data_List.Cons(v, v1)));
                      });
                  });
              });
          });
      });
  };
  var tuplesOrBrackets = function (expr) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("("))(eatSpaces))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr)(function (v) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(","))(eatSpaces))(function () {
                      return Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(expr)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(",")))(eatSpaces)));
                  }))))(function (v1) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(")"))(function () {
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v);
                              };
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.NTuple(new Data_List.Cons(v, v1.value0)));
                              };
                              throw new Error("Failed pattern match at Parser line 188, column 1 - line 189, column 1: " + [ v1.constructor.name ]);
                          });
                      });
                  });
              });
          });
      });
  };
  var consLit = function (bnd) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("("))(eatSpaces))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(bnd)(function (v) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(":")))(eatSpaces))(function () {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(bnd)(function (v1) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(")")))(function () {
                          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.ConsLit(v, v1));
                      });
                  });
              });
          });
      });
  };
  var character$prime = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("\\"))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("n"))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("\n")))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("r"))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))("\r"))))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("\\")))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("\"")))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("'"))))(Text_Parsing_Parser_String.noneOf(Data_Identity.monadIdentity)([ "\\", "'", "\"" ]));
  var character = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("'"))(function () {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(character$prime)(function (v) {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("'"))(function () {
              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(AST.Char.create(Data_String.fromChar(v)));
          });
      });
  });
  var charList = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("\""))(function () {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(character$prime))(function (v) {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("\""))(function () {
              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.List(Prelude["<$>"](Data_List.functorList)(function ($74) {
                  return AST.Atom.create(AST.Char.create(Data_String.fromChar($74)));
              })(v)));
          });
      });
  });
  var bool = Text_Parsing_Parser_Combinators.choice(Data_List.foldableList)(Data_Identity.monadIdentity)(Data_List.toList(Data_Foldable.foldableArray)([ Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("True"))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.Bool(true))), Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("False"))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.Bool(false))) ]));
  var anyLetter = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(lowerCaseLetter)(upperCaseLetter))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("'"));
  var name = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(lowerCaseLetter)(function (v) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(anyLetter))(function (v1) {
          var nm = Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)(new Data_List.Cons(v, v1)));
          var $49 = Data_List.elemIndex(Prelude.eqString)(nm)(reservedWords);
          if ($49 instanceof Data_Maybe.Nothing) {
              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(nm);
          };
          if ($49 instanceof Data_Maybe.Just) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(nm + " is a reserved word!");
          };
          throw new Error("Failed pattern match at Parser line 82, column 1 - line 83, column 1: " + [ $49.constructor.name ]);
      });
  });
  var variable = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Name.create)(name);
  var anyDigit = Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)(Data_String.toCharArray("0123456789"));
  var $$int = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(anyDigit)(function (v) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(anyDigit))(function (v1) {
          var value = Data_Int.floor(Global.readInt(10)(Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)(new Data_List.Cons(v, v1)))));
          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.AInt(value));
      });
  });
  var atom = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))($$int)(variable))(bool))(character);
  var lit = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Lit.create)(atom);
  var binding = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (bnd) {
      return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(consLit(bnd)))(tupleLit(bnd)))(listLit(bnd)))(lit);
  });
  var lambda = function (expr) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("("))(eatSpaces))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("\\"))(eatSpaces))(function () {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepEndBy1(Data_Identity.monadIdentity)(binding)(eatSpaces))(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("->"))(eatSpaces))(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr)(function (v1) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(")"))(function () {
                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.Lambda(v, v1));
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var letExpr = function (expr) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("let"))(eatSpaces))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(binding)(function (v) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("=")))(eatSpaces))(function () {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr)(function (v1) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("in")))(eatSpaces))(function () {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr)(function (v2) {
                              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.LetExpr(v, v1, v2));
                          });
                      });
                  });
              });
          });
      });
  };
  var syntax = function (expr) {
      return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(ifThenElse(expr)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(letExpr(expr))))(applicationOrSingleExpression(expr));
  };
  var section = function (expr) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("("))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(syntax(expr)))(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(opParser)(function (v1) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(syntax(expr)))(function (v2) {
                                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(")"))(function () {
                                          if (v instanceof Data_Maybe.Nothing) {
                                              if (v2 instanceof Data_Maybe.Nothing) {
                                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.PrefixOp(v1));
                                              };
                                              if (v2 instanceof Data_Maybe.Just) {
                                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.SectR(v1, v2.value0));
                                              };
                                              throw new Error("Failed pattern match: " + [ v2.constructor.name ]);
                                          };
                                          if (v instanceof Data_Maybe.Just) {
                                              if (v2 instanceof Data_Maybe.Nothing) {
                                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.SectL(v.value0, v1));
                                              };
                                              if (v2 instanceof Data_Maybe.Just) {
                                                  return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Cannot have a section with two expressions!");
                                              };
                                              throw new Error("Failed pattern match: " + [ v2.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var base = function (expr) {
      return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(tuplesOrBrackets(expr)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(lambda(expr))))(section(expr)))(list(expr)))(charList))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Atom.create)(atom));
  };
  var applicationOrSingleExpression = function (expr) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(base(expr))(function (v) {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_Combinators.sepEndBy1(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(base(expr)))(eatSpaces)))))(function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.App(v, v1.value0));
              };
              throw new Error("Failed pattern match: " + [ v1.constructor.name ]);
          });
      });
  };
  var expression = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (expr) {
      return Text_Parsing_Parser_Expr.buildExprParser(Data_Identity.monadIdentity)(operatorTable)(syntax(expr));
  });
  var definition = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(name)(function (v) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepEndBy(Data_Identity.monadIdentity)(binding)(eatSpaces))(function (v1) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("="))(function () {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expression)(function (v2) {
                          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new AST.Def(v, v1, v2));
                      });
                  });
              });
          });
      });
  });
  var definitions = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.whiteSpace(Data_Identity.monadIdentity))(function () {
      return Text_Parsing_Parser_Combinators.sepEndBy(Data_Identity.monadIdentity)(definition)(Text_Parsing_Parser_String.whiteSpace(Data_Identity.monadIdentity));
  });
  var parseDefs = function (input) {
      return Text_Parsing_Parser.runParser(input)(definitions);
  };
  var parseExpr = function (input) {
      return Text_Parsing_Parser.runParser(input)(expression);
  };
  exports["parseDefs"] = parseDefs;
  exports["definitions"] = definitions;
  exports["definition"] = definition;
  exports["binding"] = binding;
  exports["tupleLit"] = tupleLit;
  exports["listLit"] = listLit;
  exports["consLit"] = consLit;
  exports["lit"] = lit;
  exports["parseExpr"] = parseExpr;
  exports["expression"] = expression;
  exports["letExpr"] = letExpr;
  exports["lambda"] = lambda;
  exports["charList"] = charList;
  exports["list"] = list;
  exports["section"] = section;
  exports["tuplesOrBrackets"] = tuplesOrBrackets;
  exports["ifThenElse"] = ifThenElse;
  exports["applicationOrSingleExpression"] = applicationOrSingleExpression;
  exports["syntax"] = syntax;
  exports["base"] = base;
  exports["spaced"] = spaced;
  exports["opParser"] = opParser;
  exports["operatorTable"] = operatorTable;
  exports["infixOperators"] = infixOperators;
  exports["notFollowedBy"] = notFollowedBy;
  exports["atom"] = atom;
  exports["variable"] = variable;
  exports["name"] = name;
  exports["character"] = character;
  exports["reservedWords"] = reservedWords;
  exports["anyLetter"] = anyLetter;
  exports["upperCaseLetter"] = upperCaseLetter;
  exports["lowerCaseLetter"] = lowerCaseLetter;
  exports["bool"] = bool;
  exports["anyDigit"] = anyDigit;
  exports["eatSpaces"] = eatSpaces;;
 
})(PS["Parser"] = PS["Parser"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_List = PS["Data.List"];
  var Data_Foreign = PS["Data.Foreign"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];
  var DOM = PS["DOM"];
  var Ace_Types = PS["Ace.Types"];
  var Ace_Editor = PS["Ace.Editor"];
  var Ace_EditSession = PS["Ace.EditSession"];
  var Ace_Range = PS["Ace.Range"];
  var Web = PS["Web"];
  var Parser = PS["Parser"];
  var Evaluator = PS["Evaluator"];
  var AST = PS["AST"];
  var JSHelpers = PS["JSHelpers"];
  var Ace = PS["Ace"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];     
  var wrapInDiv = function (name) {
      return function (jq) {
          return Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.create("<div></div>"))(Control_Monad_Eff_JQuery.addClass(name)))(Control_Monad_Eff_JQuery.append(jq));
      };
  };
  var removeMouseOver = Prelude["void"](Control_Monad_Eff.functorEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select(".mouseOver"))(Control_Monad_Eff_JQuery.removeClass("mouseOver")));
  var prepareContainer = function (name) {
      return Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#" + (name + "-container")))(Control_Monad_Eff_JQuery.clear);
  };
  var markText = function (line) {
      return function (column) {
          return function __do() {
              var v = Ace.edit("definitions")(Ace.ace)();
              var v1 = Ace_Editor.getSession(v)();
              var v2 = Ace_Range.create(line)(column)(100000)(100000)();
              return Prelude["void"](Control_Monad_Eff.functorEff)(Ace_EditSession.addMarker(v2)("syntaxError")("")(false)(v1))();
          };
      };
  };
  var makeClickable = function (jq) {
      var testEval = function (env) {
          return function (expr) {
              return function (jq1) {
                  return function __do() {
                      var v = Web.getPath(jq1)();
                      var $34 = Evaluator.evalPath1(env)(v)(expr);
                      if ($34 instanceof Data_Either.Left) {
                          return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_JQuery.setAttr("title")(Prelude.show(Evaluator.showEvalError)($34.value0))(jq1))();
                      };
                      if ($34 instanceof Data_Either.Right) {
                          return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Apply["*>"](Control_Monad_Eff.applyEff)(Control_Monad_Eff_JQuery.addClass("clickable")(jq1))(Control_Monad_Eff_JQuery.setAttr("title")("")(jq1)))();
                      };
                      throw new Error("Failed pattern match at Main line 146, column 3 - line 147, column 3: " + [ $34.constructor.name ]);
                  };
              };
          };
      };
      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Eff.monadEff)))(function (v) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(JSHelpers.jqMap(testEval(v.env)(v.expr))(jq));
      });
  };
  var getValue = function (jq) {
      return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Foreign.unsafeFromForeign)(Control_Monad_Eff_JQuery.getValue(jq));
  };
  var forIndex = function (dictApplicative) {
      return function (as) {
          return function (f) {
              return Data_List.zipWithA(dictApplicative)(f)(as)(Data_List[".."](0)(Data_List.length(as) - 1));
          };
      };
  };
  var clearInfo = Prelude["void"](Control_Monad_Eff.functorEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#info"))(Control_Monad_Eff_JQuery.clear));
  var showInfo = function (origin) {
      return function (msg) {
          return function __do() {
              var v = Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.create("<p></p>"))(Control_Monad_Eff_JQuery.addClass("info")))(Control_Monad_Eff_JQuery.setText("Error in " + (origin + (" => " + msg))))();
              clearInfo();
              Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#info"))(Control_Monad_Eff_JQuery.append(v))();
              return Prelude.unit;
          };
      };
  };
  var addMouseOverListener = function (jq) {
      var handler = function (jEvent) {
          return function (jq1) {
              return function __do() {
                  Control_Monad_Eff_JQuery.stopImmediatePropagation(jEvent)();
                  removeMouseOver();
                  Control_Monad_Eff_JQuery.addClass("mouseOver")(jq1)();
                  return Prelude.unit;
              };
          };
      };
      return Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_JQuery.on("mouseover")(handler)(jq));
  };
  var showHistoryList = function (exprs) {
      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.create("<div></div>"))(Control_Monad_Eff_JQuery.addClass("historyBox"))))(function (v) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(forIndex(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Eff.monadEff))(exprs)(function (expr) {
              return function (i) {
                  return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(showHistory(expr)(i))(function ($92) {
                      return Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(wrapInDiv("vertical")($92));
                  }))(function ($93) {
                      return Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v)($93));
                  });
              };
          }))(function () {
              return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Control_Monad_Eff.monadEff))(v);
          });
      });
  };
  var showHistory = function (expr) {
      return function (i) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.create("<div></div>"))(Control_Monad_Eff_JQuery.addClass("history"))))(function (v) {
              return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Web.exprToJQuery(expr))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))))(function () {
                  return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Eff.monadEff)))(function (v1) {
                      var deleteHandler = function (v2) {
                          return function (v3) {
                              var es$prime = (function () {
                                  var $46 = {};
                                  for (var $47 in v1) {
                                      if (v1.hasOwnProperty($47)) {
                                          $46[$47] = v1[$47];
                                      };
                                  };
                                  $46.history = Data_Maybe.maybe(v1.history)(Prelude.id(Prelude.categoryFn))(Data_List.deleteAt(i)(v1.history));
                                  return $46;
                              })();
                              return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_State_Trans.runStateT(showEvaluationState)(es$prime));
                          };
                      };
                      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.create("<button></button>"))(Control_Monad_Eff_JQuery.setText("Delete")))(Control_Monad_Eff_JQuery.addClass("delete")))(Control_Monad_Eff_JQuery.on("click")(deleteHandler))))(function (v2) {
                          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_JQuery.append(v2)(v)))(function () {
                              var restoreHandler = function (v3) {
                                  return function (v4) {
                                      var es$prime = (function () {
                                          var $51 = {};
                                          for (var $52 in v1) {
                                              if (v1.hasOwnProperty($52)) {
                                                  $51[$52] = v1[$52];
                                              };
                                          };
                                          $51.history = Data_List.drop(i + 1 | 0)(v1.history);
                                          $51.expr = Data_Maybe.maybe(v1.expr)(Prelude.id(Prelude.categoryFn))(Data_List["!!"](v1.history)(i));
                                          return $51;
                                      })();
                                      return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_State_Trans.runStateT(showEvaluationState)(es$prime));
                                  };
                              };
                              return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.create("<button></button>"))(Control_Monad_Eff_JQuery.setText("Restore")))(Control_Monad_Eff_JQuery.addClass("restore")))(Control_Monad_Eff_JQuery.on("click")(restoreHandler))))(function (v3) {
                                  return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_JQuery.append(v3)(v)))(function () {
                                      return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Control_Monad_Eff.monadEff))(v);
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var showEvaluationState = Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(prepareContainer("output")))(function (v) {
      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(prepareContainer("history")))(function (v1) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Eff.monadEff)))(function (v2) {
              return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_Console.print(AST.showExpr)(v2.expr)))(function () {
                  return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Web.exprToJQuery(v2.expr))(wrapInDiv("output")))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v))))(function () {
                      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(showHistoryList(v2.history))(function ($94) {
                          return Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude.flip(Control_Monad_Eff_JQuery.append)(v1)($94));
                      }))(function () {
                          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_JQuery.find(".binary, .app, .func, .list, .if")(v)))(makeClickable))(function () {
                              return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_JQuery.find(".clickable")(v)))(addMouseOverListener))(addClickListener))(function () {
                                  return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.body)(Control_Monad_Eff_JQuery.on("mouseover")(function (v3) {
                                      return function (v4) {
                                          return removeMouseOver;
                                      };
                                  }))))(function () {
                                      return Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit));
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  var evalExpr = function (path) {
      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Eff.monadEff)))(function (v) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_Console.print(Evaluator.showPath)(path)))(function () {
              var $63 = Evaluator.evalPath1(v.env)(path)(v.expr);
              if ($63 instanceof Data_Either.Left) {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(showInfo("execution")(Prelude.show(Evaluator.showEvalError)($63.value0)));
              };
              if ($63 instanceof Data_Either.Right) {
                  return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Eff.monadEff))(function (es) {
                      var $65 = {};
                      for (var $66 in es) {
                          if (es.hasOwnProperty($66)) {
                              $65[$66] = es[$66];
                          };
                      };
                      $65.expr = $63.value0;
                      return $65;
                  }))(function () {
                      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Eff.monadEff))(function (es) {
                          var $67 = {};
                          for (var $68 in es) {
                              if (es.hasOwnProperty($68)) {
                                  $67[$68] = es[$68];
                              };
                          };
                          $67.history = Data_List[":"](v.expr)(es.history);
                          return $67;
                      }))(function () {
                          return showEvaluationState;
                      });
                  });
              };
              throw new Error("Failed pattern match: " + [ $63.constructor.name ]);
          });
      });
  };
  var addClickListener = function (jq) {
      var handler = function (evaluationState) {
          return function (jEvent) {
              return function (jq1) {
                  return function __do() {
                      Control_Monad_Eff_JQuery.stopImmediatePropagation(jEvent)();
                      var v = Web.getPath(jq1)();
                      return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_State_Trans.runStateT(evalExpr(v))(evaluationState))();
                  };
              };
          };
      };
      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Eff.monadEff)))(function (v) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_State_Trans.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_JQuery.on("click")(handler(v))(jq));
      });
  };
  var startEvaluation = function __do() {
      var v = Ace.edit("definitions")(Ace.ace)();
      var v1 = Ace_Editor.getValue(v)();
      var v2 = Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#input"))(getValue)();
      var $77 = Parser.parseExpr(v2);
      if ($77 instanceof Data_Either.Left) {
          return showInfo("Expression")(Prelude.show(Text_Parsing_Parser.showParseError)($77.value0))();
      };
      if ($77 instanceof Data_Either.Right) {
          var $79 = Prelude["<$>"](Data_Either.functorEither)(Evaluator.defsToEnv)(Parser.parseDefs(v1));
          if ($79 instanceof Data_Either.Left) {
              showInfo("Definitions")(Prelude.show(Text_Parsing_Parser.showParseError)($79.value0))();
              return markText($79.value0.value0.position.value0.line - 1)($79.value0.value0.position.value0.column)();
          };
          if ($79 instanceof Data_Either.Right) {
              clearInfo();
              return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_State_Trans.runStateT(showEvaluationState)({
                  env: $79.value0, 
                  expr: $77.value0, 
                  history: Data_List.Nil.value
              }))();
          };
          throw new Error("Failed pattern match at Main line 43, column 1 - line 44, column 1: " + [ $79.constructor.name ]);
      };
      throw new Error("Failed pattern match at Main line 43, column 1 - line 44, column 1: " + [ $77.constructor.name ]);
  };
  var main = Control_Monad_Eff_JQuery.ready(function __do() {
      Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#input"))(Control_Monad_Eff_JQuery.on("change")(function (v) {
          return function (v1) {
              return startEvaluation;
          };
      })))(Control_Monad_Eff_JQuery.on("keyup")(function (e) {
          return function (v) {
              var $91 = JSHelpers.isEnterKey(e);
              if ($91) {
                  return startEvaluation;
              };
              if (!$91) {
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
              };
              throw new Error("Failed pattern match at Main line 30, column 1 - line 31, column 1: " + [ $91.constructor.name ]);
          };
      }))();
      return startEvaluation();
  });
  exports["getValue"] = getValue;
  exports["evalExpr"] = evalExpr;
  exports["removeMouseOver"] = removeMouseOver;
  exports["addClickListener"] = addClickListener;
  exports["addMouseOverListener"] = addMouseOverListener;
  exports["makeClickable"] = makeClickable;
  exports["wrapInDiv"] = wrapInDiv;
  exports["prepareContainer"] = prepareContainer;
  exports["clearInfo"] = clearInfo;
  exports["showInfo"] = showInfo;
  exports["showHistory"] = showHistory;
  exports["showHistoryList"] = showHistoryList;
  exports["forIndex"] = forIndex;
  exports["showEvaluationState"] = showEvaluationState;
  exports["markText"] = markText;
  exports["startEvaluation"] = startEvaluation;
  exports["main"] = main;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
