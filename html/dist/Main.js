// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;
    
    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;
    
    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;
    
    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;
    
    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;
    
    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;
    
    function numComplement(n) {
      return ~n;
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    
    /**
     *  | Addition and multiplication
     */
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
        this["/"] = $div;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
        this.mod = mod;
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var $div = function (dict) {
        return dict["/"];
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    
    /**
     *  | Addition and multiplication
     */
    var $plus = function (dict) {
        return dict["+"];
    };
    
    /**
     *  | Addition and multiplication
     */
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = numMod;
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    
    /**
     *  | Addition and multiplication
     */
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var showString = new Show(showStringImpl);
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_168) {
        if (_168) {
            return "true";
        };
        if (!_168) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    
    /**
     *  | An alias for `true`, which can be useful in guard clauses:
     *  |
     *  | E.g.
     *  |
     *  |     max x y | x >= y = x
     *  |             | otherwise = y
     */
    var otherwise = true;
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
        return semiringNumber;
    }, function (_169) {
        return function (_170) {
            return 0;
        };
    });
    var liftM1 = function (__dict_Monad_7) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_7)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    
    /**
     *  | Flips the order of the arguments to a function of two arguments.
     */
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    
    /**
     *  | Returns its first argument and ignores its second.
     */
    var $$const = function (_163) {
        return function (_164) {
            return _163;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _764 = compare(__dict_Ord_12)(a1)(a2);
                if (_764 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _765 = compare(__dict_Ord_13)(a1)(a2);
                if (_765 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _766 = compare(__dict_Ord_14)(a1)(a2);
                if (_766 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_15) {
        return function (a1) {
            return function (a2) {
                var _767 = compare(__dict_Ord_15)(a1)(a2);
                if (_767 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Bits: Bits, 
        Ord: Ord, 
        Eq: Eq, 
        Ring: Ring, 
        ModuloSemiring: ModuloSemiring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "||": $bar$bar, 
        "&&": $amp$amp, 
        complement: complement, 
        ">=": $greater$eq, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "%": $percent, 
        "-": $minus, 
        "/": $div, 
        "*": $times, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        liftM1: liftM1, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "$": $dollar, 
        id: id, 
        "<<<": $less$less$less, 
        "const": $$const, 
        flip: flip, 
        otherwise: otherwise, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showString: showString, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showArray: showArray, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        moduloSemiringNumber: moduloSemiringNumber, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        eqBoolean: eqBoolean, 
        ordNumber: ordNumber, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.$$Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var floor = Math.floor;;
    function pow(n){  return function(p) {    return Math.pow(n, p);  }};
    return {
        pow: pow, 
        floor: floor
    };
})();
var PS = PS || {};
PS.Global = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function readInt(radix) {
    return function(n) {
      return parseInt(n, radix);
    };
  }
  ;
    return {
        readInt: readInt
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;
    return {
        runFn4: runFn4, 
        runFn2: runFn2, 
        runFn1: runFn1
    };
})();
var PS = PS || {};
PS.Data_Char = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     * | A unicode character.
     */
    var Char = function (x) {
        return x;
    };
    
    /**
     *  | Returns the string of length `1` containing only the given character.
     */
    var charString = function (_186) {
        return _186;
    };
    return {
        charString: charString
    };
})();
var PS = PS || {};
PS.Control_Monad_Trans = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | The `MonadTrans` type class represents _monad transformers_.
     *  |
     *  | A monad transformer is a type constructor of kind `(* -> *) -> * -> *`, which
     *  | takes a `Monad` as its first argument, and returns another `Monad`.
     *  |
     *  | This allows us to add additional effects to an existing monad. By iterating this
     *  | process, we create monad transformer _stacks_, which contain all of the effects
     *  | required for a particular computation.
     *  | 
     *  | The laws state that `lift` is a `Monad` morphism.
     *  |
     *  | Laws:
     *  |
     *  | - `lift (pure a) = pure a`
     *  | - `lift (do { x <- m ; y }) = do { x <- lift m ; lift y }`
     */
    var MonadTrans = function (lift) {
        this.lift = lift;
    };
    
    /**
     *  | The `MonadTrans` type class represents _monad transformers_.
     *  |
     *  | A monad transformer is a type constructor of kind `(* -> *) -> * -> *`, which
     *  | takes a `Monad` as its first argument, and returns another `Monad`.
     *  |
     *  | This allows us to add additional effects to an existing monad. By iterating this
     *  | process, we create monad transformer _stacks_, which contain all of the effects
     *  | required for a particular computation.
     *  | 
     *  | The laws state that `lift` is a `Monad` morphism.
     *  |
     *  | Laws:
     *  |
     *  | - `lift (pure a) = pure a`
     *  | - `lift (do { x <- m ; y }) = do { x <- lift m ; lift y }`
     */
    var lift = function (dict) {
        return dict.lift;
    };
    return {
        MonadTrans: MonadTrans, 
        lift: lift
    };
})();
var PS = PS || {};
PS.Control_Monad_Error = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | The `Error` type class represents _error_ types, which can be 
     *  | constructed from error message strings.
     */
    var $$Error = function (noMsg, strMsg) {
        this.noMsg = noMsg;
        this.strMsg = strMsg;
    };
    
    /**
     *  | The `Error` type class represents _error_ types, which can be 
     *  | constructed from error message strings.
     */
    var strMsg = function (dict) {
        return dict.strMsg;
    };
    var errorString = new $$Error("", Prelude.id(Prelude.categoryArr));
    return {
        "Error": $$Error, 
        strMsg: strMsg, 
        errorString: errorString
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    
    function runPure(f) {
      return f();
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        runPure: runPure, 
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    var print = function (__dict_Show_17) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_17)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | A version of `Lazy` for type constructors of one type argument.
     */
    var Lazy1 = function (defer1) {
        this.defer1 = defer1;
    };
    
    /**
     *  | A version of `Lazy` for type constructors of one type argument.
     */
    var defer1 = function (dict) {
        return dict.defer1;
    };
    
    /**
     *  | A version of `fix` for type constructors of one type argument.
     */
    var fix1 = function (__dict_Lazy1_32) {
        return function (f) {
            return defer1(__dict_Lazy1_32)(function (_207) {
                return f(fix1(__dict_Lazy1_32)(f));
            });
        };
    };
    return {
        Lazy1: Lazy1, 
        fix1: fix1, 
        defer1: defer1
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | Forwards Kleisli composition.
     *  |
     *  | For example:
     *  | 
     *  | ```purescript
     *  | import Data.Array (head, tail)
     *  | 
     *  | third = tail >=> tail >=> head
     *  | ```
     */
    var $greater$eq$greater = function (__dict_Bind_42) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_42)(f(a))(g);
                };
            };
        };
    };
    
    /**
     *  | A version of `(>>=)` with its arguments flipped.
     */
    var $eq$less$less = function (__dict_Bind_43) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_43)(m)(f);
            };
        };
    };
    return {
        ">=>": $greater$eq$greater, 
        "=<<": $eq$less$less
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | Combine two effectful actions, keeping only the result of the second.
     */
    var $times$greater = function (__dict_Apply_48) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_48)(Prelude["<$>"](__dict_Apply_48["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    
    /**
     *  | Lift a function of two arguments to a function which accepts and returns
     *  | values wrapped with the type constructor `f`.
     */
    var lift2 = function (__dict_Apply_52) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_52)(Prelude["<$>"](__dict_Apply_52["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    return {
        lift2: lift2, 
        "*>": $times$greater
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | The `Alt` type class identifies an associative operation on a type
     *  | constructor.  It is similar to `Semigroup`, except that it applies to
     *  | types of kind `* -> *`, like `Array` or `List`, rather than concrete types
     *  | `String` or `Number`.
     *  |
     *  | `Alt` instances are required to satisfy the following laws:
     *  |
     *  | - Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`
     *  | - Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`
     *  |
     *  | For example, the `Array` (`[]`) type is an instance of `Alt`, where
     *  | `(<|>)` is defined to be concatenation.
     */
    var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    
    /**
     *  | The `Alt` type class identifies an associative operation on a type
     *  | constructor.  It is similar to `Semigroup`, except that it applies to
     *  | types of kind `* -> *`, like `Array` or `List`, rather than concrete types
     *  | `String` or `Number`.
     *  |
     *  | `Alt` instances are required to satisfy the following laws:
     *  |
     *  | - Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`
     *  | - Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`
     *  |
     *  | For example, the `Array` (`[]`) type is an instance of `Alt`, where
     *  | `(<|>)` is defined to be concatenation.
     */
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        Alt: Alt, 
        "<|>": $less$bar$greater
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    
    /**
     *  | The `Plus` type class extends the `Alt` type class with a value that
     *  | should be the left and right identity for `(<|>)`.
     *  |
     *  | It is similar to `Monoid`, except that it applies to types of
     *  | kind `* -> *`, like `Array` or `List`, rather than concrete types like
     *  | `String` or `Number`.
     *  |
     *  | `Plus` instances should satisfy the following laws:
     *  |
     *  | - Left identity: `empty <|> x == x`
     *  | - Right identity: `x <|> empty == x`
     *  | - Annihilation: `f <$> empty == empty`
     */
    var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    
    /**
     *  | The `Plus` type class extends the `Alt` type class with a value that
     *  | should be the left and right identity for `(<|>)`.
     *  |
     *  | It is similar to `Monoid`, except that it applies to types of
     *  | kind `* -> *`, like `Array` or `List`, rather than concrete types like
     *  | `String` or `Number`.
     *  |
     *  | `Plus` instances should satisfy the following laws:
     *  |
     *  | - Left identity: `empty <|> x == x`
     *  | - Right identity: `x <|> empty == x`
     *  | - Annihilation: `f <$> empty == empty`
     */
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    
    /**
     *  | The `Alternative` type class has no members of its own; it just specifies
     *  | that the type constructor has both `Applicative` and `Plus` instances.
     *  |
     *  | Types which have `Alternative` instances should also satisfy the following
     *  | laws:
     *  |
     *  | - Distributivity: `(f <|> g) <*> x == (f <*> x) <|> (g <*> x)`
     *  | - Annihilation: `empty <*> f = empty`
     */
    var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var some = function (__dict_Alternative_53) {
        return function (__dict_Lazy1_54) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_53["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_53["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_54)(function (_209) {
                    return many(__dict_Alternative_53)(__dict_Lazy1_54)(v);
                }));
            };
        };
    };
    var many = function (__dict_Alternative_55) {
        return function (__dict_Lazy1_56) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_55["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_55)(__dict_Lazy1_56)(v))(Prelude.pure(__dict_Alternative_55["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Left = (function () {
        function Left(value0) {
            this.value0 = value0;
        };
        Left.create = function (value0) {
            return new Left(value0);
        };
        return Left;
    })();
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Right` with the `<$>` operator:
     *  |
     *  | ``` purescript
     *  | f <$> Right x == Right (f x)
     *  | ```
     *  |
     *  | `Left` values are untouched:
     *  |
     *  | ``` purescript
     *  | f <$> Left y == Left y
     *  | ```
     */
    var functorEither = new Prelude.Functor(function (_216) {
        return function (_217) {
            if (_217 instanceof Left) {
                return new Left(_217.value0);
            };
            if (_217 instanceof Right) {
                return new Right(_216(_217.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    
    /**
     *  | The `Apply` instance allows functions contained within a `Right` to
     *  | transform a value contained within a `Right` using the `(<*>)` operator:
     *  |
     *  | ``` purescript
     *  | Right f <*> Right x == Right (f x)
     *  | ```
     *  |
     *  | `Left` values are left untouched:
     *  |
     *  | ``` purescript
     *  | Left f <*> Right x == Left x
     *  | Right f <*> Left y == Left y
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
     *  | pure function to take `Either`-typed arguments so `f :: a -> b -> c`
     *  | becomes `f :: Either l a -> Either l b -> Either l c`:
     *  |
     *  | ``` purescript
     *  | f <$> Right x <*> Right y == Right (f x y)
     *  | ```
     *  |
     *  | The `Left`-preserving behaviour of both operators means the result of
     *  | an expression like the above but where any one of the values is `Left`
     *  | means the whole result becomes `Left` also, taking the first `Left` value
     *  | found:
     *  |
     *  | ``` purescript
     *  | f <$> Left x <*> Right y == Left x
     *  | f <$> Right x <*> Left y == Left y
     *  | f <$> Left x <*> Left y == Left x
     *  | ```
     */
    var applyEither = new Prelude.Apply(function (_218) {
        return function (_219) {
            if (_218 instanceof Left) {
                return new Left(_218.value0);
            };
            if (_218 instanceof Right) {
                return Prelude["<$>"](functorEither)(_218.value0)(_219);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    return {
        Left: Left, 
        Right: Right, 
        functorEither: functorEither, 
        applyEither: applyEither
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    return {
        Nothing: Nothing, 
        Just: Just
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    
    /**
     *  | An infix synonym for `range`.
     */
    var $dot$dot = range;
    
    /**
     *  | This operator provides a safe way to read a value at a particular index from an array.
     *  |
     *  | This function returns `Nothing` if the index is out-of-bounds.
     *  |
     *  | `Data.Array.Unsafe` provides the `unsafeIndex` function, which is an unsafe version of
     *  | this function without bounds checking.
     */
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            var _781 = n < 0 || (n >= length(xs) || isInt(n));
            if (_781) {
                return Data_Maybe.Nothing.value;
            };
            if (!_781) {
                return new Data_Maybe.Just(xs[n]);
            };
            throw new Error("Failed pattern match");
        };
    };
    var semigroupArray = new Prelude.Semigroup(append);
    
    /**
     *  | Remove the duplicates from an array, where element equality is determined by the 
     *  | specified equivalence relation, creating a new array.
     */
    var nubBy = function (_262) {
        return function (_263) {
            if (_263.length === 0) {
                return [  ];
            };
            if (_263.length >= 1) {
                var _785 = _263.slice(1);
                return Prelude[":"](_263[0])(nubBy(_262)(filter(function (y) {
                    return !_262(_263[0])(y);
                })(_785)));
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     *  | Remove the duplicates from an array, creating a new array.
     */
    var nub = function (__dict_Eq_79) {
        return nubBy(Prelude["=="](__dict_Eq_79));
    };
    
    /**
     *  | Calculate the intersection of two arrays, using the specified equivalence relation
     *  | to compare elements, creating a new array.
     */
    var intersectBy = function (_259) {
        return function (_260) {
            return function (_261) {
                if (_260.length === 0) {
                    return [  ];
                };
                if (_261.length === 0) {
                    return [  ];
                };
                var el = function (x) {
                    return findIndex(_259(x))(_261) >= 0;
                };
                return filter(el)(_260);
            };
        };
    };
    
    /**
     *  | Calculate the intersection of two arrays, creating a new array.
     */
    var intersect = function (__dict_Eq_80) {
        return intersectBy(Prelude["=="](__dict_Eq_80));
    };
    var functorArray = new Prelude.Functor(map);
    
    /**
     *  | Delete the first element of an array which matches the specified value, under the
     *  | equivalence relation provided in the first argument, creating a new array.
     */
    var deleteBy = function (_256) {
        return function (_257) {
            return function (_258) {
                if (_258.length === 0) {
                    return [  ];
                };
                var _792 = findIndex(_256(_257))(_258);
                if (_792 < 0) {
                    return _258;
                };
                return deleteAt(_792)(1)(_258);
            };
        };
    };
    
    /**
     *  | Delete the first element of an array which is equal to the specified value,
     *  | creating a new array.
     */
    var $$delete = function (__dict_Eq_85) {
        return deleteBy(Prelude["=="](__dict_Eq_85));
    };
    
    /**
     *  | Delete the first occurrence of each element in the second array from the first array, 
     *  | creating a new array.
     */
    var $bslash$bslash = function (__dict_Eq_86) {
        return function (xs) {
            return function (ys) {
                var go = function (__copy__264) {
                    return function (__copy__265) {
                        var _264 = __copy__264;
                        var _265 = __copy__265;
                        tco: while (true) {
                            if (_265.length === 0) {
                                return _264;
                            };
                            if (_264.length === 0) {
                                return [  ];
                            };
                            if (_265.length >= 1) {
                                var _796 = _265.slice(1);
                                var __tco__264 = $$delete(__dict_Eq_86)(_265[0])(_264);
                                _264 = __tco__264;
                                _265 = _796;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return go(xs)(ys);
            };
        };
    };
    return {
        nubBy: nubBy, 
        nub: nub, 
        zipWith: zipWith, 
        range: range, 
        filter: filter, 
        concatMap: concatMap, 
        intersect: intersect, 
        intersectBy: intersectBy, 
        "\\\\": $bslash$bslash, 
        "delete": $$delete, 
        deleteBy: deleteBy, 
        updateAt: updateAt, 
        deleteAt: deleteAt, 
        drop: drop, 
        concat: concat, 
        append: append, 
        findIndex: findIndex, 
        length: length, 
        map: map, 
        "..": $dot$dot, 
        "!!": $bang$bang, 
        functorArray: functorArray, 
        semigroupArray: semigroupArray
    };
})();
var PS = PS || {};
PS.Data_Foreign = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Array = PS.Data_Array;
    var Data_Either = PS.Data_Either;
    
  function unsafeFromForeign(value) {
    return value;
  }
  ;
    return {
        unsafeFromForeign: unsafeFromForeign
    };
})();
var PS = PS || {};
PS.Control_Monad_JQuery = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    
  function ready(func) {
    return function () {
      jQuery(document).ready(func);
    };
  }
  ;
    
  function select(selector) {
    return function () {
      return jQuery(selector);
    };
  }
  ;
    
  function find(selector) {
    return function(ob) {
      return function () {
        return ob.find(selector);
      };
    };
  }
  ;
    
  function create(html) {
    return function () {
      return jQuery(html);
    };
  }
  ;
    
  function toggleClass$prime(cls) {
    return function(flag) {
      return function(ob) {
        return function () {
          return ob.toggleClass(cls, flag);
        };
      };
    };
  }
  ;
    
  function setProp(p) {
    return function(val) {
      return function(ob) {
        return function () {
          return ob.prop(p, val);
        };
      };
    };
  }
  ;
    
  function getProp(p) {
    return function(ob) {
      return function () {
        return ob.prop(p);
      };
    };
  }
  ;
    
  function append(ob1) {
    return function(ob) {
      return function () {
        return ob.append(ob1);
      };
    };
  }
  ;
    
  function clear(ob) {
    return function () {
      return ob.empty();
    };
  }
  ;
    
  function body() {
    return jQuery(document.body);
  }
  ;
    
  function setText(text) {
    return function(ob) {
      return function() {
        return ob.text(text);
      };
    };
  }
  ;
    
  function getValue(ob) {
    return function() {
      return ob.val();
    };
  }
  ;
    
  function on(evt) {
    return function(act) {
      return function(ob) {
        return function() {
          return ob.on(evt, function(e) {
            act(e)(jQuery(this))();
          });
        };
      };
    };
  }
  ;
    
  function stopImmediatePropagation(e) {
    return function() {
      e.stopImmediatePropagation();
    };
  }
  ;
    var removeClass = function (cls) {
        return toggleClass$prime(cls)(false);
    };
    var addClass = function (cls) {
        return toggleClass$prime(cls)(true);
    };
    return {
        stopImmediatePropagation: stopImmediatePropagation, 
        on: on, 
        getValue: getValue, 
        setText: setText, 
        body: body, 
        clear: clear, 
        append: append, 
        getProp: getProp, 
        setProp: setProp, 
        removeClass: removeClass, 
        addClass: addClass, 
        "toggleClass'": toggleClass$prime, 
        create: create, 
        find: find, 
        select: select, 
        ready: ready
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidString = new Monoid(function () {
        return Prelude.semigroupString;
    }, "");
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidString: monoidString, 
        monoidArray: monoidArray
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | A simple product type for wrapping a pair of component values.
     */
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    
    /**
     *  | Returns the second component of a tuple.
     */
    var snd = function (_382) {
        return _382.value1;
    };
    return {
        Tuple: Tuple, 
        snd: snd
    };
})();
var PS = PS || {};
PS.Control_Monad_Error_Trans = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Plus = PS.Control_Plus;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Data_Either = PS.Data_Either;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Tuple = PS.Data_Tuple;
    
    /**
     *  | The error monad transformer
     *  |
     *  | This monad transformer extends the base monad with the ability to throw and handle 
     *  | errors.
     *  |
     *  | The `MonadError` type class describes the operations supported by this monad.
     */
    var ErrorT = function (x) {
        return x;
    };
    
    /**
     *  | Run a computation in the `ErrorT` monad.
     */
    var runErrorT = function (_432) {
        return _432;
    };
    var functorErrorT = function (__dict_Functor_178) {
        return new Prelude.Functor(function (f) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(ErrorT)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](__dict_Functor_178)(Prelude["<$>"](Data_Either.functorEither)(f)))(runErrorT));
        });
    };
    var applyErrorT = function (__dict_Apply_180) {
        return new Prelude.Apply(function (_433) {
            return function (_434) {
                return ErrorT(Prelude["<*>"](__dict_Apply_180)(Prelude["<$>"](__dict_Apply_180["__superclass_Prelude.Functor_0"]())(Control_Apply.lift2(Data_Either.applyEither)(Prelude["$"]))(_433))(_434));
            };
        }, function () {
            return functorErrorT(__dict_Apply_180["__superclass_Prelude.Functor_0"]());
        });
    };
    var bindErrorT = function (__dict_Monad_179) {
        return new Prelude.Bind(function (m) {
            return function (f) {
                return ErrorT(Prelude[">>="](__dict_Monad_179["__superclass_Prelude.Bind_1"]())(runErrorT(m))(function (_13) {
                    if (_13 instanceof Data_Either.Left) {
                        return Prelude["return"](__dict_Monad_179)(new Data_Either.Left(_13.value0));
                    };
                    if (_13 instanceof Data_Either.Right) {
                        return runErrorT(f(_13.value0));
                    };
                    throw new Error("Failed pattern match");
                }));
            };
        }, function () {
            return applyErrorT((__dict_Monad_179["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]());
        });
    };
    var applicativeErrorT = function (__dict_Applicative_181) {
        return new Prelude.Applicative(function () {
            return applyErrorT(__dict_Applicative_181["__superclass_Prelude.Apply_0"]());
        }, function (a) {
            return ErrorT(Prelude.pure(__dict_Applicative_181)(new Data_Either.Right(a)));
        });
    };
    var monadErrorT = function (__dict_Monad_175) {
        return new Prelude.Monad(function () {
            return applicativeErrorT(__dict_Monad_175["__superclass_Prelude.Applicative_0"]());
        }, function () {
            return bindErrorT(__dict_Monad_175);
        });
    };
    var altErrorT = function (__dict_Monad_184) {
        return new Control_Alt.Alt(function (x) {
            return function (y) {
                return ErrorT(Prelude[">>="](__dict_Monad_184["__superclass_Prelude.Bind_1"]())(runErrorT(x))(function (e) {
                    if (e instanceof Data_Either.Left) {
                        return runErrorT(y);
                    };
                    return Prelude["return"](__dict_Monad_184)(e);
                }));
            };
        }, function () {
            return functorErrorT(((__dict_Monad_184["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        });
    };
    var plusErrorT = function (__dict_Monad_170) {
        return function (__dict_Error_171) {
            return new Control_Plus.Plus(function () {
                return altErrorT(__dict_Monad_170);
            }, Prelude["return"](__dict_Monad_170)(Data_Either.Left.create(Control_Monad_Error.strMsg(__dict_Error_171)("No alternative"))));
        };
    };
    return {
        ErrorT: ErrorT, 
        runErrorT: runErrorT, 
        functorErrorT: functorErrorT, 
        applyErrorT: applyErrorT, 
        applicativeErrorT: applicativeErrorT, 
        altErrorT: altErrorT, 
        plusErrorT: plusErrorT, 
        bindErrorT: bindErrorT, 
        monadErrorT: monadErrorT
    };
})();
var PS = PS || {};
PS.Control_Monad_State_Trans = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Lazy = PS.Control_Lazy;
    
    /**
     *  | The state monad transformer.
     *  |
     *  | This monad transformer extends the base monad with the operations `get` 
     *  | and `put` which can be used to model a single piece of mutable state.
     *  |
     *  | The `MonadState` type class describes the operations supported by this monad.
     */
    var StateT = function (x) {
        return x;
    };
    
    /**
     *  | Run a computation in the `StateT` monad.
     */
    var runStateT = function (_444) {
        return _444;
    };
    var monadTransStateT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_213) {
        return function (m) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_213["__superclass_Prelude.Bind_1"]())(m)(function (_22) {
                    return Prelude["return"](__dict_Monad_213)(new Data_Tuple.Tuple(_22, s));
                });
            };
        };
    });
    var liftCatchState = function ($$catch) {
        return function (m) {
            return function (h) {
                return StateT(function (s) {
                    return $$catch(runStateT(m)(s))(function (e) {
                        return runStateT(h(e))(s);
                    });
                });
            };
        };
    };
    
    /**
     *  | Run a computation in the `StateT` monad discarding the result.
     */
    var execStateT = function (__dict_Apply_219) {
        return function (m) {
            return function (s) {
                return Prelude["<$>"](__dict_Apply_219["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runStateT(m)(s));
            };
        };
    };
    var monadStateT = function (__dict_Monad_214) {
        return new Prelude.Monad(function () {
            return applicativeStateT(__dict_Monad_214);
        }, function () {
            return bindStateT(__dict_Monad_214);
        });
    };
    var functorStateT = function (__dict_Monad_218) {
        return new Prelude.Functor(Prelude.liftM1(monadStateT(__dict_Monad_218)));
    };
    var bindStateT = function (__dict_Monad_221) {
        return new Prelude.Bind(function (_445) {
            return function (_446) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_221["__superclass_Prelude.Bind_1"]())(_445(s))(function (_21) {
                        return runStateT(_446(_21.value0))(_21.value1);
                    });
                };
            };
        }, function () {
            return applyStateT(__dict_Monad_221);
        });
    };
    var applyStateT = function (__dict_Monad_222) {
        return new Prelude.Apply(Prelude.ap(monadStateT(__dict_Monad_222)), function () {
            return functorStateT(__dict_Monad_222);
        });
    };
    var applicativeStateT = function (__dict_Monad_223) {
        return new Prelude.Applicative(function () {
            return applyStateT(__dict_Monad_223);
        }, function (a) {
            return StateT(function (s) {
                return Prelude["return"](__dict_Monad_223)(new Data_Tuple.Tuple(a, s));
            });
        });
    };
    return {
        StateT: StateT, 
        liftCatchState: liftCatchState, 
        execStateT: execStateT, 
        runStateT: runStateT, 
        functorStateT: functorStateT, 
        applyStateT: applyStateT, 
        applicativeStateT: applicativeStateT, 
        bindStateT: bindStateT, 
        monadStateT: monadStateT, 
        monadTransStateT: monadTransStateT
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Maybe_Trans = PS.Control_Monad_Maybe_Trans;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Control_Monad_Reader_Trans = PS.Control_Monad_Reader_Trans;
    var Control_Monad_RWS_Trans = PS.Control_Monad_RWS_Trans;
    
    /**
     *  | The `MonadEff` class captures those monads which support native effects.
     *  |
     *  | Instances are provided for `Eff` itself, and the standard monad transformers.
     *  |
     *  | `liftEff` can be used in any appropriate monad transformer stack to lift an action
     *  | of type `Eff eff a` into the monad.
     *  |
     *  | Note that `MonadEff` is parameterized by the row of effects, so type inference can be
     *  | tricky. It is generally recommended to either work with a polymorphic row of effects,
     *  | or a concrete, closed row of effects such as `(trace :: Trace)`.
     */
    var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
        this.liftEff = liftEff;
    };
    var monadEffEff = new MonadEff(function () {
        return Control_Monad_Eff.monadEff;
    }, Prelude.id(Prelude.categoryArr));
    
    /**
     *  | The `MonadEff` class captures those monads which support native effects.
     *  |
     *  | Instances are provided for `Eff` itself, and the standard monad transformers.
     *  |
     *  | `liftEff` can be used in any appropriate monad transformer stack to lift an action
     *  | of type `Eff eff a` into the monad.
     *  |
     *  | Note that `MonadEff` is parameterized by the row of effects, so type inference can be
     *  | tricky. It is generally recommended to either work with a polymorphic row of effects,
     *  | or a concrete, closed row of effects such as `(trace :: Trace)`.
     */
    var liftEff = function (dict) {
        return dict.liftEff;
    };
    var monadEffState = function (__dict_Monad_265) {
        return function (__dict_MonadEff_266) {
            return new MonadEff(function () {
                return Control_Monad_State_Trans.monadStateT(__dict_Monad_265);
            }, Prelude["<<<"](Prelude.semigroupoidArr)(Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(__dict_Monad_265))(liftEff(__dict_MonadEff_266)));
        };
    };
    return {
        MonadEff: MonadEff, 
        liftEff: liftEff, 
        monadEffEff: monadEffEff, 
        monadEffState: monadEffState
    };
})();
var PS = PS || {};
PS.Control_Monad_Error_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_Except_Trans = PS.Control_Monad_Except_Trans;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_Monad_Maybe_Trans = PS.Control_Monad_Maybe_Trans;
    var Control_Monad_Reader_Trans = PS.Control_Monad_Reader_Trans;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | The `MonadError` type class represents those monads which support errors via
     *  | `throwError` and `catchError`.
     *  |
     *  | - `throwError e` throws the error `e`
     *  | - `catchError x f` calls the error handler `f` if an error is thrown during the
     *  |   evaluation of `x`.
     *  |
     *  | An implementation is provided for `ErrorT`, and for other monad transformers
     *  | defined in this library.
     *  |
     *  | Laws:
     *  |
     *  | - Left zero: `throwError e >>= f = throwError e`
     *  | - Catch: `catchError (throwError e) f = f e`
     *  | - Pure: `catchError (pure a) f = pure a`
     *  | 
     */
    var MonadError = function (catchError, throwError) {
        this.catchError = catchError;
        this.throwError = throwError;
    };
    
    /**
     *  | The `MonadError` type class represents those monads which support errors via
     *  | `throwError` and `catchError`.
     *  |
     *  | - `throwError e` throws the error `e`
     *  | - `catchError x f` calls the error handler `f` if an error is thrown during the
     *  |   evaluation of `x`.
     *  |
     *  | An implementation is provided for `ErrorT`, and for other monad transformers
     *  | defined in this library.
     *  |
     *  | Laws:
     *  |
     *  | - Left zero: `throwError e >>= f = throwError e`
     *  | - Catch: `catchError (throwError e) f = f e`
     *  | - Pure: `catchError (pure a) f = pure a`
     *  | 
     */
    var throwError = function (dict) {
        return dict.throwError;
    };
    var monadErrorErrorT = function (__dict_Monad_271) {
        return new MonadError(function (m) {
            return function (h) {
                return Control_Monad_Error_Trans.ErrorT(Prelude[">>="](__dict_Monad_271["__superclass_Prelude.Bind_1"]())(Control_Monad_Error_Trans.runErrorT(m))(function (_28) {
                    if (_28 instanceof Data_Either.Left) {
                        return Control_Monad_Error_Trans.runErrorT(h(_28.value0));
                    };
                    if (_28 instanceof Data_Either.Right) {
                        return Prelude["return"](__dict_Monad_271)(new Data_Either.Right(_28.value0));
                    };
                    throw new Error("Failed pattern match");
                }));
            };
        }, function (e) {
            return Control_Monad_Error_Trans.ErrorT(Prelude["return"](__dict_Monad_271)(new Data_Either.Left(e)));
        });
    };
    
    /**
     *  | The `MonadError` type class represents those monads which support errors via
     *  | `throwError` and `catchError`.
     *  |
     *  | - `throwError e` throws the error `e`
     *  | - `catchError x f` calls the error handler `f` if an error is thrown during the
     *  |   evaluation of `x`.
     *  |
     *  | An implementation is provided for `ErrorT`, and for other monad transformers
     *  | defined in this library.
     *  |
     *  | Laws:
     *  |
     *  | - Left zero: `throwError e >>= f = throwError e`
     *  | - Catch: `catchError (throwError e) f = f e`
     *  | - Pure: `catchError (pure a) f = pure a`
     *  | 
     */
    var catchError = function (dict) {
        return dict.catchError;
    };
    var monadErrorStateT = function (__dict_Monad_277) {
        return function (__dict_MonadError_278) {
            return new MonadError(Control_Monad_State_Trans.liftCatchState(catchError(__dict_MonadError_278)), function (e) {
                return Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(__dict_Monad_277)(throwError(__dict_MonadError_278)(e));
            });
        };
    };
    return {
        MonadError: MonadError, 
        catchError: catchError, 
        throwError: throwError, 
        monadErrorErrorT: monadErrorErrorT, 
        monadErrorStateT: monadErrorStateT
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    
    /**
     *  | `Foldable` represents data structures which can be _folded_.
     *  |
     *  | - `foldr` folds a structure from the right
     *  | - `foldl` folds a structure from the left
     *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
     */
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    
    /**
     *  | `Foldable` represents data structures which can be _folded_.
     *  |
     *  | - `foldr` folds a structure from the right
     *  | - `foldl` folds a structure from the left
     *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
     */
    var foldr = function (dict) {
        return dict.foldr;
    };
    
    /**
     *  | `Foldable` represents data structures which can be _folded_.
     *  |
     *  | - `foldr` folds a structure from the right
     *  | - `foldl` folds a structure from the left
     *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
     */
    var foldl = function (dict) {
        return dict.foldl;
    };
    
    /**
     *  | Test whether any `Boolean` value in a data structure is `true`.
     */
    var or = function (__dict_Foldable_298) {
        return foldl(__dict_Foldable_298)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var foldableArray = new Foldable(function (__dict_Monoid_306) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_306["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_306))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    
    /**
     *  | `Foldable` represents data structures which can be _folded_.
     *  |
     *  | - `foldr` folds a structure from the right
     *  | - `foldl` folds a structure from the left
     *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
     */
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    
    /**
     *  | Test whether a predicate holds for any element in a data structure.
     */
    var any = function (__dict_Foldable_315) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_315)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    
    /**
     *  | Test whether a value is an element of a data structure.
     */
    var elem = function (__dict_Eq_316) {
        return function (__dict_Foldable_317) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_317))(Prelude["=="](__dict_Eq_316));
        };
    };
    
    /**
     *  | Test whether all `Boolean` values in a data structure are `true`.
     */
    var and = function (__dict_Foldable_320) {
        return foldl(__dict_Foldable_320)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
    };
    
    /**
     *  | Test whether a predicate holds for all elements in a data structure.
     */
    var all = function (__dict_Foldable_321) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_321)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        elem: elem, 
        all: all, 
        any: any, 
        or: or, 
        and: and, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray
    };
})();
var PS = PS || {};
PS.Data_StrMap_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Data_Maybe = PS.Data_Maybe;
    
  function poke(m) {
    return function(k) {
      return function(v) {
        return function() {
          m[k] = v;
          return m;
        };
      };
    };
  }
  ;
    
  function _delete(m) {
    return function(k) {
      return function() {
        delete m[k];
        return m;
      };
    };
  }
  ;
    
    /**
     *  | Remove a key and the corresponding value from a mutable map
     */
    var $$delete = _delete;
    return {
        "delete": $$delete, 
        poke: poke
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Maybe = PS.Data_Maybe;
    
    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;
    
    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;
    
    function length(s) {
      return s.length;
    }
    ;
    
    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;
    
    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    
    /**
     *  | Returns the character at the given index, if the index is within bounds.
     */
    var charAt = function (n) {
        return function (s) {
            return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        joinWith: joinWith, 
        split: split, 
        drop: drop, 
        length: length, 
        indexOf: indexOf, 
        charAt: charAt
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    
    /**
     *  | `Traversable` represents data structures which can be _traversed_,
     *  | accumulating results and effects in some `Applicative` functor.
     *  |
     *  | - `traverse` runs an action for every element in a data structure,
     *  |   and accumulates the results.
     *  | - `sequence` runs the actions _contained_ in a data structure,
     *  |   and accumulates the results.
     *  |
     *  | The `traverse` and `sequence` functions should be compatible in the
     *  | following sense:
     *  |
     *  | - `traverse f xs = sequence (f <$> xs)`
     *  | - `sequence = traverse id` 
     *  | 
     *  | `Traversable` instances should also be compatible with the corresponding
     *  | `Foldable` instances, in the following sense:
     *  |
     *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
     */
    var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    
    /**
     *  | `Traversable` represents data structures which can be _traversed_,
     *  | accumulating results and effects in some `Applicative` functor.
     *  |
     *  | - `traverse` runs an action for every element in a data structure,
     *  |   and accumulates the results.
     *  | - `sequence` runs the actions _contained_ in a data structure,
     *  |   and accumulates the results.
     *  |
     *  | The `traverse` and `sequence` functions should be compatible in the
     *  | following sense:
     *  |
     *  | - `traverse f xs = sequence (f <$> xs)`
     *  | - `sequence = traverse id` 
     *  | 
     *  | `Traversable` instances should also be compatible with the corresponding
     *  | `Foldable` instances, in the following sense:
     *  |
     *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
     */
    var traverse = function (dict) {
        return dict.traverse;
    };
    
    /**
     *  | `Traversable` represents data structures which can be _traversed_,
     *  | accumulating results and effects in some `Applicative` functor.
     *  |
     *  | - `traverse` runs an action for every element in a data structure,
     *  |   and accumulates the results.
     *  | - `sequence` runs the actions _contained_ in a data structure,
     *  |   and accumulates the results.
     *  |
     *  | The `traverse` and `sequence` functions should be compatible in the
     *  | following sense:
     *  |
     *  | - `traverse f xs = sequence (f <$> xs)`
     *  | - `sequence = traverse id` 
     *  | 
     *  | `Traversable` instances should also be compatible with the corresponding
     *  | `Foldable` instances, in the following sense:
     *  |
     *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
     */
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_357) {
        return function (_585) {
            if (_585.length === 0) {
                return Prelude.pure(__dict_Applicative_357)([  ]);
            };
            if (_585.length >= 1) {
                var _822 = _585.slice(1);
                return Prelude["<*>"](__dict_Applicative_357["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_357["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_585[0]))(sequence(traversableArray)(__dict_Applicative_357)(_822));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_356) {
        return function (_583) {
            return function (_584) {
                if (_584.length === 0) {
                    return Prelude.pure(__dict_Applicative_356)([  ]);
                };
                if (_584.length >= 1) {
                    var _826 = _584.slice(1);
                    return Prelude["<*>"](__dict_Applicative_356["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_356["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_583(_584[0])))(traverse(traversableArray)(__dict_Applicative_356)(_583)(_826));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    
    /**
     *  | A generalization of `zipWith` which accumulates results in some `Applicative`
     *  | functor.
     */
    var zipWithA = function (__dict_Applicative_362) {
        return function (f) {
            return function (xs) {
                return function (ys) {
                    return sequence(traversableArray)(__dict_Applicative_362)(Data_Array.zipWith(f)(xs)(ys));
                };
            };
        };
    };
    
    /**
     *  | A version of `traverse` with its arguments flipped.
     *  |
     *  | 
     *  | This can be useful when running an action written using do notation
     *  | for every element in a data structure:
     *  |
     *  | For example:
     *  |
     *  | ```purescript
     *  | for [1, 2, 3] \n -> do
     *  |   print n
     *  |   return (n * n)
     *  | ```
     */
    var $$for = function (__dict_Applicative_367) {
        return function (__dict_Traversable_368) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_368)(__dict_Applicative_367)(f)(x);
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        zipWithA: zipWithA, 
        "for": $$for, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray
    };
})();
var PS = PS || {};
PS.Data_Identity = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Traversable = PS.Data_Traversable;
    var Identity = function (x) {
        return x;
    };
    var runIdentity = function (_610) {
        return _610;
    };
    var functorIdentity = new Prelude.Functor(function (_616) {
        return function (_617) {
            return _616(_617);
        };
    });
    var applyIdentity = new Prelude.Apply(function (_618) {
        return function (_619) {
            return _618(_619);
        };
    }, function () {
        return functorIdentity;
    });
    var bindIdentity = new Prelude.Bind(function (m) {
        return function (f) {
            return f(runIdentity(m));
        };
    }, function () {
        return applyIdentity;
    });
    var applicativeIdentity = new Prelude.Applicative(function () {
        return applyIdentity;
    }, Identity);
    var monadIdentity = new Prelude.Monad(function () {
        return applicativeIdentity;
    }, function () {
        return bindIdentity;
    });
    return {
        Identity: Identity, 
        runIdentity: runIdentity, 
        functorIdentity: functorIdentity, 
        applyIdentity: applyIdentity, 
        applicativeIdentity: applicativeIdentity, 
        bindIdentity: bindIdentity, 
        monadIdentity: monadIdentity
    };
})();
var PS = PS || {};
PS.Control_Monad_State_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_Monad_RWS = PS.Control_Monad_RWS;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_Maybe_Trans = PS.Control_Monad_Maybe_Trans;
    var Control_Monad_Reader_Trans = PS.Control_Monad_Reader_Trans;
    var Control_Monad_RWS_Trans = PS.Control_Monad_RWS_Trans;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Tuple = PS.Data_Tuple;
    
    /**
     *  | The `MonadState s` type class represents those monads which support a single piece of mutable
     *  | state of type `s`.
     *  |
     *  | - `state f` updates the state using the function `f`.
     *  |
     *  | An implementation is provided for `StateT`, and for other monad transformers
     *  | defined in this library.
     *  |
     *  | Laws:
     *  |
     *  | - `do { get ; get } = get`
     *  | - `do { put x ; put y } = put y`
     *  | - `do { put x ; get } = put x $> x`
     *  | - `do { s <- get ; put s } = pure unit`
     *  |
     */
    var MonadState = function (state) {
        this.state = state;
    };
    
    /**
     *  | The `MonadState s` type class represents those monads which support a single piece of mutable
     *  | state of type `s`.
     *  |
     *  | - `state f` updates the state using the function `f`.
     *  |
     *  | An implementation is provided for `StateT`, and for other monad transformers
     *  | defined in this library.
     *  |
     *  | Laws:
     *  |
     *  | - `do { get ; get } = get`
     *  | - `do { put x ; put y } = put y`
     *  | - `do { put x ; get } = put x $> x`
     *  | - `do { s <- get ; put s } = pure unit`
     *  |
     */
    var state = function (dict) {
        return dict.state;
    };
    var monadStateStateT = function (__dict_Monad_426) {
        return new MonadState(function (f) {
            return Control_Monad_State_Trans.StateT(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["return"](__dict_Monad_426))(f));
        });
    };
    
    /**
     *  | Modify the state by applying a function to the current state.
     */
    var modify = function (__dict_Monad_435) {
        return function (__dict_MonadState_436) {
            return function (f) {
                return state(__dict_MonadState_436)(function (s) {
                    return new Data_Tuple.Tuple(Prelude.unit, f(s));
                });
            };
        };
    };
    
    /**
     *  | Get the current state.
     */
    var get = function (__dict_Monad_439) {
        return function (__dict_MonadState_440) {
            return state(__dict_MonadState_440)(function (s) {
                return new Data_Tuple.Tuple(s, s);
            });
        };
    };
    return {
        MonadState: MonadState, 
        modify: modify, 
        get: get, 
        state: state, 
        monadStateStateT: monadStateStateT
    };
})();
var PS = PS || {};
PS.Data_StrMap = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_StrMap_ST = PS.Data_StrMap_ST;
    var Data_Monoid_All = PS.Data_Monoid_All;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Data_Array = PS.Data_Array;
    
  function _copyEff(m) {
    return function() {
      var r = {};
      for (var k in m) {
        r[k] = m[k];
      }
      return r;
    };
  }
  ;
    
  function runST(f) {
    return f;
  }
  ;
    var empty = {};;
    
  function _lookup(no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  }
  ;
    
  function _collect(f) {
    return function(m) {
      var r = [];
      for (var k in m) {
        r.push(f(k)(m[k]));
      }
      return r;
    };
  }
  ;
    
    /**
     *  | Get an array of the values in a map
     */
    var values = _collect(function (_694) {
        return function (v) {
            return v;
        };
    });
    
    /**
     *  | Convert an immutable map into a mutable map
     */
    var thawST = _copyEff;
    var pureST = function (f) {
        return Control_Monad_Eff.runPure(runST(f));
    };
    var mutate = function (f) {
        return function (m) {
            return pureST(function __do() {
                var _35 = thawST(m)();
                f(_35)();
                return _35;
            });
        };
    };
    
    /**
     *  | Lookup the value for a key in a map
     */
    var lookup = Data_Function.runFn4(_lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
    
    /**
     *  | Insert a key and value into a map
     */
    var insert = function (k) {
        return function (v) {
            return mutate(function (s) {
                return Data_StrMap_ST.poke(s)(k)(v);
            });
        };
    };
    
    /**
     *  | Delete a key and value from a map
     */
    var $$delete = function (k) {
        return mutate(function (s) {
            return Data_StrMap_ST["delete"](s)(k);
        });
    };
    return {
        runST: runST, 
        thawST: thawST, 
        values: values, 
        "delete": $$delete, 
        lookup: lookup, 
        insert: insert, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Text_Parsing_Parser = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Identity = PS.Data_Identity;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Tuple = PS.Data_Tuple;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Monad = PS.Control_Monad;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_Monad_State_Class = PS.Control_Monad_State_Class;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var Control_Monad_Error_Class = PS.Control_Monad_Error_Class;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var ParseError = (function () {
        function ParseError(value0) {
            this.value0 = value0;
        };
        ParseError.create = function (value0) {
            return new ParseError(value0);
        };
        return ParseError;
    })();
    var ParserT = function (x) {
        return x;
    };
    var unParserT = function (_695) {
        return _695;
    };
    var showParseError = new Prelude.Show(function (_696) {
        return "ParseError { message: " + (_696.value0.message + " }");
    });
    var runParserT = function (__dict_Monad_528) {
        return function (s) {
            return function (p) {
                return Prelude[">>="](__dict_Monad_528["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (_39) {
                    return Prelude["return"](__dict_Monad_528)(_39.result);
                });
            };
        };
    };
    var runParser = function (s) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(runParserT(Data_Identity.monadIdentity)(s));
    };
    var lazy1ParserT = new Control_Lazy.Lazy1(function (f) {
        return ParserT(function (s) {
            return unParserT(f(Prelude.unit))(s);
        });
    });
    var functorParserT = function (__dict_Functor_533) {
        return new Prelude.Functor(function (f) {
            return function (p) {
                var f$prime = function (o) {
                    return {
                        input: o.input, 
                        result: Prelude["<$>"](Data_Either.functorEither)(f)(o.result), 
                        consumed: o.consumed
                    };
                };
                return ParserT(function (s) {
                    return Prelude["<$>"](__dict_Functor_533)(f$prime)(unParserT(p)(s));
                });
            };
        });
    };
    var fail = function (__dict_Monad_534) {
        return function (message) {
            return ParserT(function (s) {
                return Prelude["return"](__dict_Monad_534)({
                    input: s, 
                    consumed: false, 
                    result: new Data_Either.Left(new ParseError({
                        message: message
                    }))
                });
            });
        };
    };
    var errorParseError = new Control_Monad_Error["Error"](new ParseError({
        message: ""
    }), function (msg) {
        return new ParseError({
            message: msg
        });
    });
    var monadParserT = function (__dict_Monad_532) {
        return new Prelude.Monad(function () {
            return applicativeParserT(__dict_Monad_532);
        }, function () {
            return bindParserT(__dict_Monad_532);
        });
    };
    var bindParserT = function (__dict_Monad_537) {
        return new Prelude.Bind(function (p) {
            return function (f) {
                var updateConsumedFlag = function (c) {
                    return function (o) {
                        return {
                            input: o.input, 
                            consumed: c || o.consumed, 
                            result: o.result
                        };
                    };
                };
                return ParserT(function (s) {
                    return Prelude[">>="](__dict_Monad_537["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (o) {
                        if (o.result instanceof Data_Either.Left) {
                            return Prelude["return"](__dict_Monad_537)({
                                input: o.input, 
                                result: new Data_Either.Left(o.result.value0), 
                                consumed: o.consumed
                            });
                        };
                        if (o.result instanceof Data_Either.Right) {
                            return Prelude["<$>"](((__dict_Monad_537["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(updateConsumedFlag(o.consumed))(unParserT(f(o.result.value0))(o.input));
                        };
                        throw new Error("Failed pattern match");
                    });
                });
            };
        }, function () {
            return applyParserT(__dict_Monad_537);
        });
    };
    var applyParserT = function (__dict_Monad_538) {
        return new Prelude.Apply(Prelude.ap(monadParserT(__dict_Monad_538)), function () {
            return functorParserT(((__dict_Monad_538["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        });
    };
    var applicativeParserT = function (__dict_Monad_539) {
        return new Prelude.Applicative(function () {
            return applyParserT(__dict_Monad_539);
        }, function (a) {
            return ParserT(function (s) {
                return Prelude.pure(__dict_Monad_539["__superclass_Prelude.Applicative_0"]())({
                    input: s, 
                    result: new Data_Either.Right(a), 
                    consumed: false
                });
            });
        });
    };
    var altParserT = function (__dict_Monad_541) {
        return new Control_Alt.Alt(function (p1) {
            return function (p2) {
                return ParserT(function (s) {
                    return Prelude[">>="](__dict_Monad_541["__superclass_Prelude.Bind_1"]())(unParserT(p1)(s))(function (o) {
                        if (o.result instanceof Data_Either.Left && !o.consumed) {
                            return unParserT(p2)(s);
                        };
                        return Prelude["return"](__dict_Monad_541)(o);
                    });
                });
            };
        }, function () {
            return functorParserT(((__dict_Monad_541["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        });
    };
    var plusParserT = function (__dict_Monad_535) {
        return new Control_Plus.Plus(function () {
            return altParserT(__dict_Monad_535);
        }, fail(__dict_Monad_535)("No alternative"));
    };
    var alternativeParserT = function (__dict_Monad_540) {
        return new Control_Alternative.Alternative(function () {
            return plusParserT(__dict_Monad_540);
        }, function () {
            return applicativeParserT(__dict_Monad_540);
        });
    };
    return {
        ParserT: ParserT, 
        ParseError: ParseError, 
        fail: fail, 
        runParser: runParser, 
        runParserT: runParserT, 
        unParserT: unParserT, 
        errorParseError: errorParseError, 
        showParseError: showParseError, 
        functorParserT: functorParserT, 
        applyParserT: applyParserT, 
        applicativeParserT: applicativeParserT, 
        altParserT: altParserT, 
        plusParserT: plusParserT, 
        alternativeParserT: alternativeParserT, 
        bindParserT: bindParserT, 
        monadParserT: monadParserT, 
        lazy1ParserT: lazy1ParserT
    };
})();
var PS = PS || {};
PS.Text_Parsing_Parser_Combinators = (function () {
    "use strict";
    var Control_Alt = PS.Control_Alt;
    var Text_Parsing_Parser = PS.Text_Parsing_Parser;
    var Prelude = PS.Prelude;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Apply = PS.Control_Apply;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Monad = PS.Control_Monad;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_Error_Class = PS.Control_Monad_Error_Class;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_State_Class = PS.Control_Monad_State_Class;
    var $less$qmark$greater = function (__dict_Monad_542) {
        return function (p) {
            return function (msg) {
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_542))(p)(Text_Parsing_Parser.fail(__dict_Monad_542)("Expected " + msg));
            };
        };
    };
    var $$try = function (__dict_Functor_543) {
        return function (p) {
            var try$prime = function (_699) {
                return function (_700) {
                    if (_700.result instanceof Data_Either.Left) {
                        return {
                            input: _699, 
                            result: _700.result, 
                            consumed: false
                        };
                    };
                    return _700;
                };
            };
            return Text_Parsing_Parser.ParserT(function (s) {
                return Prelude["<$>"](__dict_Functor_543)(try$prime(s))(Text_Parsing_Parser.unParserT(p)(s));
            });
        };
    };
    var sepEndBy1 = function (__dict_Monad_546) {
        return function (p) {
            return function (sep) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_546))(p)(function (_44) {
                    return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_546))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_546))(sep)(function () {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_546))(sepEndBy(__dict_Monad_546)(p)(sep))(function (_43) {
                            return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_546))(Prelude[":"](_44)(_43));
                        });
                    }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_546))([ _44 ]));
                });
            };
        };
    };
    var sepEndBy = function (__dict_Monad_547) {
        return function (p) {
            return function (sep) {
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_547))(sepEndBy1(__dict_Monad_547)(p)(sep))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_547))([  ]));
            };
        };
    };
    var sepBy1 = function (__dict_Monad_548) {
        return function (p) {
            return function (sep) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_548))(p)(function (_42) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_548))(Control_Alternative.many(Text_Parsing_Parser.alternativeParserT(__dict_Monad_548))(Text_Parsing_Parser.lazy1ParserT)(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_548))(sep)(function () {
                        return p;
                    })))(function (_41) {
                        return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_548))(Prelude[":"](_42)(_41));
                    });
                });
            };
        };
    };
    var sepBy = function (__dict_Monad_549) {
        return function (p) {
            return function (sep) {
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_549))(sepBy1(__dict_Monad_549)(p)(sep))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_549))([  ]));
            };
        };
    };
    var notFollowedBy = function (__dict_Monad_554) {
        return function (p) {
            return $$try(((__dict_Monad_554["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_554))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(__dict_Monad_554))($$try(((__dict_Monad_554["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(p))(Text_Parsing_Parser.fail(__dict_Monad_554)("Negated parser succeeded")))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_554))(Prelude.unit)));
        };
    };
    var manyTill = function (__dict_Monad_555) {
        return function (p) {
            return function (end) {
                var scan = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_555))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_555))(end)(function () {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_555))([  ]);
                }))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_555))(p)(function (_57) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_555))(scan)(function (_56) {
                        return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_555))(Prelude[":"](_57)(_56));
                    });
                }));
                return scan;
            };
        };
    };
    var choice = function (__dict_Monad_560) {
        return function (_697) {
            if (_697.length === 0) {
                return Text_Parsing_Parser.fail(__dict_Monad_560)("Nothing to parse");
            };
            if (_697.length === 1) {
                return _697[0];
            };
            if (_697.length >= 1) {
                var _856 = _697.slice(1);
                return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_560))(_697[0])(choice(__dict_Monad_560)(_856));
            };
            throw new Error("Failed pattern match");
        };
    };
    var chainr1$prime = function (__dict_Monad_561) {
        return function (p) {
            return function (f) {
                return function (a) {
                    return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_561))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_561))(f)(function (_52) {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_561))(chainr1(__dict_Monad_561)(p)(f))(function (_51) {
                            return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_561))(_52(a)(_51));
                        });
                    }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_561))(a));
                };
            };
        };
    };
    var chainr1 = function (__dict_Monad_562) {
        return function (p) {
            return function (f) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_562))(p)(function (_50) {
                    return chainr1$prime(__dict_Monad_562)(p)(f)(_50);
                });
            };
        };
    };
    var chainl1$prime = function (__dict_Monad_564) {
        return function (p) {
            return function (f) {
                return function (a) {
                    return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_564))(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_564))(f)(function (_49) {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_564))(p)(function (_48) {
                            return chainl1$prime(__dict_Monad_564)(p)(f)(_49(a)(_48));
                        });
                    }))(Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_564))(a));
                };
            };
        };
    };
    var chainl1 = function (__dict_Monad_565) {
        return function (p) {
            return function (f) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_565))(p)(function (_47) {
                    return chainl1$prime(__dict_Monad_565)(p)(f)(_47);
                });
            };
        };
    };
    var between = function (__dict_Monad_567) {
        return function (open) {
            return function (close) {
                return function (p) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_567))(open)(function () {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_567))(p)(function (_40) {
                            return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_567))(close)(function () {
                                return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_567))(_40);
                            });
                        });
                    });
                };
            };
        };
    };
    return {
        manyTill: manyTill, 
        notFollowedBy: notFollowedBy, 
        choice: choice, 
        "chainr1'": chainr1$prime, 
        chainr1: chainr1, 
        "chainl1'": chainl1$prime, 
        chainl1: chainl1, 
        sepEndBy1: sepEndBy1, 
        sepEndBy: sepEndBy, 
        sepBy1: sepBy1, 
        sepBy: sepBy, 
        "try": $$try, 
        between: between, 
        "<?>": $less$qmark$greater
    };
})();
var PS = PS || {};
PS.Text_Parsing_Parser_String = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var Data_String = PS.Data_String;
    var Data_Char = PS.Data_Char;
    var Text_Parsing_Parser_Combinators = PS.Text_Parsing_Parser_Combinators;
    var Text_Parsing_Parser = PS.Text_Parsing_Parser;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Alt = PS.Control_Alt;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Either = PS.Data_Either;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Error_Class = PS.Control_Monad_Error_Class;
    var Control_Monad_State_Class = PS.Control_Monad_State_Class;
    var string = function (__dict_Monad_575) {
        return function (s) {
            return Text_Parsing_Parser.ParserT(function (s$prime) {
                return Prelude["return"](__dict_Monad_575)((function () {
                    var _864 = Data_String.indexOf(s)(s$prime);
                    if (_864 === 0) {
                        return {
                            consumed: true, 
                            input: Data_String.drop(Data_String.length(s))(s$prime), 
                            result: new Data_Either.Right(s)
                        };
                    };
                    return {
                        consumed: false, 
                        input: s$prime, 
                        result: new Data_Either.Left(Control_Monad_Error.strMsg(Text_Parsing_Parser.errorParseError)("Expected " + Prelude.show(Prelude.showString)(s)))
                    };
                })());
            });
        };
    };
    var whiteSpace = function (__dict_Monad_576) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_576))(Control_Alternative.many(Text_Parsing_Parser.alternativeParserT(__dict_Monad_576))(Text_Parsing_Parser.lazy1ParserT)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_576))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_576))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(__dict_Monad_576))(string(__dict_Monad_576)("\n"))(string(__dict_Monad_576)("\r")))(string(__dict_Monad_576)(" ")))(string(__dict_Monad_576)("\t"))))(function (_72) {
            return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_576))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Prelude.id(Prelude.categoryArr))(_72));
        });
    };
    var skipSpaces = function (__dict_Monad_577) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_577))(whiteSpace(__dict_Monad_577))(function () {
            return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_577))(Prelude.unit);
        });
    };
    var $$char = function (__dict_Monad_579) {
        return Text_Parsing_Parser.ParserT(function (s$prime) {
            return Prelude["return"](__dict_Monad_579)((function () {
                var _866 = Data_String.charAt(0)(s$prime);
                if (_866 instanceof Data_Maybe.Nothing) {
                    return {
                        consumed: false, 
                        input: s$prime, 
                        result: new Data_Either.Left(Control_Monad_Error.strMsg(Text_Parsing_Parser.errorParseError)("Unexpected EOF"))
                    };
                };
                if (_866 instanceof Data_Maybe.Just) {
                    return {
                        consumed: true, 
                        input: Data_String.drop(1)(s$prime), 
                        result: new Data_Either.Right(Data_Char.charString(_866.value0))
                    };
                };
                throw new Error("Failed pattern match");
            })());
        });
    };
    var satisfy = function (__dict_Monad_580) {
        return function (f) {
            return Text_Parsing_Parser_Combinators["try"](((__dict_Monad_580["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_580))($$char(__dict_Monad_580))(function (_71) {
                var _869 = f(_71);
                if (_869) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_580))(_71);
                };
                if (!_869) {
                    return Text_Parsing_Parser.fail(__dict_Monad_580)("Character did not satisfy predicate");
                };
                throw new Error("Failed pattern match");
            }));
        };
    };
    var oneOf = function (__dict_Monad_582) {
        return function (ss) {
            return satisfy(__dict_Monad_582)(Prelude.flip(Data_Foldable.elem(Prelude.eqString)(Data_Foldable.foldableArray))(ss));
        };
    };
    return {
        oneOf: oneOf, 
        skipSpaces: skipSpaces, 
        whiteSpace: whiteSpace, 
        satisfy: satisfy, 
        "char": $$char, 
        string: string
    };
})();
var PS = PS || {};
PS.Ace_Editor = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Nullable = PS.Data_Nullable;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Ace_Types = PS.Ace_Types;
    var Data_DOM_Simple_Types = PS.Data_DOM_Simple_Types;
    function getValueImpl(self) {  return function() {    return self.getValue();  };};
    var getValue = function (self) {
        return getValueImpl(self);
    };
    return {
        getValue: getValue
    };
})();
var PS = PS || {};
PS.Ace = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Ace_Types = PS.Ace_Types;
    var Data_DOM_Simple_Types = PS.Data_DOM_Simple_Types;
    function editImpl(el, self) {  return function() {    return self.edit(el);  };};
    var edit = function (el) {
        return function (self) {
            return editImpl(el, self);
        };
    };
    return {
        edit: edit, 
        ace: ace
    };
})();
var PS = PS || {};
PS.AST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_String = PS.Data_String;
    var Data_Array = PS.Data_Array;
    var Composition = (function () {
        function Composition() {

        };
        Composition.value = new Composition();
        return Composition;
    })();
    var Power = (function () {
        function Power() {

        };
        Power.value = new Power();
        return Power;
    })();
    var Mul = (function () {
        function Mul() {

        };
        Mul.value = new Mul();
        return Mul;
    })();
    var Div = (function () {
        function Div() {

        };
        Div.value = new Div();
        return Div;
    })();
    var Mod = (function () {
        function Mod() {

        };
        Mod.value = new Mod();
        return Mod;
    })();
    var Add = (function () {
        function Add() {

        };
        Add.value = new Add();
        return Add;
    })();
    var Sub = (function () {
        function Sub() {

        };
        Sub.value = new Sub();
        return Sub;
    })();
    var Cons = (function () {
        function Cons() {

        };
        Cons.value = new Cons();
        return Cons;
    })();
    var Append = (function () {
        function Append() {

        };
        Append.value = new Append();
        return Append;
    })();
    var Eq = (function () {
        function Eq() {

        };
        Eq.value = new Eq();
        return Eq;
    })();
    var Neq = (function () {
        function Neq() {

        };
        Neq.value = new Neq();
        return Neq;
    })();
    var Lt = (function () {
        function Lt() {

        };
        Lt.value = new Lt();
        return Lt;
    })();
    var Leq = (function () {
        function Leq() {

        };
        Leq.value = new Leq();
        return Leq;
    })();
    var Gt = (function () {
        function Gt() {

        };
        Gt.value = new Gt();
        return Gt;
    })();
    var Geq = (function () {
        function Geq() {

        };
        Geq.value = new Geq();
        return Geq;
    })();
    var And = (function () {
        function And() {

        };
        And.value = new And();
        return And;
    })();
    var Or = (function () {
        function Or() {

        };
        Or.value = new Or();
        return Or;
    })();
    var Dollar = (function () {
        function Dollar() {

        };
        Dollar.value = new Dollar();
        return Dollar;
    })();
    var Num = (function () {
        function Num(value0) {
            this.value0 = value0;
        };
        Num.create = function (value0) {
            return new Num(value0);
        };
        return Num;
    })();
    var Bool = (function () {
        function Bool(value0) {
            this.value0 = value0;
        };
        Bool.create = function (value0) {
            return new Bool(value0);
        };
        return Bool;
    })();
    var Char = (function () {
        function Char(value0) {
            this.value0 = value0;
        };
        Char.create = function (value0) {
            return new Char(value0);
        };
        return Char;
    })();
    var Name = (function () {
        function Name(value0) {
            this.value0 = value0;
        };
        Name.create = function (value0) {
            return new Name(value0);
        };
        return Name;
    })();
    var Lit = (function () {
        function Lit(value0) {
            this.value0 = value0;
        };
        Lit.create = function (value0) {
            return new Lit(value0);
        };
        return Lit;
    })();
    var ConsLit = (function () {
        function ConsLit(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        ConsLit.create = function (value0) {
            return function (value1) {
                return new ConsLit(value0, value1);
            };
        };
        return ConsLit;
    })();
    var ListLit = (function () {
        function ListLit(value0) {
            this.value0 = value0;
        };
        ListLit.create = function (value0) {
            return new ListLit(value0);
        };
        return ListLit;
    })();
    var NTupleLit = (function () {
        function NTupleLit(value0) {
            this.value0 = value0;
        };
        NTupleLit.create = function (value0) {
            return new NTupleLit(value0);
        };
        return NTupleLit;
    })();
    var Atom = (function () {
        function Atom(value0) {
            this.value0 = value0;
        };
        Atom.create = function (value0) {
            return new Atom(value0);
        };
        return Atom;
    })();
    var List = (function () {
        function List(value0) {
            this.value0 = value0;
        };
        List.create = function (value0) {
            return new List(value0);
        };
        return List;
    })();
    var NTuple = (function () {
        function NTuple(value0) {
            this.value0 = value0;
        };
        NTuple.create = function (value0) {
            return new NTuple(value0);
        };
        return NTuple;
    })();
    var Binary = (function () {
        function Binary(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        Binary.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new Binary(value0, value1, value2);
                };
            };
        };
        return Binary;
    })();
    var Unary = (function () {
        function Unary(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Unary.create = function (value0) {
            return function (value1) {
                return new Unary(value0, value1);
            };
        };
        return Unary;
    })();
    var SectL = (function () {
        function SectL(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SectL.create = function (value0) {
            return function (value1) {
                return new SectL(value0, value1);
            };
        };
        return SectL;
    })();
    var SectR = (function () {
        function SectR(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SectR.create = function (value0) {
            return function (value1) {
                return new SectR(value0, value1);
            };
        };
        return SectR;
    })();
    var Prefix = (function () {
        function Prefix(value0) {
            this.value0 = value0;
        };
        Prefix.create = function (value0) {
            return new Prefix(value0);
        };
        return Prefix;
    })();
    var IfExpr = (function () {
        function IfExpr(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        IfExpr.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new IfExpr(value0, value1, value2);
                };
            };
        };
        return IfExpr;
    })();
    var Lambda = (function () {
        function Lambda(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Lambda.create = function (value0) {
            return function (value1) {
                return new Lambda(value0, value1);
            };
        };
        return Lambda;
    })();
    var App = (function () {
        function App(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        App.create = function (value0) {
            return function (value1) {
                return new App(value0, value1);
            };
        };
        return App;
    })();
    var Def = (function () {
        function Def(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        Def.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new Def(value0, value1, value2);
                };
            };
        };
        return Def;
    })();
    var showTuple = function (__dict_Show_587) {
        return function (ls) {
            return "(" + (Data_String.joinWith(", ")(Prelude["<$>"](Data_Array.functorArray)(Prelude.show(__dict_Show_587))(ls)) + ")");
        };
    };
    var showOp = new Prelude.Show(function (op) {
        if (op instanceof Composition) {
            return ".";
        };
        if (op instanceof Power) {
            return "^";
        };
        if (op instanceof Mul) {
            return "*";
        };
        if (op instanceof Div) {
            return "`div`";
        };
        if (op instanceof Mod) {
            return "`mod`";
        };
        if (op instanceof Add) {
            return "+";
        };
        if (op instanceof Sub) {
            return "-";
        };
        if (op instanceof Cons) {
            return ":";
        };
        if (op instanceof Append) {
            return "++";
        };
        if (op instanceof Eq) {
            return "==";
        };
        if (op instanceof Neq) {
            return "/=";
        };
        if (op instanceof Lt) {
            return "<";
        };
        if (op instanceof Leq) {
            return "<=";
        };
        if (op instanceof Gt) {
            return ">";
        };
        if (op instanceof Geq) {
            return ">=";
        };
        if (op instanceof And) {
            return "&&";
        };
        if (op instanceof Or) {
            return "||";
        };
        if (op instanceof Dollar) {
            return "$";
        };
        throw new Error("Failed pattern match");
    });
    var showList = function (__dict_Show_588) {
        return function (ls) {
            return "[" + (Data_String.joinWith(", ")(Prelude["<$>"](Data_Array.functorArray)(Prelude.show(__dict_Show_588))(ls)) + "]");
        };
    };
    var showAtom = new Prelude.Show(function (atom) {
        if (atom instanceof Num) {
            return "(Num " + (Prelude.show(Prelude.showNumber)(atom.value0) + ")");
        };
        if (atom instanceof Bool) {
            return "(Bool " + (Prelude.show(Prelude.showBoolean)(atom.value0) + ")");
        };
        if (atom instanceof Char) {
            return "(Char " + (atom.value0 + ")");
        };
        if (atom instanceof Name) {
            return "(Name " + (atom.value0 + ")");
        };
        throw new Error("Failed pattern match");
    });
    var showBinding = new Prelude.Show(function (binding) {
        if (binding instanceof Lit) {
            return "(Lit " + (Prelude.show(showAtom)(binding.value0) + ")");
        };
        if (binding instanceof ConsLit) {
            return "(ConsLit " + (Prelude.show(showBinding)(binding.value0) + (":" + (Prelude.show(showBinding)(binding.value1) + ")")));
        };
        if (binding instanceof ListLit) {
            return "(ListLit " + (showList(showBinding)(binding.value0) + ")");
        };
        if (binding instanceof NTupleLit) {
            return "(NTupleLit " + (showTuple(showBinding)(binding.value0) + ")");
        };
        throw new Error("Failed pattern match");
    });
    var showExpr = new Prelude.Show(function (expr) {
        if (expr instanceof Atom) {
            return "(Atom " + (Prelude.show(showAtom)(expr.value0) + ")");
        };
        if (expr instanceof List) {
            return "(List " + (showList(showExpr)(expr.value0) + ")");
        };
        if (expr instanceof NTuple) {
            return "(NTuple " + (showTuple(showExpr)(expr.value0) + ")");
        };
        if (expr instanceof Binary) {
            return "(Binary " + (Prelude.show(showExpr)(expr.value1) + (" " + (Prelude.show(showOp)(expr.value0) + (" " + (Prelude.show(showExpr)(expr.value2) + ")")))));
        };
        if (expr instanceof Unary) {
            return "(Unary " + (Prelude.show(showOp)(expr.value0) + (" " + (Prelude.show(showExpr)(expr.value1) + ")")));
        };
        if (expr instanceof SectL) {
            return "(SectL " + (Prelude.show(showExpr)(expr.value0) + (" " + (Prelude.show(showOp)(expr.value1) + ")")));
        };
        if (expr instanceof SectR) {
            return "(SectR " + (Prelude.show(showOp)(expr.value0) + (" " + (Prelude.show(showExpr)(expr.value1) + ")")));
        };
        if (expr instanceof Prefix) {
            return "(Prefix (" + (Prelude.show(showOp)(expr.value0) + "))");
        };
        if (expr instanceof IfExpr) {
            return "(IfExpr " + (Prelude.show(showExpr)(expr.value0) + (" then " + (Prelude.show(showExpr)(expr.value1) + (" else " + (Prelude.show(showExpr)(expr.value2) + ")")))));
        };
        if (expr instanceof Lambda) {
            return "(Lambda " + (showList(showBinding)(expr.value0) + (" " + (Prelude.show(showExpr)(expr.value1) + ")")));
        };
        if (expr instanceof App) {
            return "(App " + (Prelude.show(showExpr)(expr.value0) + (" " + (showList(showExpr)(expr.value1) + ")")));
        };
        throw new Error("Failed pattern match");
    });
    var foldExpr = function (atom) {
        return function (list) {
            return function (ntuple) {
                return function (binary) {
                    return function (unary) {
                        return function (sectl) {
                            return function (sectr) {
                                return function (prefix) {
                                    return function (ifexpr) {
                                        return function (lambda) {
                                            return function (app) {
                                                var go = function (_725) {
                                                    if (_725 instanceof Atom) {
                                                        return atom(_725.value0);
                                                    };
                                                    if (_725 instanceof List) {
                                                        return list(Prelude["<$>"](Data_Array.functorArray)(go)(_725.value0));
                                                    };
                                                    if (_725 instanceof NTuple) {
                                                        return ntuple(Prelude["<$>"](Data_Array.functorArray)(go)(_725.value0));
                                                    };
                                                    if (_725 instanceof Binary) {
                                                        return binary(_725.value0)(go(_725.value1))(go(_725.value2));
                                                    };
                                                    if (_725 instanceof Unary) {
                                                        return unary(_725.value0)(go(_725.value1));
                                                    };
                                                    if (_725 instanceof SectL) {
                                                        return sectl(go(_725.value0))(_725.value1);
                                                    };
                                                    if (_725 instanceof SectR) {
                                                        return sectr(_725.value0)(go(_725.value1));
                                                    };
                                                    if (_725 instanceof Prefix) {
                                                        return prefix(_725.value0);
                                                    };
                                                    if (_725 instanceof IfExpr) {
                                                        return ifexpr(go(_725.value0))(go(_725.value1))(go(_725.value2));
                                                    };
                                                    if (_725 instanceof Lambda) {
                                                        return lambda(_725.value0)(go(_725.value1));
                                                    };
                                                    if (_725 instanceof App) {
                                                        return app(go(_725.value0))(Prelude["<$>"](Data_Array.functorArray)(go)(_725.value1));
                                                    };
                                                    throw new Error("Failed pattern match");
                                                };
                                                return go;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var eqAtom = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqAtom)(a)(b);
        };
    }, function (_723) {
        return function (_724) {
            if (_723 instanceof Num && _724 instanceof Num) {
                return _723.value0 === _724.value0;
            };
            if (_723 instanceof Bool && _724 instanceof Bool) {
                return _723.value0 === _724.value0;
            };
            if (_723 instanceof Char && _724 instanceof Char) {
                return _723.value0 === _724.value0;
            };
            if (_723 instanceof Name && _724 instanceof Name) {
                return _723.value0 === _724.value0;
            };
            return false;
        };
    });
    return {
        Def: Def, 
        Lit: Lit, 
        ConsLit: ConsLit, 
        ListLit: ListLit, 
        NTupleLit: NTupleLit, 
        Atom: Atom, 
        List: List, 
        NTuple: NTuple, 
        Binary: Binary, 
        Unary: Unary, 
        SectL: SectL, 
        SectR: SectR, 
        Prefix: Prefix, 
        IfExpr: IfExpr, 
        Lambda: Lambda, 
        App: App, 
        Num: Num, 
        Bool: Bool, 
        Char: Char, 
        Name: Name, 
        Composition: Composition, 
        Power: Power, 
        Mul: Mul, 
        Div: Div, 
        Mod: Mod, 
        Add: Add, 
        Sub: Sub, 
        Cons: Cons, 
        Append: Append, 
        Eq: Eq, 
        Neq: Neq, 
        Lt: Lt, 
        Leq: Leq, 
        Gt: Gt, 
        Geq: Geq, 
        And: And, 
        Or: Or, 
        Dollar: Dollar, 
        showTuple: showTuple, 
        showList: showList, 
        foldExpr: foldExpr, 
        eqAtom: eqAtom, 
        showOp: showOp, 
        showAtom: showAtom, 
        showExpr: showExpr, 
        showBinding: showBinding
    };
})();
var PS = PS || {};
PS.Evaluator = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Identity = PS.Data_Identity;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_Error_Class = PS.Control_Monad_Error_Class;
    var Data_Array = PS.Data_Array;
    var Data_Foldable = PS.Data_Foldable;
    var Data_StrMap = PS.Data_StrMap;
    var Control_Alt = PS.Control_Alt;
    var $$Math = PS.$$Math;
    var Control_Plus = PS.Control_Plus;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Data_Traversable = PS.Data_Traversable;
    var Control_Monad_State_Class = PS.Control_Monad_State_Class;
    var Control_Apply = PS.Control_Apply;
    var AST = PS.AST;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Control_Monad_State = PS.Control_Monad_State;
    var Control_Monad_Writer = PS.Control_Monad_Writer;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Control_Monad_Writer_Class = PS.Control_Monad_Writer_Class;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Data_Monoid = PS.Data_Monoid;
    var Nth = (function () {
        function Nth(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Nth.create = function (value0) {
            return function (value1) {
                return new Nth(value0, value1);
            };
        };
        return Nth;
    })();
    var Fst = (function () {
        function Fst(value0) {
            this.value0 = value0;
        };
        Fst.create = function (value0) {
            return new Fst(value0);
        };
        return Fst;
    })();
    var Snd = (function () {
        function Snd(value0) {
            this.value0 = value0;
        };
        Snd.create = function (value0) {
            return new Snd(value0);
        };
        return Snd;
    })();
    var Thrd = (function () {
        function Thrd(value0) {
            this.value0 = value0;
        };
        Thrd.create = function (value0) {
            return new Thrd(value0);
        };
        return Thrd;
    })();
    var End = (function () {
        function End() {

        };
        End.value = new End();
        return End;
    })();
    var wrapLambda = function (binds) {
        return function (args) {
            return function (body) {
                var _934 = Prelude.compare(Prelude.ordNumber)(Data_Array.length(binds))(Data_Array.length(args));
                if (_934 instanceof Prelude.EQ) {
                    return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(body);
                };
                if (_934 instanceof Prelude.GT) {
                    return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(new AST.Lambda(Data_Array.drop(Data_Array.length(args))(binds), body));
                };
                if (_934 instanceof Prelude.LT) {
                    return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(new AST.App(body, Data_Array.drop(Data_Array.length(binds))(args)));
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unary = function (_734) {
        return function (_735) {
            if (_734 instanceof AST.Sub && (_735 instanceof AST.Atom && _735.value0 instanceof AST.Num)) {
                return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(AST.Atom.create(new AST.Num(-_735.value0.value0)));
            };
            return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Cannot apply unary operator " + (Prelude.show(AST.showOp)(_734) + (" to " + Prelude.show(AST.showExpr)(_735))));
        };
    };
    var showPath = new Prelude.Show(function (p) {
        if (p instanceof Nth) {
            return "(Nth " + (Prelude.show(Prelude.showNumber)(p.value0) + (" " + (Prelude.show(showPath)(p.value1) + ")")));
        };
        if (p instanceof Fst) {
            return "(Fst " + (Prelude.show(showPath)(p.value0) + ")");
        };
        if (p instanceof Snd) {
            return "(Snd " + (Prelude.show(showPath)(p.value0) + ")");
        };
        if (p instanceof Thrd) {
            return "(Thrd " + (Prelude.show(showPath)(p.value0) + ")");
        };
        if (p instanceof End) {
            return "End";
        };
        throw new Error("Failed pattern match");
    });
    var runEvalM = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(Control_Monad_Error_Trans.runErrorT);
    var match$prime = function (_736) {
        return function (_737) {
            if (_736 instanceof AST.Lit && _736.value0 instanceof AST.Name) {
                return Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.monadStateStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(Data_StrMap.insert(_736.value0.value0)(_737));
            };
            if (_736 instanceof AST.Lit && (_737 instanceof AST.Atom && Prelude["=="](AST.eqAtom)(_736.value0)(_737.value0))) {
                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(Prelude.unit);
            };
            if (_736 instanceof AST.ConsLit && (_737 instanceof AST.Binary && _737.value0 instanceof AST.Cons)) {
                return Control_Apply["*>"](Control_Monad_State_Trans.applyStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(match$prime(_736.value0)(_737.value1))(match$prime(_736.value1)(_737.value2));
            };
            if (_736 instanceof AST.ConsLit && (_737 instanceof AST.List && _737.value0.length >= 1)) {
                var _958 = _737.value0.slice(1);
                return match$prime(new AST.ConsLit(_736.value0, _736.value1))(new AST.Binary(AST.Cons.value, _737.value0[0], new AST.List(_958)));
            };
            if (_736 instanceof AST.ListLit && (_737 instanceof AST.List && Data_Array.length(_736.value0) === Data_Array.length(_737.value0))) {
                return Prelude["void"](Control_Monad_State_Trans.functorStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(Data_Traversable.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(match$prime)(_736.value0)(_737.value0));
            };
            if (_736 instanceof AST.ListLit && (_737 instanceof AST.Binary && (_737.value0 instanceof AST.Cons && _737.value2 instanceof AST.List))) {
                return match$prime(new AST.ListLit(_736.value0))(new AST.List(Prelude[":"](_737.value1)(_737.value2.value0)));
            };
            if (_736 instanceof AST.NTupleLit && (_737 instanceof AST.NTuple && Data_Array.length(_736.value0) === Data_Array.length(_737.value0))) {
                return Prelude["void"](Control_Monad_State_Trans.functorStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(Data_Traversable.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(match$prime)(_736.value0)(_737.value0));
            };
            return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity)))("Cannot match " + (Prelude.show(AST.showBinding)(_736) + (" with " + Prelude.show(AST.showExpr)(_737))));
        };
    };
    var matchls$prime = function (bs) {
        return function (es) {
            return Control_Monad_State_Trans.execStateT(Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Data_Traversable.zipWithA(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(match$prime)(bs)(es))(Data_StrMap.empty);
        };
    };
    var mapIndex = function (i) {
        return function (f) {
            return function (as) {
                var _970 = Data_Array["!!"](as)(i);
                if (_970 instanceof Data_Maybe.Nothing) {
                    return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Nothing at index " + (Prelude.show(Prelude.showNumber)(i) + ("! (length = " + (Prelude.show(Prelude.showNumber)(Data_Array.length(as)) + ")"))));
                };
                if (_970 instanceof Data_Maybe.Just) {
                    return Prelude[">>="](Control_Monad_Error_Trans.bindErrorT(Data_Identity.monadIdentity))(f(_970.value0))(function (_79) {
                        return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(Data_Array.updateAt(i)(_79)(as));
                    });
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var mapWithPath = function (p) {
        return function (f) {
            var go = function (_738) {
                return function (_739) {
                    if (_738 instanceof End) {
                        return f(_739);
                    };
                    if (_738 instanceof Fst) {
                        if (_739 instanceof AST.Binary) {
                            return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.Binary.create(_739.value0))(go(_738.value0)(_739.value1)))(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value2));
                        };
                        if (_739 instanceof AST.Unary) {
                            return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.Unary.create(_739.value0))(go(_738.value0)(_739.value1));
                        };
                        if (_739 instanceof AST.SectL) {
                            return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.SectL.create)(go(_738.value0)(_739.value0)))(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value1));
                        };
                        if (_739 instanceof AST.IfExpr) {
                            return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.IfExpr.create)(go(_738.value0)(_739.value0)))(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value1)))(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value2));
                        };
                        if (_739 instanceof AST.Lambda) {
                            return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.Lambda.create(_739.value0))(go(_738.value0)(_739.value1));
                        };
                        if (_739 instanceof AST.App) {
                            return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.App.create)(go(_738.value0)(_739.value0)))(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value1));
                        };
                        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Cannot match " + (Prelude.show(showPath)(new Fst(_738.value0)) + (" with " + Prelude.show(AST.showExpr)(e_4))));
                    };
                    if (_738 instanceof Snd) {
                        if (_739 instanceof AST.Binary) {
                            return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.Binary.create(_739.value0)(_739.value1))(go(_738.value0)(_739.value2));
                        };
                        if (_739 instanceof AST.SectR) {
                            return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.SectR.create(_739.value0))(go(_738.value0)(_739.value1));
                        };
                        if (_739 instanceof AST.IfExpr) {
                            return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.IfExpr.create)(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value0)))(go(_738.value0)(_739.value1)))(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value2));
                        };
                        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Cannot match " + (Prelude.show(showPath)(new Snd(_738.value0)) + (" with " + Prelude.show(AST.showExpr)(e_3))));
                    };
                    if (_738 instanceof Thrd) {
                        if (_739 instanceof AST.IfExpr) {
                            return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.IfExpr.create)(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value0)))(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(_739.value1)))(go(_738.value0)(_739.value2));
                        };
                        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Cannot match " + (Prelude.show(showPath)(new Thrd(_738.value0)) + (" with " + Prelude.show(AST.showExpr)(_739))));
                    };
                    if (_738 instanceof Nth) {
                        if (_739 instanceof AST.List) {
                            return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.List.create)(mapIndex(_738.value0)(go(_738.value1))(_739.value0));
                        };
                        if (_739 instanceof AST.NTuple) {
                            return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.NTuple.create)(mapIndex(_738.value0)(go(_738.value1))(_739.value0));
                        };
                        if (_739 instanceof AST.App) {
                            return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.App.create(_739.value0))(mapIndex(_738.value0)(go(_738.value1))(_739.value1));
                        };
                        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Cannot match " + (Prelude.show(showPath)(new Nth(_738.value0, _738.value1)) + (" with " + Prelude.show(AST.showExpr)(e_5))));
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return go(p);
        };
    };
    var insertDef = function (_732) {
        return function (_733) {
            var _1015 = Data_StrMap.lookup(_733.value0)(_732);
            if (_1015 instanceof Data_Maybe.Nothing) {
                return Data_StrMap.insert(_733.value0)([ new Data_Tuple.Tuple(_733.value1, _733.value2) ])(_732);
            };
            if (_1015 instanceof Data_Maybe.Just) {
                return Data_StrMap.insert(_733.value0)(Prelude["++"](Data_Array.semigroupArray)(_1015.value0)([ new Data_Tuple.Tuple(_733.value1, _733.value2) ]))(_732);
            };
            throw new Error("Failed pattern match");
        };
    };
    var defsToEnv = Data_Foldable.foldl(Data_Foldable.foldableArray)(insertDef)(Data_StrMap.empty);
    var boundNames = (function () {
        var go = function (_744) {
            if (_744 instanceof AST.Lit && _744.value0 instanceof AST.Name) {
                return [ _744.value0.value0 ];
            };
            if (_744 instanceof AST.ConsLit) {
                return Prelude["++"](Data_Array.semigroupArray)(go(_744.value0))(go(_744.value1));
            };
            if (_744 instanceof AST.ListLit) {
                return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(go)(_744.value0);
            };
            if (_744 instanceof AST.NTupleLit) {
                return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(go)(_744.value0);
            };
            throw new Error("Failed pattern match");
        };
        return go;
    })();
    var boundNames$prime = Data_Array.concatMap(boundNames);
    var freeVariables = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.nub(Prelude.eqString))(AST.foldExpr(function (a) {
        if (a instanceof AST.Name) {
            return [ a.value0 ];
        };
        return [  ];
    })(Data_Array.concat)(Data_Array.concat)(function (_727) {
        return function (f1) {
            return function (f2) {
                return Prelude["++"](Data_Array.semigroupArray)(f1)(f2);
            };
        };
    })(function (_728) {
        return function (f) {
            return f;
        };
    })(function (f) {
        return function (_729) {
            return f;
        };
    })(function (_730) {
        return function (f) {
            return f;
        };
    })(function (_731) {
        return [  ];
    })(function (f1) {
        return function (f2) {
            return function (f3) {
                return Prelude["++"](Data_Array.semigroupArray)(f1)(Prelude["++"](Data_Array.semigroupArray)(f2)(f3));
            };
        };
    })(function (bs) {
        return function (f) {
            return Data_Array["\\\\"](Prelude.eqString)(Data_Array.nub(Prelude.eqString)(f))(boundNames$prime(bs));
        };
    })(function (f) {
        return function (fs) {
            return Prelude["++"](Data_Array.semigroupArray)(f)(Data_Array.concat(fs));
        };
    }));
    var binary = (function () {
        var retA = Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity)))(AST.Atom.create);
        var go = function (_740) {
            return function (_741) {
                return function (_742) {
                    if (_740 instanceof AST.Power && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Num.create($$Math.pow(_741.value0.value0)(_742.value0.value0)));
                    };
                    if (_740 instanceof AST.Mul && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Num.create(_741.value0.value0 * _742.value0.value0));
                    };
                    if (_740 instanceof AST.Div && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && (_742.value0 instanceof AST.Num && _742.value0.value0 === 0))))) {
                        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Division by zero!");
                    };
                    if (_740 instanceof AST.Div && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Num.create($$Math.floor(_741.value0.value0 / _742.value0.value0)));
                    };
                    if (_740 instanceof AST.Mod && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && (_742.value0 instanceof AST.Num && _742.value0.value0 === 0))))) {
                        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Mod by zero!");
                    };
                    if (_740 instanceof AST.Mod && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Num.create(_741.value0.value0 % _742.value0.value0));
                    };
                    if (_740 instanceof AST.Add && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Num.create(_741.value0.value0 + _742.value0.value0));
                    };
                    if (_740 instanceof AST.Sub && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Num.create(_741.value0.value0 - _742.value0.value0));
                    };
                    if (_740 instanceof AST.Cons && _742 instanceof AST.List) {
                        return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(AST.List.create(Prelude[":"](_741)(_742.value0)));
                    };
                    if (_740 instanceof AST.Append && (_741 instanceof AST.List && _742 instanceof AST.List)) {
                        return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(AST.List.create(Prelude["++"](Data_Array.semigroupArray)(_741.value0)(_742.value0)));
                    };
                    if (_740 instanceof AST.Eq && (_741 instanceof AST.Atom && _742 instanceof AST.Atom)) {
                        return retA(AST.Bool.create(Prelude["=="](AST.eqAtom)(_741.value0)(_742.value0)));
                    };
                    if (_740 instanceof AST.Neq && (_741 instanceof AST.Atom && _742 instanceof AST.Atom)) {
                        return retA(AST.Bool.create(Prelude["/="](AST.eqAtom)(_741.value0)(_742.value0)));
                    };
                    if (_740 instanceof AST.Leq && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Bool.create(_741.value0.value0 <= _742.value0.value0));
                    };
                    if (_740 instanceof AST.Lt && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Bool.create(_741.value0.value0 < _742.value0.value0));
                    };
                    if (_740 instanceof AST.Geq && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Bool.create(_741.value0.value0 >= _742.value0.value0));
                    };
                    if (_740 instanceof AST.Gt && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Num && (_742 instanceof AST.Atom && _742.value0 instanceof AST.Num)))) {
                        return retA(AST.Bool.create(_741.value0.value0 > _742.value0.value0));
                    };
                    if (_740 instanceof AST.And && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Bool && _741.value0.value0))) {
                        return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(_742);
                    };
                    if (_740 instanceof AST.And && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Bool && !_741.value0.value0))) {
                        return retA(AST.Bool.create(false));
                    };
                    if (_740 instanceof AST.Or && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Bool && _741.value0.value0))) {
                        return retA(AST.Bool.create(true));
                    };
                    if (_740 instanceof AST.Or && (_741 instanceof AST.Atom && (_741.value0 instanceof AST.Bool && !_741.value0.value0))) {
                        return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(_742);
                    };
                    if (_740 instanceof AST.Dollar) {
                        return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(new AST.App(_741, [ _742 ]));
                    };
                    return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Cannot apply operator " + (Prelude.show(AST.showOp)(_740) + (" to " + (Prelude.show(AST.showExpr)(_741) + (" and " + Prelude.show(AST.showExpr)(_742))))));
                };
            };
        };
        return go;
    })();
    var avoidCapture = function (subs) {
        return function (binds) {
            var _1100 = Data_Array.intersect(Prelude.eqString)(Data_Array.concatMap(freeVariables)(Data_StrMap.values(subs)))(boundNames$prime(binds));
            if (_1100.length === 0) {
                return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(Prelude.unit);
            };
            return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Some variables have been captured: " + Prelude.show(Prelude.showArray(Prelude.showString))(_1100));
        };
    };
    var replace$prime = function (subs) {
        var go = function (expr) {
            if (expr instanceof AST.Atom && expr.value0 instanceof AST.Name) {
                var _1102 = Data_StrMap.lookup(expr.value0.value0)(subs);
                if (_1102 instanceof Data_Maybe.Just) {
                    return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(_1102.value0);
                };
                if (_1102 instanceof Data_Maybe.Nothing) {
                    return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(expr);
                };
                throw new Error("Failed pattern match");
            };
            if (expr instanceof AST.List) {
                return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.List.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(go)(expr.value0));
            };
            if (expr instanceof AST.NTuple) {
                return Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.NTuple.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(go)(expr.value0));
            };
            if (expr instanceof AST.Binary) {
                return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.Binary.create)(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(expr.value0)))(go(expr.value1)))(go(expr.value2));
            };
            if (expr instanceof AST.Unary) {
                return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.Unary.create)(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(expr.value0)))(go(expr.value1));
            };
            if (expr instanceof AST.SectL) {
                return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.SectL.create)(go(expr.value0)))(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(expr.value1));
            };
            if (expr instanceof AST.SectR) {
                return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.SectR.create)(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(expr.value0)))(go(expr.value1));
            };
            if (expr instanceof AST.IfExpr) {
                return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.IfExpr.create)(go(expr.value0)))(go(expr.value1)))(go(expr.value2));
            };
            if (expr instanceof AST.Lambda) {
                return Control_Apply["*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(avoidCapture(subs)(expr.value0))(Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.Lambda.create)(Prelude.pure(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(expr.value0)))(replace$prime(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_StrMap["delete"])(subs)(boundNames$prime(expr.value0)))(expr.value1)));
            };
            if (expr instanceof AST.App) {
                return Prelude["<*>"](Control_Monad_Error_Trans.applyErrorT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Error_Trans.functorErrorT(Data_Identity.functorIdentity))(AST.App.create)(go(expr.value0)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Error_Trans.applicativeErrorT(Data_Identity.applicativeIdentity))(go)(expr.value1));
            };
            return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(expr);
        };
        return go;
    };
    var apply = function (env) {
        return function (name) {
            return function (args) {
                var app = function (_743) {
                    if (Data_Array.length(_743.value0) <= Data_Array.length(args)) {
                        return Prelude[">>="](Control_Monad_Error_Trans.bindErrorT(Data_Identity.monadIdentity))(Prelude[">>="](Control_Monad_Error_Trans.bindErrorT(Data_Identity.monadIdentity))(matchls$prime(_743.value0)(args))(Prelude.flip(replace$prime)(_743.value1)))(wrapLambda(_743.value0)(args));
                    };
                    if (Prelude.otherwise) {
                        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Wrong number of arguments!");
                    };
                    throw new Error("Failed pattern match");
                };
                var _1127 = Data_StrMap.lookup(name)(env);
                if (_1127 instanceof Data_Maybe.Nothing) {
                    return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Unknown function: " + name);
                };
                if (_1127 instanceof Data_Maybe.Just) {
                    var _1128 = runEvalM(Data_Foldable.foldl(Data_Foldable.foldableArray)(Control_Alt["<|>"](Control_Monad_Error_Trans.altErrorT(Data_Identity.monadIdentity)))(Control_Plus.empty(Control_Monad_Error_Trans.plusErrorT(Data_Identity.monadIdentity)(Control_Monad_Error.errorString)))(Prelude["<$>"](Data_Array.functorArray)(app)(_1127.value0)));
                    if (_1128 instanceof Data_Either.Right) {
                        return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(_1128.value0);
                    };
                    if (_1128 instanceof Data_Either.Left) {
                        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("No matching funnction found for " + (name + ("(last reason: " + (_1128.value0 + ")"))));
                    };
                    throw new Error("Failed pattern match");
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var eval1 = function (env) {
        return function (expr) {
            if (expr instanceof AST.Binary) {
                return binary(expr.value0)(expr.value1)(expr.value2);
            };
            if (expr instanceof AST.Unary) {
                return unary(expr.value0)(expr.value1);
            };
            if (expr instanceof AST.Atom && expr.value0 instanceof AST.Name) {
                return apply(env)(expr.value0.value0)([  ]);
            };
            if (expr instanceof AST.IfExpr && (expr.value0 instanceof AST.Atom && (expr.value0.value0 instanceof AST.Bool && expr.value0.value0.value0))) {
                return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(expr.value1);
            };
            if (expr instanceof AST.IfExpr && (expr.value0 instanceof AST.Atom && (expr.value0.value0 instanceof AST.Bool && !expr.value0.value0.value0))) {
                return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(expr.value2);
            };
            if (expr instanceof AST.App && (expr.value0 instanceof AST.Binary && (expr.value0.value0 instanceof AST.Composition && expr.value1.length === 1))) {
                return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(new AST.App(expr.value0.value1, [ new AST.App(expr.value0.value2, [ expr.value1[0] ]) ]));
            };
            if (expr instanceof AST.App && expr.value0 instanceof AST.Lambda) {
                return Prelude[">>="](Control_Monad_Error_Trans.bindErrorT(Data_Identity.monadIdentity))(Prelude[">>="](Control_Monad_Error_Trans.bindErrorT(Data_Identity.monadIdentity))(matchls$prime(expr.value0.value0)(expr.value1))(Prelude.flip(replace$prime)(expr.value0.value1)))(wrapLambda(expr.value0.value0)(expr.value1));
            };
            if (expr instanceof AST.App && (expr.value0 instanceof AST.SectL && expr.value1.length === 1)) {
                return Control_Alt["<|>"](Control_Monad_Error_Trans.altErrorT(Data_Identity.monadIdentity))(binary(expr.value0.value1)(expr.value0.value0)(expr.value1[0]))(Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(new AST.Binary(expr.value0.value1, expr.value0.value0, expr.value1[0])));
            };
            if (expr instanceof AST.App && (expr.value0 instanceof AST.SectR && expr.value1.length === 1)) {
                return Control_Alt["<|>"](Control_Monad_Error_Trans.altErrorT(Data_Identity.monadIdentity))(binary(expr.value0.value0)(expr.value1[0])(expr.value0.value1))(Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(new AST.Binary(expr.value0.value0, expr.value1[0], expr.value0.value1)));
            };
            if (expr instanceof AST.App && (expr.value0 instanceof AST.Prefix && expr.value1.length === 2)) {
                return Control_Alt["<|>"](Control_Monad_Error_Trans.altErrorT(Data_Identity.monadIdentity))(binary(expr.value0.value0)(expr.value1[0])(expr.value1[1]))(Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(new AST.Binary(expr.value0.value0, expr.value1[0], expr.value1[1])));
            };
            if (expr instanceof AST.App && (expr.value0 instanceof AST.Atom && expr.value0.value0 instanceof AST.Name)) {
                return apply(env)(expr.value0.value0.value0)(expr.value1);
            };
            if (expr instanceof AST.App && expr.value0 instanceof AST.App) {
                return Prelude["return"](Control_Monad_Error_Trans.monadErrorT(Data_Identity.monadIdentity))(new AST.App(expr.value0.value0, Prelude["++"](Data_Array.semigroupArray)(expr.value0.value1)(expr.value1)));
            };
            return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadErrorErrorT(Data_Identity.monadIdentity))("Cannot evaluate " + Prelude.show(AST.showExpr)(expr));
        };
    };
    var evalPath1 = function (env) {
        return function (path) {
            return function (expr) {
                return runEvalM(mapWithPath(path)(eval1(env))(expr));
            };
        };
    };
    return {
        Nth: Nth, 
        Fst: Fst, 
        Snd: Snd, 
        Thrd: Thrd, 
        End: End, 
        defsToEnv: defsToEnv, 
        evalPath1: evalPath1, 
        showPath: showPath
    };
})();
var PS = PS || {};
PS.Parser = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Alt = PS.Control_Alt;
    var Text_Parsing_Parser_String = PS.Text_Parsing_Parser_String;
    var Text_Parsing_Parser = PS.Text_Parsing_Parser;
    var Data_String = PS.Data_String;
    var Global = PS.Global;
    var Control_Apply = PS.Control_Apply;
    var Text_Parsing_Parser_Combinators = PS.Text_Parsing_Parser_Combinators;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Identity = PS.Data_Identity;
    var Data_Either = PS.Data_Either;
    var AST = PS.AST;
    var Data_Array = PS.Data_Array;
    var sepBy2 = function (__dict_Monad_589) {
        return function (p) {
            return function (sep) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_589))(p)(function (_93) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_589))(Control_Alternative.some(Text_Parsing_Parser.alternativeParserT(__dict_Monad_589))(Text_Parsing_Parser.lazy1ParserT)(Prelude[">>="](Text_Parsing_Parser.bindParserT(__dict_Monad_589))(sep)(function () {
                        return p;
                    })))(function (_92) {
                        return Prelude["return"](Text_Parsing_Parser.monadParserT(__dict_Monad_589))(Prelude[":"](_93)(_92));
                    });
                });
            };
        };
    };
    var parse = function (p) {
        return function (s) {
            var _1185 = Text_Parsing_Parser.runParser(s)(p);
            if (_1185 instanceof Data_Either.Left) {
                return Data_Either.Left.create(Prelude.show(Text_Parsing_Parser.showParseError)(_1185.value0));
            };
            if (_1185 instanceof Data_Either.Right) {
                return new Data_Either.Right(_1185.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     * -------------------------------------
     *  Parsers for the 'Atom' type
     * -------------------------------------
     */
    var num = (function () {
        var nat = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)(Data_String.split("")("123456789")))(function (_81) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alternative.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazy1ParserT)(Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)(Data_String.split("")("0123456789"))))(function (_80) {
                return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Data_String.joinWith("")(Prelude[":"](_81)(_80)));
            });
        });
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("0"))(nat))(function (_82) {
            return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(AST.Num.create(Global.readInt(10)(_82)));
        });
    })();
    var name = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String.joinWith(""))(Control_Alternative.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazy1ParserT)(Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)(Data_String.split("")("_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'")))))(function (_83) {
        var _1192 = _83 === "if" || (_83 === "then" || _83 === "else");
        if (_1192) {
            return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Trying to match reserved keyword: " + _83);
        };
        if (!_1192) {
            return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(_83);
        };
        throw new Error("Failed pattern match");
    });
    var eatSpaces = Prelude["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Control_Alternative.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazy1ParserT)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(" "))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("\t"))));
    var ifthenelse = function (expr_1) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("if"))(eatSpaces))(function () {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr_1)(function (_98) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("then")))(eatSpaces))(function () {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr_1)(function (_97) {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("else")))(eatSpaces))(function () {
                            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr_1)(function (_96) {
                                return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.IfExpr(_98, _97, _96));
                            });
                        });
                    });
                });
            });
        });
    };
    var list = function (p) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("["))(function () {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(p)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(",")))(eatSpaces))))(function (_84) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("]"))(function () {
                            return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(_84);
                        });
                    });
                });
            });
        });
    };
    var listLit = function (binding_1) {
        return Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.ListLit.create)(list(binding_1));
    };
    var opP = function (strP) {
        return function (opConstructor) {
            return Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(strP))(eatSpaces))(Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(opConstructor)));
        };
    };
    var opList = [ opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("."))(AST.Composition.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("^"))(AST.Power.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("*"))(AST.Mul.value), opP(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("`div`")))(AST.Div.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("`mod`"))(AST.Mod.value), opP(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("+"))(Text_Parsing_Parser_Combinators.notFollowedBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("+"))))(AST.Add.value), opP(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("-"))(Text_Parsing_Parser_Combinators.notFollowedBy(Data_Identity.monadIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(num))))(AST.Sub.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(":"))(AST.Cons.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("++"))(AST.Append.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("=="))(AST.Eq.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("/="))(AST.Neq.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("<="))(AST.Leq.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("<"))(AST.Lt.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(">="))(AST.Geq.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(">"))(AST.Gt.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("&&"))(AST.And.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("||"))(AST.Or.value), opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("$"))(AST.Dollar.value) ];
    var char_ = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Char.create)(Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)([ Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("\\\\"))(Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))("\\")), Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("\\\""))(Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))("\"")), Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity) ]));
    var character = Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("'"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("'"))(char_);
    var stringList = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("\""))(function () {
        return Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(char_)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("\""));
    });
    var bracket = function (p) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("("))(function () {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(p)(function (_87) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(")"))(function () {
                            return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(_87);
                        });
                    });
                });
            });
        });
    };
    var consLit = function (binding_1) {
        var cons = function (recurse) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(binding_1)(function (_104) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(":"))(function () {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(recurse)(function (_103) {
                                return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.ConsLit(_104, _103));
                            });
                        });
                    });
                });
            });
        };
        var recurse = Control_Lazy.fix1(Text_Parsing_Parser.lazy1ParserT)(function (recurse_1) {
            return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(cons(recurse_1)))(binding_1);
        });
        return bracket(recurse);
    };
    var prefixOp = bracket(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Prefix.create)(Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)(opList)));
    var section = function (expr_1) {
        var sectR = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)(opList))(function (_89) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr_1)(function (_88) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.SectR(_89, _88));
                });
            });
        });
        var sectL = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr_1)(function (_91) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)(opList))(function (_90) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.SectL(_91, _90));
                });
            });
        });
        return bracket(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(sectR))(sectL));
    };
    var tuple = function (expr_1) {
        return bracket(sepBy2(Data_Identity.monadIdentity)(expr_1)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(",")))(eatSpaces))));
    };
    var tupleLit = function (binding_1) {
        return Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.NTupleLit.create)(tuple(binding_1));
    };
    var bool = (function () {
        var t = Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("True"))(Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.Bool(true)));
        var f = Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("False"))(Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.Bool(false)));
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(f)(t);
    })();
    var atom = Text_Parsing_Parser_Combinators["<?>"](Data_Identity.monadIdentity)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(num)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(bool)))(character))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Name.create)(name)))("Atom (Number, Boolean, Name)");
    var base = function (expr_1) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.List.create)(list(expr_1)))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Prelude["<<<"](Prelude.semigroupoidArr)(AST.List.create)(Prelude["<$>"](Data_Array.functorArray)(AST.Atom.create)))(stringList)))(bracket(expr_1)))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Atom.create)(atom));
    };
    var termNTuple = function (expr_1) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.NTuple.create)(tuple(expr_1))))(base(expr_1));
    };
    
    /**
     * -------------------------------------
     *  Parsers for the 'Binding' type
     * -------------------------------------
     */
    var lit = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Lit.create)(atom);
    var binding = Control_Lazy.fix1(Text_Parsing_Parser.lazy1ParserT)(function (binding_1) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(lit)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(consLit(binding_1))))(tupleLit(binding_1)))(listLit(binding_1));
    });
    var lambda = function (expr_1) {
        return bracket(Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("\\"))(function () {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepEndBy(Data_Identity.monadIdentity)(binding)(eatSpaces))(function (_95) {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("->"))(function () {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr_1)(function (_94) {
                                return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.Lambda(_95, _94));
                            });
                        });
                    });
                });
            });
        }));
    };
    var termLambda = function (expr_1) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(lambda(expr_1)))(termNTuple(expr_1));
    };
    var termPrefixOp = function (expr_1) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(prefixOp))(termLambda(expr_1));
    };
    var termSect = function (expr_1) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(section(termPrefixOp(expr_1))))(termPrefixOp(expr_1));
    };
    var termIf = function (expr_1) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(ifthenelse(expr_1)))(termSect(expr_1));
    };
    var app = function (expr_1) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr_1)(function (_86) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alternative.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazy1ParserT)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(expr_1))))(function (_85) {
                return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.App(_86, _85));
            });
        });
    };
    var termApp = function (expr_1) {
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(app(termIf(expr_1))))(termIf(expr_1));
    };
    var term9r = function (expr_1) {
        return Text_Parsing_Parser_Combinators.chainr1(Data_Identity.monadIdentity)(termApp(expr_1))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("."))(AST.Composition.value)));
    };
    var term8r = function (expr_1) {
        return Text_Parsing_Parser_Combinators.chainr1(Data_Identity.monadIdentity)(term9r(expr_1))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("^"))(AST.Power.value)));
    };
    var term7l = function (expr_1) {
        var mulP = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("*"))(AST.Mul.value));
        var modP = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("`mod`"))(AST.Mod.value));
        var divP = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("`div`"))(AST.Div.value));
        return Text_Parsing_Parser_Combinators.chainl1(Data_Identity.monadIdentity)(term8r(expr_1))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(mulP)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(divP)))(modP));
    };
    var term6neg = function (expr_1) {
        var negation = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("-"))(function () {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(term7l(expr_1))(function (_99) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.Unary(AST.Sub.value, _99));
                });
            });
        });
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(negation))(term7l(expr_1));
    };
    var term6l = function (expr_1) {
        var subP = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("-"))(AST.Sub.value));
        var addP = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("+"))(Text_Parsing_Parser_Combinators.notFollowedBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("+"))))(AST.Add.value));
        return Text_Parsing_Parser_Combinators.chainl1(Data_Identity.monadIdentity)(term6neg(expr_1))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(addP)(subP));
    };
    var term5r = function (expr_1) {
        var consP = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(":"))(AST.Cons.value));
        var appendP = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("++"))(AST.Append.value));
        return Text_Parsing_Parser_Combinators.chainr1(Data_Identity.monadIdentity)(term6l(expr_1))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(consP)(appendP));
    };
    var term4 = function (expr_1) {
        var neq = opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("/="))(AST.Neq.value);
        var lt = opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("<"))(AST.Lt.value);
        var leq = opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("<="))(AST.Leq.value);
        var gt = opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(">"))(AST.Gt.value);
        var geq = opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(">="))(AST.Geq.value);
        var eq = opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("=="))(AST.Eq.value);
        var comparison = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(term5r(expr_1))(function (_102) {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.choice(Data_Identity.monadIdentity)([ eq, neq, leq, lt, geq, gt ]))(function (_101) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(term5r(expr_1))(function (_100) {
                    return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.Binary(_101, _102, _100));
                });
            });
        });
        return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(comparison))(term5r(expr_1));
    };
    var term3r = function (expr_1) {
        return Text_Parsing_Parser_Combinators.chainr1(Data_Identity.monadIdentity)(term4(expr_1))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("&&"))(AST.And.value)));
    };
    var term2r = function (expr_1) {
        return Text_Parsing_Parser_Combinators.chainr1(Data_Identity.monadIdentity)(term3r(expr_1))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("||"))(AST.Or.value)));
    };
    var term0r = function (expr_1) {
        return Text_Parsing_Parser_Combinators.chainr1(Data_Identity.monadIdentity)(term2r(expr_1))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AST.Binary.create)(opP(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("$"))(AST.Dollar.value)));
    };
    var expr = Control_Lazy.fix1(Text_Parsing_Parser.lazy1ParserT)(function (expr_1) {
        return term0r(expr_1);
    });
    var def = Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(name)(function (_107) {
        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
            return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepEndBy(Data_Identity.monadIdentity)(binding)(eatSpaces))(function (_106) {
                return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("="))(function () {
                    return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(eatSpaces)(function () {
                        return Prelude[">>="](Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr)(function (_105) {
                            return Prelude["return"](Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(new AST.Def(_107, _106, _105));
                        });
                    });
                });
            });
        });
    });
    var defs = Text_Parsing_Parser_Combinators.sepEndBy(Data_Identity.monadIdentity)(def)(Text_Parsing_Parser_String.skipSpaces(Data_Identity.monadIdentity));
    
    /**
     * -------------------------------------
     *  Parsers for the 'Definition' type
     * -------------------------------------
     */
    var parseDefs = parse(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Data_Identity.monadIdentity))(defs));
    
    /**
     * -------------------------------------
     *  Parsers for the 'Expr' type
     * -------------------------------------
     */
    var parseExpr = parse(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(eatSpaces)(expr));
    return {
        defs: defs, 
        def: def, 
        parseDefs: parseDefs, 
        binding: binding, 
        tupleLit: tupleLit, 
        consLit: consLit, 
        listLit: listLit, 
        lit: lit, 
        expr: expr, 
        term0r: term0r, 
        term2r: term2r, 
        term3r: term3r, 
        term4: term4, 
        term5r: term5r, 
        term6l: term6l, 
        term6neg: term6neg, 
        term7l: term7l, 
        term8r: term8r, 
        term9r: term9r, 
        opP: opP, 
        termApp: termApp, 
        termIf: termIf, 
        termSect: termSect, 
        termPrefixOp: termPrefixOp, 
        termLambda: termLambda, 
        termNTuple: termNTuple, 
        ifthenelse: ifthenelse, 
        lambda: lambda, 
        base: base, 
        tuple: tuple, 
        sepBy2: sepBy2, 
        prefixOp: prefixOp, 
        opList: opList, 
        section: section, 
        bracket: bracket, 
        app: app, 
        stringList: stringList, 
        list: list, 
        parseExpr: parseExpr, 
        atom: atom, 
        name: name, 
        character: character, 
        char_: char_, 
        bool: bool, 
        num: num, 
        parse: parse, 
        eatSpaces: eatSpaces
    };
})();
var PS = PS || {};
PS.Web = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    var Control_Monad_JQuery = PS.Control_Monad_JQuery;
    var Control_Bind = PS.Control_Bind;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Control_Apply = PS.Control_Apply;
    var Data_Foldable = PS.Data_Foldable;
    var Data_String = PS.Data_String;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Data_StrMap = PS.Data_StrMap;
    var Data_Tuple = PS.Data_Tuple;
    var AST = PS.AST;
    var Evaluator = PS.Evaluator;
    var pathPropName = "clickyEvaluation_path";
    var makeDiv = function (text) {
        return function (classes) {
            return function __do() {
                var _145 = Control_Monad_JQuery.create("<div></div>")();
                Control_Monad_JQuery.setText(text)(_145)();
                Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(classes)(Prelude.flip(Control_Monad_JQuery.addClass)(_145))();
                return _145;
            };
        };
    };
    var section = function (j1) {
        return function (j2) {
            return function __do() {
                var _135 = makeDiv("")([ "section" ])();
                var _134 = makeDiv("(")([ "brace" ])();
                Control_Monad_JQuery.append(_134)(_135)();
                Control_Monad_JQuery.append(j1)(_135)();
                Control_Monad_JQuery.append(j2)(_135)();
                var _133 = makeDiv(")")([ "brace" ])();
                Control_Monad_JQuery.append(_133)(_135)();
                return _135;
            };
        };
    };
    var string = function (es) {
        var str = "\"" + (Data_String.joinWith("")(Prelude["<$>"](Data_Array.functorArray)(function (_745) {
            if (_745 instanceof AST.Atom && _745.value0 instanceof AST.Char) {
                return _745.value0.value0;
            };
            throw new Error("Failed pattern match");
        })(es)) + "\"");
        return function __do() {
            var _143 = makeDiv(str)([ "list", "string" ])();
            return _143;
        };
    };
    var lambda = function (jBinds) {
        return function (jBody) {
            return function __do() {
                var _130 = makeDiv("")([ "lambda" ])();
                var _129 = makeDiv("(")([ "brace" ])();
                Control_Monad_JQuery.append(_129)(_130)();
                var _128 = makeDiv("\\")([ "backslash" ])();
                Control_Monad_JQuery.append(_128)(_130)();
                Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(jBinds)(Prelude.flip(Control_Monad_JQuery.append)(_130))();
                var _127 = makeDiv("->")([ "arrow" ])();
                Control_Monad_JQuery.append(_127)(_130)();
                Control_Monad_JQuery.append(jBody)(_130)();
                var _126 = makeDiv(")")([ "brace" ])();
                Control_Monad_JQuery.append(_126)(_130)();
                return _130;
            };
        };
    };
    var isString = function (es) {
        var isChar = function (_748) {
            if (_748 instanceof AST.Atom && _748.value0 instanceof AST.Char) {
                return true;
            };
            return false;
        };
        return Data_Array.length(es) > 0 && Data_Foldable.all(Data_Foldable.foldableArray)(isChar)(es);
    };
    var interleaveM_ = function (__dict_Monad_590) {
        return function (f) {
            return function (sep) {
                var go = function (_747) {
                    if (_747.length === 0) {
                        return Prelude["return"](__dict_Monad_590)(Prelude.unit);
                    };
                    if (_747.length === 1) {
                        return Prelude["void"](((__dict_Monad_590["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f(_747[0]));
                    };
                    if (_747.length >= 1) {
                        var _1234 = _747.slice(1);
                        return Control_Apply["*>"]((__dict_Monad_590["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Control_Apply["*>"]((__dict_Monad_590["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(f(_747[0]))(sep))(go(_1234));
                    };
                    throw new Error("Failed pattern match");
                };
                return go;
            };
        };
    };
    var list = function (js) {
        return function __do() {
            var _142 = makeDiv("")([ "list" ])();
            var _141 = makeDiv("[")([ "brace" ])();
            Control_Monad_JQuery.append(_141)(_142)();
            interleaveM_(Control_Monad_Eff.monadEff)(Prelude.flip(Control_Monad_JQuery.append)(_142))(Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(",")([ "comma" ]))(Prelude.flip(Control_Monad_JQuery.append)(_142)))(js)();
            var _140 = makeDiv("]")([ "brace" ])();
            Control_Monad_JQuery.append(_140)(_142)();
            return _142;
        };
    };
    var tuple = function (js) {
        return function __do() {
            var _139 = makeDiv("")([ "tuple" ])();
            var _138 = makeDiv("(")([ "brace" ])();
            Control_Monad_JQuery.append(_138)(_139)();
            interleaveM_(Control_Monad_Eff.monadEff)(Prelude.flip(Control_Monad_JQuery.append)(_139))(Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(",")([ "comma" ]))(Prelude.flip(Control_Monad_JQuery.append)(_139)))(js)();
            var _137 = makeDiv(")")([ "brace" ])();
            Control_Monad_JQuery.append(_137)(_139)();
            return _139;
        };
    };
    var ifexpr = function (cond) {
        return function (thenExpr) {
            return function (elseExpr) {
                return function __do() {
                    var _136 = makeDiv("")([ "if" ])();
                    Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("if")([ "keyword" ]))(Prelude.flip(Control_Monad_JQuery.append)(_136))();
                    Control_Monad_JQuery.append(cond)(_136)();
                    Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("then")([ "keyword" ]))(Prelude.flip(Control_Monad_JQuery.append)(_136))();
                    Control_Monad_JQuery.append(thenExpr)(_136)();
                    Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("else")([ "keyword" ]))(Prelude.flip(Control_Monad_JQuery.append)(_136))();
                    Control_Monad_JQuery.append(elseExpr)(_136)();
                    return _136;
                };
            };
        };
    };
    var getPath = function (j) {
        return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Foreign.unsafeFromForeign)(Control_Monad_JQuery.getProp(pathPropName)(j));
    };
    var binary = function (op) {
        return function (j1) {
            return function (j2) {
                return function __do() {
                    var _132 = makeDiv("")([ "binary" ])();
                    Control_Monad_JQuery.append(j1)(_132)();
                    var _131 = makeDiv(Prelude.show(AST.showOp)(op))([ "op" ])();
                    Control_Monad_JQuery.append(_131)(_132)();
                    Control_Monad_JQuery.append(j2)(_132)();
                    return _132;
                };
            };
        };
    };
    var atom = function (_746) {
        if (_746 instanceof AST.Num) {
            return makeDiv(Prelude.show(Prelude.showNumber)(_746.value0))([ "atom", "num" ]);
        };
        if (_746 instanceof AST.Bool && _746.value0) {
            return makeDiv("True")([ "atom", "bool" ]);
        };
        if (_746 instanceof AST.Bool && !_746.value0) {
            return makeDiv("False")([ "atom", "bool" ]);
        };
        if (_746 instanceof AST.Char) {
            return makeDiv("'" + (_746.value0 + "'"))([ "atom", "char" ]);
        };
        if (_746 instanceof AST.Name) {
            return makeDiv(_746.value0)([ "atom", "name" ]);
        };
        throw new Error("Failed pattern match");
    };
    var binding = function (b) {
        if (b instanceof AST.Lit) {
            return atom(b.value0);
        };
        if (b instanceof AST.ConsLit) {
            return function __do() {
                var _123 = makeDiv("")([  ])();
                Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("(")([ "brace" ]))(Prelude.flip(Control_Monad_JQuery.append)(_123))();
                Prelude[">>="](Control_Monad_Eff.bindEff)(binding(b.value0))(Prelude.flip(Control_Monad_JQuery.append)(_123))();
                Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(":")([ "colon" ]))(Prelude.flip(Control_Monad_JQuery.append)(_123))();
                Prelude[">>="](Control_Monad_Eff.bindEff)(binding(b.value1))(Prelude.flip(Control_Monad_JQuery.append)(_123))();
                return Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(")")([ "brace" ]))(Prelude.flip(Control_Monad_JQuery.append)(_123))();
            };
        };
        if (b instanceof AST.ListLit) {
            return function __do() {
                var _124 = makeDiv("")([  ])();
                Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("[")([ "brace" ]))(Prelude.flip(Control_Monad_JQuery.append)(_124))();
                Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(b.value0)(function (b_2) {
                    return function __do() {
                        Prelude[">>="](Control_Monad_Eff.bindEff)(binding(b_2))(Prelude.flip(Control_Monad_JQuery.append)(_124))();
                        return Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(",")([ "comma" ]))(Prelude.flip(Control_Monad_JQuery.append)(_124))();
                    };
                })();
                return Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("]")([ "brace" ]))(Prelude.flip(Control_Monad_JQuery.append)(_124))();
            };
        };
        if (b instanceof AST.NTupleLit) {
            return function __do() {
                var _125 = makeDiv("")([  ])();
                Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv("(")([ "brace" ]))(Prelude.flip(Control_Monad_JQuery.append)(_125))();
                interleaveM_(Control_Monad_Eff.monadEff)(Control_Bind[">=>"](Control_Monad_Eff.bindEff)(binding)(Prelude.flip(Control_Monad_JQuery.append)(_125)))(Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(",")([ "comma" ]))(Prelude.flip(Control_Monad_JQuery.append)(_125)))(b.value0)();
                Prelude[">>="](Control_Monad_Eff.bindEff)(makeDiv(")")([ "brace" ]))(Prelude.flip(Control_Monad_JQuery.append)(_125))();
                return _125;
            };
        };
        throw new Error("Failed pattern match");
    };
    var app = function (jFunc) {
        return function (jArgs) {
            return function __do() {
                var _144 = makeDiv("")([ "app" ])();
                Control_Monad_JQuery.addClass("func")(jFunc)();
                Control_Monad_JQuery.append(jFunc)(_144)();
                Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(jArgs)(Prelude.flip(Control_Monad_JQuery.append)(_144))();
                return _144;
            };
        };
    };
    var exprToJQuery = function (expr) {
        var go = function (p) {
            return function (e) {
                return Control_Bind["=<<"](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.setProp(pathPropName)(p(Evaluator.End.value)))((function () {
                    if (e instanceof AST.Atom) {
                        return atom(e.value0);
                    };
                    if (e instanceof AST.Binary) {
                        return function __do() {
                            var _109 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Fst.create))(e.value1)();
                            var _108 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Snd.create))(e.value2)();
                            return binary(e.value0)(_109)(_108)();
                        };
                    };
                    if (e instanceof AST.List) {
                        var _1267 = isString(e.value0);
                        if (_1267) {
                            return string(e.value0);
                        };
                        if (!_1267) {
                            return function __do() {
                                var _110 = Data_Traversable.zipWithA(Control_Monad_Eff.applicativeEff)(function (i) {
                                    return function (e_1) {
                                        return go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Nth.create(i)))(e_1);
                                    };
                                })(Data_Array[".."](0)(Data_Array.length(e.value0) - 1))(e.value0)();
                                return list(_110)();
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                    if (e instanceof AST.NTuple) {
                        return function __do() {
                            var _111 = Data_Traversable.zipWithA(Control_Monad_Eff.applicativeEff)(function (i) {
                                return function (e_1) {
                                    return go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Nth.create(i)))(e_1);
                                };
                            })(Data_Array[".."](0)(Data_Array.length(e.value0) - 1))(e.value0)();
                            return tuple(_111)();
                        };
                    };
                    if (e instanceof AST.SectL) {
                        return function __do() {
                            var _113 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Fst.create))(e.value0)();
                            var _112 = makeDiv(Prelude.show(AST.showOp)(e.value1))([ "op" ])();
                            return section(_113)(_112)();
                        };
                    };
                    if (e instanceof AST.SectR) {
                        return function __do() {
                            var _115 = makeDiv(Prelude.show(AST.showOp)(e.value0))([ "op" ])();
                            var _114 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Snd.create))(e.value1)();
                            return section(_115)(_114)();
                        };
                    };
                    if (e instanceof AST.Prefix) {
                        return makeDiv("(" + (Prelude.show(AST.showOp)(e.value0) + ")"))([ "prefix", "op" ]);
                    };
                    if (e instanceof AST.IfExpr) {
                        return function __do() {
                            var _118 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Fst.create))(e.value0)();
                            var _117 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Snd.create))(e.value1)();
                            var _116 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Thrd.create))(e.value2)();
                            return ifexpr(_118)(_117)(_116)();
                        };
                    };
                    if (e instanceof AST.Lambda) {
                        return function __do() {
                            var _120 = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(e.value0)(binding)();
                            var _119 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Fst.create))(e.value1)();
                            return lambda(_120)(_119)();
                        };
                    };
                    if (e instanceof AST.App) {
                        return function __do() {
                            var _122 = go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Fst.create))(e.value0)();
                            var _121 = Data_Traversable.zipWithA(Control_Monad_Eff.applicativeEff)(function (i) {
                                return function (e_3) {
                                    return go(Prelude["<<<"](Prelude.semigroupoidArr)(p)(Evaluator.Nth.create(i)))(e_3);
                                };
                            })(Data_Array[".."](0)(Data_Array.length(e.value1) - 1))(e.value1)();
                            return app(_122)(_121)();
                        };
                    };
                    throw new Error("Failed pattern match");
                })());
            };
        };
        return go(Prelude.id(Prelude.categoryArr))(expr);
    };
    return {
        getPath: getPath, 
        exprToJQuery: exprToJQuery
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_JQuery = PS.Control_Monad_JQuery;
    var Ace = PS.Ace;
    var Ace_Editor = PS.Ace_Editor;
    var Parser = PS.Parser;
    var Evaluator = PS.Evaluator;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_Eff_Class = PS.Control_Monad_Eff_Class;
    var Control_Monad_State_Class = PS.Control_Monad_State_Class;
    var Debug_Trace = PS.Debug_Trace;
    var Web = PS.Web;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Foreign = PS.Data_Foreign;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    var Ace_Types = PS.Ace_Types;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Control_Apply = PS.Control_Apply;
    var AST = PS.AST;
    
  function isEnterKey(event) {
    return event.which == 13;
  }
  ;
    
  function map(callback) {
    return function(ob) {
      return function () {
        return ob.map( function(i, e) { return callback(jQuery(e))(); } );
      };
    };
  }
  ;
    var $bang$bang$bang = function (xs) {
        return function (i) {
            var _1295 = Data_Array["!!"](xs)(i);
            if (_1295 instanceof Data_Maybe.Just) {
                return _1295.value0;
            };
            throw new Error("Failed pattern match");
        };
    };
    var wrapInDiv = function (name) {
        return function (jq) {
            return Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.create("<div></div>"))(Control_Monad_JQuery.addClass(name)))(Control_Monad_JQuery.append(jq));
        };
    };
    var removeMouseOver = Prelude["void"](Control_Monad_Eff.functorEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.select(".mouseOver"))(Control_Monad_JQuery.removeClass("mouseOver")));
    var prepareContainer = function (name) {
        return Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.select("#" + (name + "-container")))(Control_Monad_JQuery.clear);
    };
    var makeClickable = function (jq) {
        var testEval = function (env) {
            return function (expr) {
                return function (jq_1) {
                    return function __do() {
                        var _158 = Web.getPath(jq_1)();
                        return (function () {
                            var _1298 = Evaluator.evalPath1(env)(_158)(expr);
                            if (_1298 instanceof Data_Either.Left) {
                                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                            };
                            if (_1298 instanceof Data_Either.Right) {
                                return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_JQuery.addClass("clickable")(jq_1));
                            };
                            throw new Error("Failed pattern match");
                        })()();
                    };
                };
            };
        };
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.monadStateStateT(Control_Monad_Eff.monadEff)))(function (_159) {
            return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(map(testEval(_159.env)(_159.expr))(jq));
        });
    };
    var getValue = function (jq) {
        return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Foreign.unsafeFromForeign)(Control_Monad_JQuery.getValue(jq));
    };
    var forIndex = function (__dict_Applicative_591) {
        return function (as) {
            return function (f) {
                return Data_Traversable.zipWithA(__dict_Applicative_591)(f)(as)(Data_Array[".."](0)(Data_Array.length(as) - 1));
            };
        };
    };
    var clearInfo = Prelude["void"](Control_Monad_Eff.functorEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.select("#info"))(Control_Monad_JQuery.clear));
    var showInfo = function (origin) {
        return function (msg) {
            return function __do() {
                var _157 = Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.create("<p></p>"))(Control_Monad_JQuery.addClass("info")))(Control_Monad_JQuery.setText("Error in " + (origin + (" => " + msg))))();
                clearInfo();
                Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.select("#info"))(Control_Monad_JQuery.append(_157))();
                return Prelude.unit;
            };
        };
    };
    var addMouseOverListener = function (jq) {
        var handler = function (jEvent) {
            return function (jq_1) {
                return function __do() {
                    Control_Monad_JQuery.stopImmediatePropagation(jEvent)();
                    removeMouseOver();
                    Control_Monad_JQuery.addClass("mouseOver")(jq_1)();
                    return Prelude.unit;
                };
            };
        };
        return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_JQuery.on("mouseover")(handler)(jq));
    };
    var showHistoryList = function (exprs) {
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.create("<div></div>"))(Control_Monad_JQuery.addClass("historyBox"))))(function (_152) {
            return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(forIndex(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Eff.monadEff))(exprs)(function (expr) {
                return function (i) {
                    return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(showHistory(expr)(i))(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff)))(wrapInDiv("vertical"))))(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff)))(Prelude.flip(Control_Monad_JQuery.append)(_152)));
                };
            }))(function () {
                return Prelude["return"](Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(_152);
            });
        });
    };
    var showHistory = function (expr) {
        return function (i) {
            return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.create("<div></div>"))(Control_Monad_JQuery.addClass("history"))))(function (_156) {
                return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Web.exprToJQuery(expr))(Prelude.flip(Control_Monad_JQuery.append)(_156))))(function () {
                    return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.monadStateStateT(Control_Monad_Eff.monadEff)))(function (_155) {
                        var deleteHandler = function (_755) {
                            return function (_754) {
                                var es$prime = (function () {
                                    var _1310 = {};
                                    for (var _1311 in _155) {
                                        if (_155.hasOwnProperty(_1311)) {
                                            _1310[_1311] = _155[_1311];
                                        };
                                    };
                                    _1310.history = Data_Array.deleteAt(i)(1)(_155.history);
                                    return _1310;
                                })();
                                return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_State_Trans.runStateT(showEvaluationState)(es$prime));
                            };
                        };
                        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.create("<button></button>"))(Control_Monad_JQuery.setText("Delete")))(Control_Monad_JQuery.addClass("delete")))(Control_Monad_JQuery.on("click")(deleteHandler))))(function (_154) {
                            return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_JQuery.append(_154)(_156)))(function () {
                                var restoreHandler = function (_757) {
                                    return function (_756) {
                                        var es$prime = (function () {
                                            var _1315 = {};
                                            for (var _1316 in _155) {
                                                if (_155.hasOwnProperty(_1316)) {
                                                    _1315[_1316] = _155[_1316];
                                                };
                                            };
                                            _1315.history = Data_Array.drop(i + 1)(_155.history);
                                            _1315.expr = $bang$bang$bang(_155.history)(i);
                                            return _1315;
                                        })();
                                        return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_State_Trans.runStateT(showEvaluationState)(es$prime));
                                    };
                                };
                                return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.create("<button></button>"))(Control_Monad_JQuery.setText("Restore")))(Control_Monad_JQuery.addClass("restore")))(Control_Monad_JQuery.on("click")(restoreHandler))))(function (_153) {
                                    return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_JQuery.append(_153)(_156)))(function () {
                                        return Prelude["return"](Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(_156);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
    };
    var showEvaluationState = Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(prepareContainer("output")))(function (_151) {
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(prepareContainer("history")))(function (_150) {
            return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.monadStateStateT(Control_Monad_Eff.monadEff)))(function (_149) {
                return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Debug_Trace.print(AST.showExpr)(_149.expr)))(function () {
                    return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Web.exprToJQuery(_149.expr))(wrapInDiv("output")))(Prelude.flip(Control_Monad_JQuery.append)(_151))))(function () {
                        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(showHistoryList(_149.history))(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff)))(Prelude.flip(Control_Monad_JQuery.append)(_150))))(function () {
                            return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_JQuery.find(".binary, .app, .func, .list, .if")(_151)))(makeClickable))(function () {
                                return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_JQuery.find(".clickable")(_151)))(addMouseOverListener))(addClickListener))(function () {
                                    return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.body)(Control_Monad_JQuery.on("mouseover")(function (_753) {
                                        return function (_752) {
                                            return removeMouseOver;
                                        };
                                    }))))(function () {
                                        return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit));
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
    var evalExpr = function (path) {
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.monadStateStateT(Control_Monad_Eff.monadEff)))(function (_162) {
            return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Debug_Trace.print(Evaluator.showPath)(path)))(function () {
                var _1327 = Evaluator.evalPath1(_162.env)(path)(_162.expr);
                if (_1327 instanceof Data_Either.Left) {
                    return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(showInfo("execution")(_1327.value0));
                };
                if (_1327 instanceof Data_Either.Right) {
                    return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.monadStateStateT(Control_Monad_Eff.monadEff))(function (es) {
                        var _1329 = {};
                        for (var _1330 in es) {
                            if (es.hasOwnProperty(_1330)) {
                                _1329[_1330] = es[_1330];
                            };
                        };
                        _1329.expr = _1327.value0;
                        return _1329;
                    }))(function () {
                        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.monadStateStateT(Control_Monad_Eff.monadEff))(function (es) {
                            var _1331 = {};
                            for (var _1332 in es) {
                                if (es.hasOwnProperty(_1332)) {
                                    _1331[_1332] = es[_1332];
                                };
                            };
                            _1331.history = Prelude[":"](_162.expr)(es.history);
                            return _1331;
                        }))(function () {
                            return showEvaluationState;
                        });
                    });
                };
                throw new Error("Failed pattern match");
            });
        });
    };
    var addClickListener = function (jq) {
        var handler = function (evaluationState) {
            return function (jEvent) {
                return function (jq_1) {
                    return function __do() {
                        Control_Monad_JQuery.stopImmediatePropagation(jEvent)();
                        var _160 = Web.getPath(jq_1)();
                        return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_State_Trans.runStateT(evalExpr(_160))(evaluationState))();
                    };
                };
            };
        };
        return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff))(Control_Monad_State_Class.monadStateStateT(Control_Monad_Eff.monadEff)))(function (_161) {
            return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffState(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_JQuery.on("click")(handler(_161))(jq));
        });
    };
    var startEvaluation = function __do() {
        var _148 = Ace.edit("definitions")(Ace.ace)();
        var _147 = Ace_Editor.getValue(_148)();
        var _146 = Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.select("#input"))(getValue)();
        return (function () {
            var _1341 = Parser.parseExpr(_146);
            if (_1341 instanceof Data_Either.Left) {
                return showInfo("Expression")(_1341.value0);
            };
            if (_1341 instanceof Data_Either.Right) {
                var _1343 = Prelude["<$>"](Data_Either.functorEither)(Evaluator.defsToEnv)(Parser.parseDefs(_147));
                if (_1343 instanceof Data_Either.Left) {
                    return showInfo("Definitions")(_1343.value0);
                };
                if (_1343 instanceof Data_Either.Right) {
                    return function __do() {
                        clearInfo();
                        return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_State_Trans.runStateT(showEvaluationState)({
                            env: _1343.value0, 
                            expr: _1341.value0, 
                            history: [  ]
                        }))();
                    };
                };
                throw new Error("Failed pattern match");
            };
            throw new Error("Failed pattern match");
        })()();
    };
    var main = Control_Monad_JQuery.ready(function __do() {
        Prelude[">>="](Control_Monad_Eff.bindEff)(Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_JQuery.select("#input"))(Control_Monad_JQuery.on("change")(function (_750) {
            return function (_749) {
                return startEvaluation;
            };
        })))(Control_Monad_JQuery.on("keyup")(function (e) {
            return function (_751) {
                var _1350 = isEnterKey(e);
                if (_1350) {
                    return startEvaluation;
                };
                if (!_1350) {
                    return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        }))();
        return startEvaluation();
    });
    return {
        getValue: getValue, 
        evalExpr: evalExpr, 
        removeMouseOver: removeMouseOver, 
        addClickListener: addClickListener, 
        addMouseOverListener: addMouseOverListener, 
        makeClickable: makeClickable, 
        wrapInDiv: wrapInDiv, 
        prepareContainer: prepareContainer, 
        clearInfo: clearInfo, 
        showInfo: showInfo, 
        showHistory: showHistory, 
        "!!!": $bang$bang$bang, 
        showHistoryList: showHistoryList, 
        forIndex: forIndex, 
        showEvaluationState: showEvaluationState, 
        map: map, 
        startEvaluation: startEvaluation, 
        isEnterKey: isEnterKey, 
        main: main
    };
})();
